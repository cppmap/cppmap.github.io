{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C++ \u306e\u6b69\u304d\u65b9 | CppMap #include <iostream> int main () { std :: cout << \"Hello, CppMap! \\n \" ; } \u3053\u306e\u30b5\u30a4\u30c8\u306b\u3064\u3044\u3066 C++17, C++20, C++23, C++26 \u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u8abf\u67fb\u30fb\u63d0\u4f9b\u3057\u307e\u3059\u3002 \u7ba1\u7406\u8005 @Reputeless \u3068\u3001 \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf\u306e\u7686\u69d8 \u306b\u3088\u3063\u3066\u57f7\u7b46\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u65b9\u6cd5 \u30e9\u30a4\u30bb\u30f3\u30b9 \u672c\u30b5\u30a4\u30c8\u306e\u8a18\u4e8b\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30d1\u30d6\u30ea\u30c3\u30af\u30c9\u30e1\u30a4\u30f3\u3067\u3059\u3002 \u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u8457\u4f5c\u6a29\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u6240\u6709\u8005\u306b\u5e30\u5c5e\u3057\u307e\u3059\u3002 \ud83d\udc97 \u30b9\u30dd\u30f3\u30b5\u30fc sknjpn \u30a2\u30b2\u30cf\u30de chobby75","title":"Home"},{"location":"#c-cppmap","text":"#include <iostream> int main () { std :: cout << \"Hello, CppMap! \\n \" ; }","title":"C++ \u306e\u6b69\u304d\u65b9 | CppMap"},{"location":"#_1","text":"C++17, C++20, C++23, C++26 \u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u8abf\u67fb\u30fb\u63d0\u4f9b\u3057\u307e\u3059\u3002 \u7ba1\u7406\u8005 @Reputeless \u3068\u3001 \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf\u306e\u7686\u69d8 \u306b\u3088\u3063\u3066\u57f7\u7b46\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u65b9\u6cd5","title":"\u3053\u306e\u30b5\u30a4\u30c8\u306b\u3064\u3044\u3066"},{"location":"#_2","text":"\u672c\u30b5\u30a4\u30c8\u306e\u8a18\u4e8b\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30d1\u30d6\u30ea\u30c3\u30af\u30c9\u30e1\u30a4\u30f3\u3067\u3059\u3002 \u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u8457\u4f5c\u6a29\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u6240\u6709\u8005\u306b\u5e30\u5c5e\u3057\u307e\u3059\u3002","title":"\u30e9\u30a4\u30bb\u30f3\u30b9"},{"location":"#_3","text":"sknjpn \u30a2\u30b2\u30cf\u30de chobby75","title":"\ud83d\udc97 \u30b9\u30dd\u30f3\u30b5\u30fc"},{"location":"articles/acronyms/","text":"C++ \u95a2\u9023\u306e\u7565\u8a9e ABI | Application Binary Interface \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30d0\u30a4\u30ca\u30ea\u30fb\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 ACCU | Association of C and C++ Users C \u304a\u3088\u3073 C++ \u30e6\u30fc\u30b6\u5354\u4f1a\u3002 \u5e74\u6b21\u30ab\u30f3\u30d5\u30a1\u30ec\u30f3\u30b9 \u306e\u958b\u50ac\u3084\u300c Overload \u300d\u306e\u520a\u884c\u306a\u3069\u3092\u884c\u3046\u3002 ADL | Argument Dependent Lookup \u5b9f\u5f15\u6570\u4f9d\u5b58\u306e\u540d\u524d\u691c\u7d22 ANSI | American National Standards Institute \u7c73\u56fd\u56fd\u5bb6\u898f\u683c\u5354\u4f1a API | Application Programming Interface \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30fb\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 ASan | AddressSanitizer \u30e1\u30e2\u30ea\u95a2\u9023\u306e\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u52d5\u7684\u89e3\u6790\u30c4\u30fc\u30eb BCC | Borland C++ Compiler \u73fe\u5728\u306e Embarcadero C++ Builder \u306e\u524d\u8eab\u30022000 \u5e74\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f Borland C++ Compiler 5.5 \u306f\u3001\u5f53\u6642\u306f\u3081\u305a\u3089\u3057\u3044\u7121\u511f\u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u3057\u3066\u3001\u5e83\u304f\u4f7f\u308f\u308c\u305f\u3002 BCPL | Basic Combined Programming Language 1966 \u5e74\u306b\u30de\u30fc\u30c6\u30a3\u30f3\u30fb\u30ea\u30c1\u30e3\u30fc\u30ba\u304c\u8a2d\u8a08\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3002C \u8a00\u8a9e\u3084 C++ \u306b\u5f71\u97ff\u3092\u4e0e\u3048\u305f\u3002 BMI | Binary Module Interface \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u30e2\u30b8\u30e5\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u751f\u6210\u3059\u308b\u4e2d\u9593\u30d5\u30a1\u30a4\u30eb\u3002GCC \u3067\u306f CMI (Compiled Module Interfaces) \u3068\u547c\u3076 C++ AMP | C++ Accelerated Massive Parallelism \u30de\u30a4\u30af\u30ed\u30bd\u30d5\u30c8\u306a\u3069\u304c\u958b\u767a\u3092\u9032\u3081\u3066\u3044\u308b\u3001\u4e26\u5217\u8a08\u7b97\u306e\u305f\u3081\u306e\u8a00\u8a9e\u62e1\u5f35\u6a5f\u80fd\u3068\u30e9\u30a4\u30d6\u30e9\u30ea CD | Committee Draft \u898f\u683c\u306e\u59d4\u54e1\u4f1a\u539f\u6848 COW | Copy On Write \u30b3\u30d4\u30fc\u30aa\u30f3\u30e9\u30a4\u30c8\u3068\u547c\u3070\u308c\u308b\u6700\u9069\u5316\u30c6\u30af\u30cb\u30c3\u30af CPP | C Preprocessor \u30de\u30af\u30ed\u3092\u51e6\u7406\u3059\u308b\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5 CRTP | Curiously Recurring Template Pattern \u5947\u5999\u306b\u518d\u5e30\u3057\u305f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30bf\u30fc\u30f3 CTAD | Class Template Argument Deduction \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u63a8\u8ad6 CWG | Core Working Group C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30ef\u30fc\u30ad\u30f3\u30b0\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064\u3002\u8a00\u8a9e\u6a5f\u80fd\u306b\u95a2\u3059\u308b\u898f\u683c\u6587\u9762\u3092\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u3002 deque | double-ended queue \u4e21\u7aef\u30ad\u30e5\u30fc DIS | Draft International Standard \u56fd\u969b\u898f\u683c\u6848 DR | Defect Report \u898f\u683c\u306e\u6b20\u9665\u306e\u5831\u544a EBO | Empty Base Optimization \u7a7a\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6700\u9069\u5316 EDG | Edison Design Group \u4f01\u696d\u540d\u3002C/C++ \u30b3\u30f3\u30d1\u30a4\u30e9\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3092\u958b\u767a\u3059\u308b\u3002 Edison Design Group EOF | End-of-File \u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef EWG | Evolution Working Group C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30ef\u30fc\u30ad\u30f3\u30b0\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064\u3002\u8a00\u8a9e\u6a5f\u80fd\u306e\u8a2d\u8a08\u3092\u3059\u308b\u3002 EWGI | Evolution Working Group Incubator C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30b9\u30bf\u30c7\u30a3\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064 (SG17). EWG \u306b\u5411\u3051\u305f\u63d0\u6848\u306e\u8a55\u4fa1\u3092\u3059\u308b\u3002 FCD | Final Committee Draft \u898f\u683c\u306e\u6700\u7d42\u59d4\u54e1\u4f1a\u539f\u6848 FDIS | Final Draft International Standard \u6700\u7d42\u56fd\u969b\u898f\u683c\u6848 GCC | GNU Compiler Collection / GNU C++ Compiler GNU \u30b3\u30f3\u30d1\u30a4\u30e9\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3001\u307e\u305f\u306f\u305d\u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9 G++ | GNU C++ Compiler GNU \u30b3\u30f3\u30d1\u30a4\u30e9\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9 ICE | Internal Compiler Error \u30b3\u30f3\u30d1\u30a4\u30e9\u5185\u90e8\u30a8\u30e9\u30fc IDE | Integrated Development Enviornment \u7d71\u5408\u958b\u767a\u74b0\u5883 IEC | International Electronics Commission \u56fd\u969b\u96fb\u6c17\u6a19\u6e96\u4f1a\u8b70 I/O | Input/Output \u5165\u51fa\u529b IS | International Standard \u56fd\u969b\u898f\u683c ISO | International Organization for Standardization \u56fd\u969b\u6a19\u6e96\u5316\u6a5f\u69cb K&R | Kernighan and Ritchie's \u30d6\u30e9\u30a4\u30a2\u30f3\u30fb\u30ab\u30fc\u30cb\u30cf\u30f3\u3068\u30c7\u30cb\u30b9\u30fb\u30ea\u30c3\u30c1\u30fc\u306b\u3088\u308b\u8457\u66f8\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e C\u300d\u306e\u4fd7\u79f0\u3002\u66f8\u4e2d\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u5b57\u4e0b\u3052\u30b9\u30bf\u30a4\u30eb\u304c\u300cK&R \u30b9\u30bf\u30a4\u30eb\u300d\u3068\u547c\u3070\u308c\u308b\u3002 LEWG | Library Evolution Working Group C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30ef\u30fc\u30ad\u30f3\u30b0\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064\u3002\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8a2d\u8a08\u3092\u3059\u308b\u3002 LEWGI | Library Evolution Working Group Incubator C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30b9\u30bf\u30c7\u30a3\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064 (SG18). LEWG \u306b\u5411\u3051\u305f\u63d0\u6848\u306e\u8a55\u4fa1\u3092\u3059\u308b\u3002 LTO | Link Time Optimization \u30ea\u30f3\u30af\u6642\u6700\u9069\u5316 LWG | Library Working Group C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30ef\u30fc\u30ad\u30f3\u30b0\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064\u3002\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u95a2\u3059\u308b\u898f\u683c\u6587\u9762\u3092\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u3002 MSVC | Microsoft Visual C++ Microsoft Visual Studio \u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9 NaN | Not a Number \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u4f7f\u308f\u308c\u308b\u975e\u6570\u306e\u8868\u73fe NB | National Body \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u5404\u56fd\u652f\u90e8 NRVO | Named Return Value Optimization \u540d\u524d\u4ed8\u304d\u623b\u308a\u5024\u306e\u6700\u9069\u5316 NSDMI | Non-Static Data Member Initializers \u975e\u9759\u7684\u30e1\u30f3\u30d0\u306e\u521d\u671f\u5316 NTTP | Non-Type Template Parameter \u975e\u578b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30fb\u30d1\u30e9\u30e1\u30fc\u30bf NVI | Non-Virtual Interface \u975e\u4eee\u60f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30c6\u30af\u30cb\u30c3\u30af ODR | One Definition Rule C++ \u306e\u8a2d\u8a08\u30b3\u30f3\u30bb\u30d7\u30c8\u306e 1 \u3064\u3002\u3042\u3089\u3086\u308b\u578b\u3084\u95a2\u6570\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u8907\u6570\u306e\u5b9a\u7fa9\u3092\u6301\u3066\u306a\u3044\u3068\u3044\u3046\u30eb\u30fc\u30eb OOD | Object Oriented Design \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u8a2d\u8a08 OOP | Object Oriented Programming \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 OOPL | Object Oriented Programing Language \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e PCH | Precompiled Header \u30d7\u30ea\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30d8\u30c3\u30c0 PGO | Profile-guided Optimization \u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u306b\u3088\u308b\u6700\u9069\u5316 PImpl | Pointer to Implementation \u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306e\u8a73\u7d30\u3092\u96a0\u3059\u3001C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30c6\u30af\u30cb\u30c3\u30af POD | Plain Old Data C \u8a00\u8a9e\u3068\u4e92\u63db\u6027\u306e\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u6301\u3064\u578b RAII | Resource Allocation Is Initialization \u300c\u30ea\u30bd\u30fc\u30b9\u53d6\u5f97\u306f\u521d\u671f\u5316\u3067\u3042\u308b\u300d\u3068\u3044\u3046 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30c6\u30af\u30cb\u30c3\u30af RTTI | Run-Time Type Information \u5b9f\u884c\u6642\u578b\u60c5\u5831 RVO | Return Value Optimization \u623b\u308a\u5024\u306e\u6700\u9069\u5316 SBO | Small Buffer Optimization \u5c0f\u3055\u3044\u52d5\u7684\u914d\u5217\u3067\u306e\u30e1\u30e2\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u907f\u3051\u308b C++ \u306e\u6700\u9069\u5316\u30c6\u30af\u30cb\u30c3\u30af SEH | Structured Exception Handling \u69cb\u9020\u5316\u4f8b\u5916\u51e6\u7406\u3002Windows \u3067\u4f7f\u308f\u308c\u308b\u72ec\u81ea\u306e\u4f8b\u5916\u51e6\u7406\u3002 SFINAE | Substitution Failure Is Not An Error \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30c6\u30af\u30cb\u30c3\u30af\u306e 1 \u3064 SG | Study Group \u7279\u5b9a\u306e\u30c6\u30fc\u30de\u306b\u3064\u3044\u3066\u8b70\u8ad6\u3059\u308b\u3001C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30b5\u30d6\u30b0\u30eb\u30fc\u30d7 SOO | Small Object Optimization \u5c0f\u3055\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3059\u308b\u30e1\u30e2\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u907f\u3051\u308b C++ \u306e\u6700\u9069\u5316\u30c6\u30af\u30cb\u30c3\u30af SSO | Small String Optimization \u77ed\u3044\u6587\u5b57\u5217\u3067\u306e\u30e1\u30e2\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u907f\u3051\u308b C++ \u306e\u6700\u9069\u5316\u30c6\u30af\u30cb\u30c3\u30af STL | Standard Template Library \u30a2\u30ec\u30af\u30b5\u30f3\u30c0\u30fc\u30fb\u30b9\u30c6\u30d1\u30ce\u30d5\u3089\u306b\u3088\u3063\u3066\u8a2d\u8a08\u3055\u308c\u305f\u6a19\u6e96\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u306e\u3061\u306b C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u90e8\u3068\u306a\u3063\u305f\u3002\u73fe\u5728\u3067\u306f C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u5168\u822c\u3092\u6307\u3057\u3066 STL \u3068\u547c\u3076\u3053\u3068\u3082\u3042\u308b\u3002 TLS | Thread Local Storage \u30b9\u30ec\u30c3\u30c9\u5c40\u6240\u8a18\u61b6 TMP | Template Meta Programming \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 TR | Technical Report \u5b9f\u9a13\u7684\u306a C++ \u306e\u6a5f\u80fd\u306b\u95a2\u3059\u308b\u5831\u544a\u66f8\u3001\u73fe\u5728\u306f TS \u306b\u79fb\u884c TS | Technical Specification \u5b9f\u9a13\u7684\u306a C++ \u306e\u6a5f\u80fd\u306b\u95a2\u3059\u308b\u4ed5\u69d8\u66f8 UB | Undefined Behavior \u672a\u5b9a\u7fa9\u52d5\u4f5c UDL | User-Defined Literals \u30e6\u30fc\u30b6\u5b9a\u7fa9\u30ea\u30c6\u30e9\u30eb WD | Working Draft \u898f\u683c\u306e\u4f5c\u696d\u539f\u6848 WG | Working Group \u4f5c\u696d\u30b0\u30eb\u30fc\u30d7 \u53c2\u8003\u6587\u732e Acronyms | cppreference.com https://en.cppreference.com/w/cpp/language/acronyms A C++ acronym glossary https://quuxplusone.github.io/blog/2019/08/02/the-tough-guide-to-cpp-acronyms/ C++ \u56fd\u969b\u6a19\u6e96\u898f\u683c | cpprefjp https://cpprefjp.github.io/international-standard.html Bjarne Stroustrup's C++ Glossary http://www.stroustrup.com/glossary.html#Gvirtual-function-table","title":"C++ \u95a2\u9023\u306e\u7565\u8a9e"},{"location":"articles/acronyms/#c","text":"","title":"C++ \u95a2\u9023\u306e\u7565\u8a9e"},{"location":"articles/acronyms/#abi-application-binary-interface","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30d0\u30a4\u30ca\u30ea\u30fb\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9","title":"ABI | Application Binary Interface"},{"location":"articles/acronyms/#accu-association-of-c-and-c-users","text":"C \u304a\u3088\u3073 C++ \u30e6\u30fc\u30b6\u5354\u4f1a\u3002 \u5e74\u6b21\u30ab\u30f3\u30d5\u30a1\u30ec\u30f3\u30b9 \u306e\u958b\u50ac\u3084\u300c Overload \u300d\u306e\u520a\u884c\u306a\u3069\u3092\u884c\u3046\u3002","title":"ACCU | Association of C and C++ Users"},{"location":"articles/acronyms/#adl-argument-dependent-lookup","text":"\u5b9f\u5f15\u6570\u4f9d\u5b58\u306e\u540d\u524d\u691c\u7d22","title":"ADL | Argument Dependent Lookup"},{"location":"articles/acronyms/#ansi-american-national-standards-institute","text":"\u7c73\u56fd\u56fd\u5bb6\u898f\u683c\u5354\u4f1a","title":"ANSI | American National Standards Institute"},{"location":"articles/acronyms/#api-application-programming-interface","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30fb\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9","title":"API | Application Programming Interface"},{"location":"articles/acronyms/#asan-addresssanitizer","text":"\u30e1\u30e2\u30ea\u95a2\u9023\u306e\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u52d5\u7684\u89e3\u6790\u30c4\u30fc\u30eb","title":"ASan | AddressSanitizer"},{"location":"articles/acronyms/#bcc-borland-c-compiler","text":"\u73fe\u5728\u306e Embarcadero C++ Builder \u306e\u524d\u8eab\u30022000 \u5e74\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f Borland C++ Compiler 5.5 \u306f\u3001\u5f53\u6642\u306f\u3081\u305a\u3089\u3057\u3044\u7121\u511f\u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u3057\u3066\u3001\u5e83\u304f\u4f7f\u308f\u308c\u305f\u3002","title":"BCC | Borland C++ Compiler"},{"location":"articles/acronyms/#bcpl-basic-combined-programming-language","text":"1966 \u5e74\u306b\u30de\u30fc\u30c6\u30a3\u30f3\u30fb\u30ea\u30c1\u30e3\u30fc\u30ba\u304c\u8a2d\u8a08\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3002C \u8a00\u8a9e\u3084 C++ \u306b\u5f71\u97ff\u3092\u4e0e\u3048\u305f\u3002","title":"BCPL | Basic Combined Programming Language"},{"location":"articles/acronyms/#bmi-binary-module-interface","text":"\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u30e2\u30b8\u30e5\u30fc\u30eb\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u751f\u6210\u3059\u308b\u4e2d\u9593\u30d5\u30a1\u30a4\u30eb\u3002GCC \u3067\u306f CMI (Compiled Module Interfaces) \u3068\u547c\u3076","title":"BMI | Binary Module Interface"},{"location":"articles/acronyms/#c-amp-c-accelerated-massive-parallelism","text":"\u30de\u30a4\u30af\u30ed\u30bd\u30d5\u30c8\u306a\u3069\u304c\u958b\u767a\u3092\u9032\u3081\u3066\u3044\u308b\u3001\u4e26\u5217\u8a08\u7b97\u306e\u305f\u3081\u306e\u8a00\u8a9e\u62e1\u5f35\u6a5f\u80fd\u3068\u30e9\u30a4\u30d6\u30e9\u30ea","title":"C++ AMP | C++ Accelerated Massive Parallelism"},{"location":"articles/acronyms/#cd-committee-draft","text":"\u898f\u683c\u306e\u59d4\u54e1\u4f1a\u539f\u6848","title":"CD | Committee Draft"},{"location":"articles/acronyms/#cow-copy-on-write","text":"\u30b3\u30d4\u30fc\u30aa\u30f3\u30e9\u30a4\u30c8\u3068\u547c\u3070\u308c\u308b\u6700\u9069\u5316\u30c6\u30af\u30cb\u30c3\u30af","title":"COW | Copy On Write"},{"location":"articles/acronyms/#cpp-c-preprocessor","text":"\u30de\u30af\u30ed\u3092\u51e6\u7406\u3059\u308b\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5","title":"CPP | C Preprocessor"},{"location":"articles/acronyms/#crtp-curiously-recurring-template-pattern","text":"\u5947\u5999\u306b\u518d\u5e30\u3057\u305f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30bf\u30fc\u30f3","title":"CRTP | Curiously Recurring Template Pattern"},{"location":"articles/acronyms/#ctad-class-template-argument-deduction","text":"\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u63a8\u8ad6","title":"CTAD | Class Template Argument Deduction"},{"location":"articles/acronyms/#cwg-core-working-group","text":"C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30ef\u30fc\u30ad\u30f3\u30b0\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064\u3002\u8a00\u8a9e\u6a5f\u80fd\u306b\u95a2\u3059\u308b\u898f\u683c\u6587\u9762\u3092\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u3002","title":"CWG | Core Working Group"},{"location":"articles/acronyms/#deque-double-ended-queue","text":"\u4e21\u7aef\u30ad\u30e5\u30fc","title":"deque | double-ended queue"},{"location":"articles/acronyms/#dis-draft-international-standard","text":"\u56fd\u969b\u898f\u683c\u6848","title":"DIS | Draft International Standard"},{"location":"articles/acronyms/#dr-defect-report","text":"\u898f\u683c\u306e\u6b20\u9665\u306e\u5831\u544a","title":"DR | Defect Report"},{"location":"articles/acronyms/#ebo-empty-base-optimization","text":"\u7a7a\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6700\u9069\u5316","title":"EBO | Empty Base Optimization"},{"location":"articles/acronyms/#edg-edison-design-group","text":"\u4f01\u696d\u540d\u3002C/C++ \u30b3\u30f3\u30d1\u30a4\u30e9\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3092\u958b\u767a\u3059\u308b\u3002 Edison Design Group","title":"EDG | Edison Design Group"},{"location":"articles/acronyms/#eof-end-of-file","text":"\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u7aef","title":"EOF | End-of-File"},{"location":"articles/acronyms/#ewg-evolution-working-group","text":"C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30ef\u30fc\u30ad\u30f3\u30b0\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064\u3002\u8a00\u8a9e\u6a5f\u80fd\u306e\u8a2d\u8a08\u3092\u3059\u308b\u3002","title":"EWG | Evolution Working Group"},{"location":"articles/acronyms/#ewgi-evolution-working-group-incubator","text":"C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30b9\u30bf\u30c7\u30a3\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064 (SG17). EWG \u306b\u5411\u3051\u305f\u63d0\u6848\u306e\u8a55\u4fa1\u3092\u3059\u308b\u3002","title":"EWGI | Evolution Working Group Incubator"},{"location":"articles/acronyms/#fcd-final-committee-draft","text":"\u898f\u683c\u306e\u6700\u7d42\u59d4\u54e1\u4f1a\u539f\u6848","title":"FCD | Final Committee Draft"},{"location":"articles/acronyms/#fdis-final-draft-international-standard","text":"\u6700\u7d42\u56fd\u969b\u898f\u683c\u6848","title":"FDIS | Final Draft International Standard"},{"location":"articles/acronyms/#gcc-gnu-compiler-collection-gnu-c-compiler","text":"GNU \u30b3\u30f3\u30d1\u30a4\u30e9\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3001\u307e\u305f\u306f\u305d\u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9","title":"GCC | GNU Compiler Collection / GNU C++ Compiler"},{"location":"articles/acronyms/#g-gnu-c-compiler","text":"GNU \u30b3\u30f3\u30d1\u30a4\u30e9\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9","title":"G++ | GNU C++ Compiler"},{"location":"articles/acronyms/#ice-internal-compiler-error","text":"\u30b3\u30f3\u30d1\u30a4\u30e9\u5185\u90e8\u30a8\u30e9\u30fc","title":"ICE | Internal Compiler Error"},{"location":"articles/acronyms/#ide-integrated-development-enviornment","text":"\u7d71\u5408\u958b\u767a\u74b0\u5883","title":"IDE | Integrated Development Enviornment"},{"location":"articles/acronyms/#iec-international-electronics-commission","text":"\u56fd\u969b\u96fb\u6c17\u6a19\u6e96\u4f1a\u8b70","title":"IEC | International Electronics Commission"},{"location":"articles/acronyms/#io-inputoutput","text":"\u5165\u51fa\u529b","title":"I/O | Input/Output"},{"location":"articles/acronyms/#is-international-standard","text":"\u56fd\u969b\u898f\u683c","title":"IS | International Standard"},{"location":"articles/acronyms/#iso-international-organization-for-standardization","text":"\u56fd\u969b\u6a19\u6e96\u5316\u6a5f\u69cb","title":"ISO | International Organization for Standardization"},{"location":"articles/acronyms/#kr-kernighan-and-ritchies","text":"\u30d6\u30e9\u30a4\u30a2\u30f3\u30fb\u30ab\u30fc\u30cb\u30cf\u30f3\u3068\u30c7\u30cb\u30b9\u30fb\u30ea\u30c3\u30c1\u30fc\u306b\u3088\u308b\u8457\u66f8\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e C\u300d\u306e\u4fd7\u79f0\u3002\u66f8\u4e2d\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u5b57\u4e0b\u3052\u30b9\u30bf\u30a4\u30eb\u304c\u300cK&R \u30b9\u30bf\u30a4\u30eb\u300d\u3068\u547c\u3070\u308c\u308b\u3002","title":"K&amp;R | Kernighan and Ritchie's"},{"location":"articles/acronyms/#lewg-library-evolution-working-group","text":"C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30ef\u30fc\u30ad\u30f3\u30b0\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064\u3002\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8a2d\u8a08\u3092\u3059\u308b\u3002","title":"LEWG | Library Evolution Working Group"},{"location":"articles/acronyms/#lewgi-library-evolution-working-group-incubator","text":"C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30b9\u30bf\u30c7\u30a3\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064 (SG18). LEWG \u306b\u5411\u3051\u305f\u63d0\u6848\u306e\u8a55\u4fa1\u3092\u3059\u308b\u3002","title":"LEWGI | Library Evolution Working Group Incubator"},{"location":"articles/acronyms/#lto-link-time-optimization","text":"\u30ea\u30f3\u30af\u6642\u6700\u9069\u5316","title":"LTO | Link Time Optimization"},{"location":"articles/acronyms/#lwg-library-working-group","text":"C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30ef\u30fc\u30ad\u30f3\u30b0\u30b0\u30eb\u30fc\u30d7\u306e 1 \u3064\u3002\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u95a2\u3059\u308b\u898f\u683c\u6587\u9762\u3092\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u3002","title":"LWG | Library Working Group"},{"location":"articles/acronyms/#msvc-microsoft-visual-c","text":"Microsoft Visual Studio \u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9","title":"MSVC | Microsoft Visual C++"},{"location":"articles/acronyms/#nan-not-a-number","text":"\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3067\u4f7f\u308f\u308c\u308b\u975e\u6570\u306e\u8868\u73fe","title":"NaN | Not a Number"},{"location":"articles/acronyms/#nb-national-body","text":"\u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u5404\u56fd\u652f\u90e8","title":"NB | National Body"},{"location":"articles/acronyms/#nrvo-named-return-value-optimization","text":"\u540d\u524d\u4ed8\u304d\u623b\u308a\u5024\u306e\u6700\u9069\u5316","title":"NRVO | Named Return Value Optimization"},{"location":"articles/acronyms/#nsdmi-non-static-data-member-initializers","text":"\u975e\u9759\u7684\u30e1\u30f3\u30d0\u306e\u521d\u671f\u5316","title":"NSDMI | Non-Static Data Member Initializers"},{"location":"articles/acronyms/#nttp-non-type-template-parameter","text":"\u975e\u578b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30fb\u30d1\u30e9\u30e1\u30fc\u30bf","title":"NTTP | Non-Type Template Parameter"},{"location":"articles/acronyms/#nvi-non-virtual-interface","text":"\u975e\u4eee\u60f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30c6\u30af\u30cb\u30c3\u30af","title":"NVI | Non-Virtual Interface"},{"location":"articles/acronyms/#odr-one-definition-rule","text":"C++ \u306e\u8a2d\u8a08\u30b3\u30f3\u30bb\u30d7\u30c8\u306e 1 \u3064\u3002\u3042\u3089\u3086\u308b\u578b\u3084\u95a2\u6570\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u8907\u6570\u306e\u5b9a\u7fa9\u3092\u6301\u3066\u306a\u3044\u3068\u3044\u3046\u30eb\u30fc\u30eb","title":"ODR | One Definition Rule"},{"location":"articles/acronyms/#ood-object-oriented-design","text":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u8a2d\u8a08","title":"OOD | Object Oriented Design"},{"location":"articles/acronyms/#oop-object-oriented-programming","text":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0","title":"OOP | Object Oriented Programming"},{"location":"articles/acronyms/#oopl-object-oriented-programing-language","text":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e","title":"OOPL | Object Oriented Programing Language"},{"location":"articles/acronyms/#pch-precompiled-header","text":"\u30d7\u30ea\u30b3\u30f3\u30d1\u30a4\u30eb\u6e08\u307f\u30d8\u30c3\u30c0","title":"PCH | Precompiled Header"},{"location":"articles/acronyms/#pgo-profile-guided-optimization","text":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u306b\u3088\u308b\u6700\u9069\u5316","title":"PGO | Profile-guided Optimization"},{"location":"articles/acronyms/#pimpl-pointer-to-implementation","text":"\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306e\u8a73\u7d30\u3092\u96a0\u3059\u3001C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30c6\u30af\u30cb\u30c3\u30af","title":"PImpl | Pointer to Implementation"},{"location":"articles/acronyms/#pod-plain-old-data","text":"C \u8a00\u8a9e\u3068\u4e92\u63db\u6027\u306e\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u6301\u3064\u578b","title":"POD | Plain Old Data"},{"location":"articles/acronyms/#raii-resource-allocation-is-initialization","text":"\u300c\u30ea\u30bd\u30fc\u30b9\u53d6\u5f97\u306f\u521d\u671f\u5316\u3067\u3042\u308b\u300d\u3068\u3044\u3046 C++ \u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30c6\u30af\u30cb\u30c3\u30af","title":"RAII | Resource Allocation Is Initialization"},{"location":"articles/acronyms/#rtti-run-time-type-information","text":"\u5b9f\u884c\u6642\u578b\u60c5\u5831","title":"RTTI | Run-Time Type Information"},{"location":"articles/acronyms/#rvo-return-value-optimization","text":"\u623b\u308a\u5024\u306e\u6700\u9069\u5316","title":"RVO | Return Value Optimization"},{"location":"articles/acronyms/#sbo-small-buffer-optimization","text":"\u5c0f\u3055\u3044\u52d5\u7684\u914d\u5217\u3067\u306e\u30e1\u30e2\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u907f\u3051\u308b C++ \u306e\u6700\u9069\u5316\u30c6\u30af\u30cb\u30c3\u30af","title":"SBO | Small Buffer Optimization"},{"location":"articles/acronyms/#seh-structured-exception-handling","text":"\u69cb\u9020\u5316\u4f8b\u5916\u51e6\u7406\u3002Windows \u3067\u4f7f\u308f\u308c\u308b\u72ec\u81ea\u306e\u4f8b\u5916\u51e6\u7406\u3002","title":"SEH | Structured Exception Handling"},{"location":"articles/acronyms/#sfinae-substitution-failure-is-not-an-error","text":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30c6\u30af\u30cb\u30c3\u30af\u306e 1 \u3064","title":"SFINAE | Substitution Failure Is Not An Error"},{"location":"articles/acronyms/#sg-study-group","text":"\u7279\u5b9a\u306e\u30c6\u30fc\u30de\u306b\u3064\u3044\u3066\u8b70\u8ad6\u3059\u308b\u3001C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u30b5\u30d6\u30b0\u30eb\u30fc\u30d7","title":"SG | Study Group"},{"location":"articles/acronyms/#soo-small-object-optimization","text":"\u5c0f\u3055\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3059\u308b\u30e1\u30e2\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u907f\u3051\u308b C++ \u306e\u6700\u9069\u5316\u30c6\u30af\u30cb\u30c3\u30af","title":"SOO | Small Object Optimization"},{"location":"articles/acronyms/#sso-small-string-optimization","text":"\u77ed\u3044\u6587\u5b57\u5217\u3067\u306e\u30e1\u30e2\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u907f\u3051\u308b C++ \u306e\u6700\u9069\u5316\u30c6\u30af\u30cb\u30c3\u30af","title":"SSO | Small String Optimization"},{"location":"articles/acronyms/#stl-standard-template-library","text":"\u30a2\u30ec\u30af\u30b5\u30f3\u30c0\u30fc\u30fb\u30b9\u30c6\u30d1\u30ce\u30d5\u3089\u306b\u3088\u3063\u3066\u8a2d\u8a08\u3055\u308c\u305f\u6a19\u6e96\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u306e\u3061\u306b C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u90e8\u3068\u306a\u3063\u305f\u3002\u73fe\u5728\u3067\u306f C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u5168\u822c\u3092\u6307\u3057\u3066 STL \u3068\u547c\u3076\u3053\u3068\u3082\u3042\u308b\u3002","title":"STL | Standard Template Library"},{"location":"articles/acronyms/#tls-thread-local-storage","text":"\u30b9\u30ec\u30c3\u30c9\u5c40\u6240\u8a18\u61b6","title":"TLS | Thread Local Storage"},{"location":"articles/acronyms/#tmp-template-meta-programming","text":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0","title":"TMP | Template Meta Programming"},{"location":"articles/acronyms/#tr-technical-report","text":"\u5b9f\u9a13\u7684\u306a C++ \u306e\u6a5f\u80fd\u306b\u95a2\u3059\u308b\u5831\u544a\u66f8\u3001\u73fe\u5728\u306f TS \u306b\u79fb\u884c","title":"TR | Technical Report"},{"location":"articles/acronyms/#ts-technical-specification","text":"\u5b9f\u9a13\u7684\u306a C++ \u306e\u6a5f\u80fd\u306b\u95a2\u3059\u308b\u4ed5\u69d8\u66f8","title":"TS | Technical Specification"},{"location":"articles/acronyms/#ub-undefined-behavior","text":"\u672a\u5b9a\u7fa9\u52d5\u4f5c","title":"UB | Undefined Behavior"},{"location":"articles/acronyms/#udl-user-defined-literals","text":"\u30e6\u30fc\u30b6\u5b9a\u7fa9\u30ea\u30c6\u30e9\u30eb","title":"UDL | User-Defined Literals"},{"location":"articles/acronyms/#wd-working-draft","text":"\u898f\u683c\u306e\u4f5c\u696d\u539f\u6848","title":"WD | Working Draft"},{"location":"articles/acronyms/#wg-working-group","text":"\u4f5c\u696d\u30b0\u30eb\u30fc\u30d7","title":"WG | Working Group"},{"location":"articles/acronyms/#_1","text":"Acronyms | cppreference.com https://en.cppreference.com/w/cpp/language/acronyms A C++ acronym glossary https://quuxplusone.github.io/blog/2019/08/02/the-tough-guide-to-cpp-acronyms/ C++ \u56fd\u969b\u6a19\u6e96\u898f\u683c | cpprefjp https://cpprefjp.github.io/international-standard.html Bjarne Stroustrup's C++ Glossary http://www.stroustrup.com/glossary.html#Gvirtual-function-table","title":"\u53c2\u8003\u6587\u732e"},{"location":"articles/comment-tricks/","text":"\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u30c8\u30ea\u30c3\u30af \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f7f\u3048\u308b\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u30c8\u30ea\u30c3\u30af\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u958b\u767a\u4e2d\u306e\u3061\u3087\u3063\u3068\u3057\u305f\u30c7\u30d0\u30c3\u30b0\u3084\u3001\u30df\u30b9\u306e\u9632\u6b62\u306b\u6d3b\u7528\u3067\u304d\u307e\u3059\u3002 \u7bc4\u56f2\u306e ON\u30fbOFF \u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u7bc4\u56f2\u30b3\u30e1\u30f3\u30c8\u306e\u6709\u52b9\u30fb\u7121\u52b9\u3092\u5207\u308a\u66ff\u3048\u307e\u3059\u3002 \u7121\u52b9 #include <iostream> int main () { /**/ int x ; std :: cin >> x ; std :: cout << x * x ; /**/ } \u6709\u52b9 #include <iostream> int main () { /** int x; std::cin >> x; std::cout << x * x; /**/ } \u5024\u306e\u5207\u308a\u66ff\u3048 \u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u5de6\u53f3\u3069\u3061\u3089\u304b\u306e\u5024\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u5de6 #include <iostream> int main () { constexpr int N = /**/ 100 /*/ 200 /**/ ; std :: cout << N << '\\n' ; } \u53f3 #include <iostream> int main () { constexpr int N = /** 100 /*/ 200 /**/ ; std :: cout << N << '\\n' ; } \u7bc4\u56f2\u306e\u5207\u308a\u66ff\u3048 \u5024\u306e\u5207\u308a\u66ff\u3048\u306e\u7bc4\u56f2\u7248\u3067\u3059\u3002 \u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u524d\u534a\u3001\u5f8c\u534a\u3069\u3061\u3089\u304b\u306e\u7bc4\u56f2\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u524d\u534a #include <iostream> int main () { /**/ int x ; std :: cin >> x ; std :: cout << x * x ; /*/ int x, y; std::cin >> x >> y; std::cout << x + y; /**/ } \u5f8c\u534a #include <iostream> int main () { /** int x; std::cin >> x; std::cout << x * x; /*/ int x , y ; std :: cin >> x >> y ; std :: cout << x + y ; /**/ } \u884c\u306e\u5165\u308c\u66ff\u3048\u306e\u9632\u6b62 \u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u6642\u306b\u3001\u30b3\u30d4\u30fc\uff06\u30da\u30fc\u30b9\u30c8\u3067\u884c\u306e\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u3066\u3057\u307e\u3046\u3053\u3068\u3092\u9632\u304e\u307e\u3059\u3002 \u57fa\u672c\u306e\u30b3\u30fc\u30c9 void First () {} void Second () {} int main () { First (); /* */ Second (); } \u5165\u308c\u66ff\u3048\u308b\u3068\u30a8\u30e9\u30fc void First () {} void Second () {} int main () { */ Second (); First (); /* }","title":"\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u30c8\u30ea\u30c3\u30af"},{"location":"articles/comment-tricks/#_1","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f7f\u3048\u308b\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u30c8\u30ea\u30c3\u30af\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u958b\u767a\u4e2d\u306e\u3061\u3087\u3063\u3068\u3057\u305f\u30c7\u30d0\u30c3\u30b0\u3084\u3001\u30df\u30b9\u306e\u9632\u6b62\u306b\u6d3b\u7528\u3067\u304d\u307e\u3059\u3002","title":"\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u30c8\u30ea\u30c3\u30af"},{"location":"articles/comment-tricks/#onoff","text":"\u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u7bc4\u56f2\u30b3\u30e1\u30f3\u30c8\u306e\u6709\u52b9\u30fb\u7121\u52b9\u3092\u5207\u308a\u66ff\u3048\u307e\u3059\u3002 \u7121\u52b9 #include <iostream> int main () { /**/ int x ; std :: cin >> x ; std :: cout << x * x ; /**/ } \u6709\u52b9 #include <iostream> int main () { /** int x; std::cin >> x; std::cout << x * x; /**/ }","title":"\u7bc4\u56f2\u306e ON\u30fbOFF"},{"location":"articles/comment-tricks/#_2","text":"\u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u5de6\u53f3\u3069\u3061\u3089\u304b\u306e\u5024\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u5de6 #include <iostream> int main () { constexpr int N = /**/ 100 /*/ 200 /**/ ; std :: cout << N << '\\n' ; } \u53f3 #include <iostream> int main () { constexpr int N = /** 100 /*/ 200 /**/ ; std :: cout << N << '\\n' ; }","title":"\u5024\u306e\u5207\u308a\u66ff\u3048"},{"location":"articles/comment-tricks/#_3","text":"\u5024\u306e\u5207\u308a\u66ff\u3048\u306e\u7bc4\u56f2\u7248\u3067\u3059\u3002 \u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u524d\u534a\u3001\u5f8c\u534a\u3069\u3061\u3089\u304b\u306e\u7bc4\u56f2\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u524d\u534a #include <iostream> int main () { /**/ int x ; std :: cin >> x ; std :: cout << x * x ; /*/ int x, y; std::cin >> x >> y; std::cout << x + y; /**/ } \u5f8c\u534a #include <iostream> int main () { /** int x; std::cin >> x; std::cout << x * x; /*/ int x , y ; std :: cin >> x >> y ; std :: cout << x + y ; /**/ }","title":"\u7bc4\u56f2\u306e\u5207\u308a\u66ff\u3048"},{"location":"articles/comment-tricks/#_4","text":"\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u6642\u306b\u3001\u30b3\u30d4\u30fc\uff06\u30da\u30fc\u30b9\u30c8\u3067\u884c\u306e\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u3066\u3057\u307e\u3046\u3053\u3068\u3092\u9632\u304e\u307e\u3059\u3002 \u57fa\u672c\u306e\u30b3\u30fc\u30c9 void First () {} void Second () {} int main () { First (); /* */ Second (); } \u5165\u308c\u66ff\u3048\u308b\u3068\u30a8\u30e9\u30fc void First () {} void Second () {} int main () { */ Second (); First (); /* }","title":"\u884c\u306e\u5165\u308c\u66ff\u3048\u306e\u9632\u6b62"},{"location":"articles/how-to-read-keywords/","text":"\u4e88\u7d04\u8a9e\u306e\u8aad\u307f\u65b9\u3068\u540d\u524d\u306e\u7531\u6765 C++ \u306e\u4e88\u7d04\u8a9e\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765\u3067\u3059\u3002 \u30ad\u30fc\u30ef\u30fc\u30c9 \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 alignas \u30a2\u30e9\u30a4\u30f3\u30a2\u30ba \uff5e\u3068\u3057\u3066\u914d\u7f6e\u3059\u308b alignof \u30a2\u30e9\u30a4\u30f3\u30aa\u30d6 \uff5e\u306e\u914d\u7f6e\u306e\u3055\u308c\u65b9 and \u30a2\u30f3\u30c9 && \u306e\u7f6e\u304d\u63db\u3048 and_eq \u30a2\u30f3\u30c9\u30fb\u30a4\u30b3\u30fc\u30eb &= \u306e\u7f6e\u304d\u63db\u3048 asm \u30a2\u30bb\u30e0/\u30a2\u30bb\u30f3\u30d6\u30ea \u30a2\u30bb\u30f3\u30d6\u30ea (assembly) \u306e\u7565 auto \u30aa\u30fc\u30c8 \u81ea\u52d5 bitand \u30d3\u30c3\u30c8\u30a2\u30f3\u30c9 & \u306e\u7f6e\u304d\u63db\u3048 bitor \u30d3\u30c3\u30c8\u30aa\u30a2 | \u306e\u7f6e\u304d\u63db\u3048 bool \u30d6\u30fc\u30eb/\u30d6\u30fc\u30ea\u30a2\u30f3 \u30d6\u30fc\u30ea\u30a2\u30f3 (boolean) \u306e\u7565 break \u30d6\u30ec\u30fc\u30af \u4e2d\u65ad case \u30b1\u30fc\u30b9 \u5834\u5408 catch \u30ad\u30e3\u30c3\u30c1 \u6355\u307e\u3048\u308b char \u30c1\u30e3\u30fc/\u30ad\u30e3\u30e9/\u30ad\u30e3\u30e9\u30af\u30bf\u30fc \u6587\u5b57 (character) \u306e\u7565 char8_t \u30c1\u30e3\u30fc 8 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 8 \u30c6\u30a3\u30fc UTF-8 \u6587\u5b57 (character) \u578b (type) \u306e\u7565 char16_t \u30c1\u30e3\u30fc 16 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 16 \u30c6\u30a3\u30fc UTF-16 \u6587\u5b57 (character) \u578b (type) \u306e\u7565 char32_t \u30c1\u30e3\u30fc 32 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 32 \u30c6\u30a3\u30fc UTF-32 \u6587\u5b57 (character) \u578b (type) \u306e\u7565 class \u30af\u30e9\u30b9 \u90e8\u985e compl \u30b3\u30f3\u30d7\u30eb/\u30b3\u30f3\u30d7\u30ea\u30e1\u30f3\u30c8 \u88dc\u6570 concept \u30b3\u30f3\u30bb\u30d7\u30c8 \u30b3\u30f3\u30bb\u30d7\u30c8\u3002\u8981\u4ef6\u306e\u96c6\u5408 const \u30b3\u30f3\u30b9\u30c8 \u5b9a\u6570 (constant) \u306e\u7565 consteval \u30b3\u30f3\u30b9\u30c8\u30a4\u30fc\u30d0\u30eb/\u30b3\u30f3\u30b9\u30c8\u30a8\u30d0\u30eb \u5b9a\u6570 (constant) \u8a55\u4fa1 (evaluation) constexpr \u30b3\u30f3\u30b9\u30c8\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3/\u30b3\u30f3\u30b9\u30c8\u30a8\u30af\u30b9\u30d1\u30fc \u5b9a\u6570 (constant) \u5f0f (expression) const_cast \u30b3\u30f3\u30b9\u30c8\u30fb\u30ad\u30e3\u30b9\u30c8 \u5b9a\u6570\u6027\u306e\u5909\u63db continue \u30b3\u30f3\u30c6\u30a3\u30cb\u30e5\u30fc \u30b9\u30ad\u30c3\u30d7\u3059\u308b co_await \u30b3\u30fb\u30a2\u30a6\u30a7\u30a4\u30c8 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u5f85\u3064 co_return \u30b3\u30fb\u30ea\u30bf\u30fc\u30f3 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u8fd4\u308b co_yield \u30b3\u30fb\u30a4\u30fc\u30eb\u30c9 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u8b72\u308b decltype \u30c7\u30af\u30eb\u30bf\u30a4\u30d7 \u5ba3\u8a00 (declaration)+ \u578b (type) default \u30c7\u30d5\u30a9\u30eb\u30c8 \u65e2\u5b9a delete \u30c7\u30ea\u30fc\u30c8 \u524a\u9664 do \u30c9\u30a5\u30fc \u3059\u308b double \u30c0\u30d6\u30eb \u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (double precision floating point number) dynamic_cast \u30c0\u30a4\u30ca\u30df\u30c3\u30af\u30fb\u30ad\u30e3\u30b9\u30c8 \u52d5\u7684\u306a\u578b\u306e\u5909\u63db else \u30a8\u30eb\u30b9 \u305d\u306e\u307b\u304b enum \u30a4\u30cb\u30e5\u30fc\u30e0/\u30a4\u30fc\u30ca\u30e0 \u5217\u6319\u5b50 (enumerator) \u306e\u7565 explicit \u30a8\u30af\u30b9\u30d7\u30ea\u30b7\u30c3\u30c8 \u660e\u793a\u7684\u306a export \u30a8\u30af\u30b9\u30dd\u30fc\u30c8 \u307b\u304b\u3078\u9001\u308a\u51fa\u3059 extern \u30a8\u30af\u30b9\u30bf\u30fc\u30f3 \u5916\u90e8\u3078 (external) \u306e\u7565 false \u30d5\u30a9\u30eb\u30b9/\u30d5\u30a9\u30fc\u30eb\u30b9 \u507d float \u30d5\u30ed\u30fc\u30c8 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (floating point number) for \u30d5\u30a9\u30fc/\u30d5\u30a9\u30a2 \uff5e\u306b\u5bfe\u3057\u3066 friend \u30d5\u30ec\u30f3\u30c9 \u53cb\u3060\u3061 goto \u30b4\u30fc\u30c8\u30a5\u30fc \uff5e\u3078\u884c\u304f if \u30a4\u30d5 \u3082\u3057 import \u30a4\u30f3\u30dd\u30fc\u30c8 \uff5e\u306b\u6301\u3061\u8fbc\u3080 inline \u30a4\u30f3\u30e9\u30a4\u30f3 \u30a4\u30f3\u30e9\u30a4\u30f3 int \u30a4\u30f3\u30c8 \u6574\u6570 (integer) \u306e\u7565 long \u30ed\u30f3\u30b0 \u9577\u3044 module \u30e2\u30b8\u30e5\u30fc\u30eb \u90e8\u54c1\u306e\u96c6\u307e\u308a mutable \u30df\u30e5\u30fc\u30bf\u30d6\u30eb \u5909\u66f4\u53ef\u80fd\u306a namespace \u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9 \u540d\u524d\u7a7a\u9593 new \u30cb\u30e5\u30fc \u65b0\u3057\u3044 noexcept \u30ce\u30fc\u30a8\u30af\u30bb\u30d7\u30c8 \u7121\u4f8b\u5916 (no exception) \u306e\u7565 not \u30ce\u30c3\u30c8 ! \u306e\u7f6e\u304d\u63db\u3048 not_eq \u30ce\u30c3\u30c8\u30fb\u30a4\u30b3\u30fc\u30eb != \u306e\u7f6e\u304d\u63db\u3048 nullptr \u30cc\u30eb\u30dd\u30a4\u30f3\u30bf/\u30cc\u30eb\u30d4\u30fc\u30c6\u30a3\u30fc\u30a2\u30fc\u30eb null \u3092\u8868\u3059\u30dd\u30a4\u30f3\u30bf operator \u30aa\u30da\u30ec\u30fc\u30bf\u30fc \u6f14\u7b97\u5b50 or \u30aa\u30a2 || \u306e\u7f6e\u304d\u63db\u3048 or_eq \u30aa\u30a2\u30fb\u30a4\u30b3\u30fc\u30eb ||= \u306e\u7f6e\u304d\u63db\u3048 private \u30d7\u30e9\u30a4\u30d9\u30fc\u30c8 \u79c1\u6709\u306e protected \u30d7\u30ed\u30c6\u30af\u30c6\u30c3\u30c9 \u4fdd\u8b77\u3055\u308c\u305f public \u30d1\u30d6\u30ea\u30c3\u30af \u516c\u958b\u3055\u308c\u305f register \u30ec\u30b8\u30b9\u30bf\u30fc (CPU \u306e) \u30ec\u30b8\u30b9\u30bf reinterpret_cast \u30ea\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30c3\u30c8\u30fb\u30ad\u30e3\u30b9\u30c8 \u518d\u89e3\u91c8\u3059\u308b\u5909\u63db requires \u30ea\u30af\u30ef\u30a4\u30a2\u30ba \u8981\u6c42\u3059\u308b return \u30ea\u30bf\u30fc\u30f3 \u8fd4\u3059 short \u30b7\u30e7\u30fc\u30c8 \u77ed\u3044 signed \u30b5\u30a4\u30f3\u30c9 \u7b26\u53f7\u4ed8\u304d sizeof \u30b5\u30a4\u30ba\u30aa\u30d6 \uff5e\u306e\u30b5\u30a4\u30ba static \u30b9\u30bf\u30c6\u30a3\u30c3\u30af \u9759\u7684\u306a static_assert \u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30fb\u30a2\u30b5\u30fc\u30c8 \u9759\u7684 (static) \u306a\u8868\u660e (assertion) static_cast \u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30fb\u30ad\u30e3\u30b9\u30c8 \u9759\u7684\u306b\u5909\u63db\u3059\u308b struct \u30b9\u30c8\u30e9\u30af\u30c8 \u69cb\u9020 switch \u30b9\u30a4\u30c3\u30c1 \u5206\u5c90 template \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u96db\u5f62 this \u30c7\u30a3\u30b9 \u3053\u306e thread_local \u30b9\u30ec\u30c3\u30c9\u30fb\u30ed\u30fc\u30ab\u30eb \u30b9\u30ec\u30c3\u30c9 + \u5c40\u6240\u7684\u306a throw \u30b9\u30ed\u30fc \u6295\u3052\u308b true \u30c8\u30a5\u30eb\u30fc \u771f try \u30c8\u30e9\u30a4 \u8a66\u884c\u3059\u308b typedef \u30bf\u30a4\u30d7\u30c7\u30d5 \u578b (type) \u5b9a\u7fa9 (definition) \u306e\u7565 typeid \u30bf\u30a4\u30d7\u30a2\u30a4\u30c7\u30a3\u30fc \u578b (type) \u8b58\u5225 (identification) typename \u30bf\u30a4\u30d7\u30cd\u30fc\u30e0 \u578b (type) \u306e\u540d\u524d (name) union \u30e6\u30cb\u30aa\u30f3 \u9023\u5408/\u5171\u7528 unsigned \u30a2\u30f3\u30b5\u30a4\u30f3\u30c9 \u7b26\u53f7\u306a\u3057 using \u30e6\u30fc\u30b8\u30f3\u30b0 \u4f7f\u3046 virtual \u30d0\u30fc\u30c1\u30e3\u30eb \u4eee\u60f3 void \u30f4\u30a9\u30a4\u30c9 \u7a7a\u306e volatile \u30dc\u30e9\u30bf\u30a4\u30eb \u63ee\u767a\u3059\u308b wchar_t \u30c0\u30d6\u30eb\u30c1\u30e3\u30fc\u30c6\u30a3\u30fc/\u30c0\u30d6\u30eb\u30ad\u30e3\u30e9\u30c6\u30a3\u30fc \u30ef\u30a4\u30c9\u306a char while \u30ef\u30a4\u30eb/\u30db\u30ef\u30a4\u30eb \uff5e\u306e\u9593 xor \u30a8\u30c3\u30af\u30b9\u30aa\u30a2 ^ \u306e\u7f6e\u304d\u63db\u3048 xor_eq \u30a8\u30c3\u30af\u30b9\u30aa\u30a2\u30fb\u30a4\u30b3\u30fc\u30eb ^= \u306e\u7f6e\u304d\u63db\u3048","title":"\u4e88\u7d04\u8a9e\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765"},{"location":"articles/how-to-read-keywords/#_1","text":"C++ \u306e\u4e88\u7d04\u8a9e\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765\u3067\u3059\u3002 \u30ad\u30fc\u30ef\u30fc\u30c9 \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 alignas \u30a2\u30e9\u30a4\u30f3\u30a2\u30ba \uff5e\u3068\u3057\u3066\u914d\u7f6e\u3059\u308b alignof \u30a2\u30e9\u30a4\u30f3\u30aa\u30d6 \uff5e\u306e\u914d\u7f6e\u306e\u3055\u308c\u65b9 and \u30a2\u30f3\u30c9 && \u306e\u7f6e\u304d\u63db\u3048 and_eq \u30a2\u30f3\u30c9\u30fb\u30a4\u30b3\u30fc\u30eb &= \u306e\u7f6e\u304d\u63db\u3048 asm \u30a2\u30bb\u30e0/\u30a2\u30bb\u30f3\u30d6\u30ea \u30a2\u30bb\u30f3\u30d6\u30ea (assembly) \u306e\u7565 auto \u30aa\u30fc\u30c8 \u81ea\u52d5 bitand \u30d3\u30c3\u30c8\u30a2\u30f3\u30c9 & \u306e\u7f6e\u304d\u63db\u3048 bitor \u30d3\u30c3\u30c8\u30aa\u30a2 | \u306e\u7f6e\u304d\u63db\u3048 bool \u30d6\u30fc\u30eb/\u30d6\u30fc\u30ea\u30a2\u30f3 \u30d6\u30fc\u30ea\u30a2\u30f3 (boolean) \u306e\u7565 break \u30d6\u30ec\u30fc\u30af \u4e2d\u65ad case \u30b1\u30fc\u30b9 \u5834\u5408 catch \u30ad\u30e3\u30c3\u30c1 \u6355\u307e\u3048\u308b char \u30c1\u30e3\u30fc/\u30ad\u30e3\u30e9/\u30ad\u30e3\u30e9\u30af\u30bf\u30fc \u6587\u5b57 (character) \u306e\u7565 char8_t \u30c1\u30e3\u30fc 8 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 8 \u30c6\u30a3\u30fc UTF-8 \u6587\u5b57 (character) \u578b (type) \u306e\u7565 char16_t \u30c1\u30e3\u30fc 16 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 16 \u30c6\u30a3\u30fc UTF-16 \u6587\u5b57 (character) \u578b (type) \u306e\u7565 char32_t \u30c1\u30e3\u30fc 32 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 32 \u30c6\u30a3\u30fc UTF-32 \u6587\u5b57 (character) \u578b (type) \u306e\u7565 class \u30af\u30e9\u30b9 \u90e8\u985e compl \u30b3\u30f3\u30d7\u30eb/\u30b3\u30f3\u30d7\u30ea\u30e1\u30f3\u30c8 \u88dc\u6570 concept \u30b3\u30f3\u30bb\u30d7\u30c8 \u30b3\u30f3\u30bb\u30d7\u30c8\u3002\u8981\u4ef6\u306e\u96c6\u5408 const \u30b3\u30f3\u30b9\u30c8 \u5b9a\u6570 (constant) \u306e\u7565 consteval \u30b3\u30f3\u30b9\u30c8\u30a4\u30fc\u30d0\u30eb/\u30b3\u30f3\u30b9\u30c8\u30a8\u30d0\u30eb \u5b9a\u6570 (constant) \u8a55\u4fa1 (evaluation) constexpr \u30b3\u30f3\u30b9\u30c8\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3/\u30b3\u30f3\u30b9\u30c8\u30a8\u30af\u30b9\u30d1\u30fc \u5b9a\u6570 (constant) \u5f0f (expression) const_cast \u30b3\u30f3\u30b9\u30c8\u30fb\u30ad\u30e3\u30b9\u30c8 \u5b9a\u6570\u6027\u306e\u5909\u63db continue \u30b3\u30f3\u30c6\u30a3\u30cb\u30e5\u30fc \u30b9\u30ad\u30c3\u30d7\u3059\u308b co_await \u30b3\u30fb\u30a2\u30a6\u30a7\u30a4\u30c8 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u5f85\u3064 co_return \u30b3\u30fb\u30ea\u30bf\u30fc\u30f3 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u8fd4\u308b co_yield \u30b3\u30fb\u30a4\u30fc\u30eb\u30c9 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u8b72\u308b decltype \u30c7\u30af\u30eb\u30bf\u30a4\u30d7 \u5ba3\u8a00 (declaration)+ \u578b (type) default \u30c7\u30d5\u30a9\u30eb\u30c8 \u65e2\u5b9a delete \u30c7\u30ea\u30fc\u30c8 \u524a\u9664 do \u30c9\u30a5\u30fc \u3059\u308b double \u30c0\u30d6\u30eb \u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (double precision floating point number) dynamic_cast \u30c0\u30a4\u30ca\u30df\u30c3\u30af\u30fb\u30ad\u30e3\u30b9\u30c8 \u52d5\u7684\u306a\u578b\u306e\u5909\u63db else \u30a8\u30eb\u30b9 \u305d\u306e\u307b\u304b enum \u30a4\u30cb\u30e5\u30fc\u30e0/\u30a4\u30fc\u30ca\u30e0 \u5217\u6319\u5b50 (enumerator) \u306e\u7565 explicit \u30a8\u30af\u30b9\u30d7\u30ea\u30b7\u30c3\u30c8 \u660e\u793a\u7684\u306a export \u30a8\u30af\u30b9\u30dd\u30fc\u30c8 \u307b\u304b\u3078\u9001\u308a\u51fa\u3059 extern \u30a8\u30af\u30b9\u30bf\u30fc\u30f3 \u5916\u90e8\u3078 (external) \u306e\u7565 false \u30d5\u30a9\u30eb\u30b9/\u30d5\u30a9\u30fc\u30eb\u30b9 \u507d float \u30d5\u30ed\u30fc\u30c8 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (floating point number) for \u30d5\u30a9\u30fc/\u30d5\u30a9\u30a2 \uff5e\u306b\u5bfe\u3057\u3066 friend \u30d5\u30ec\u30f3\u30c9 \u53cb\u3060\u3061 goto \u30b4\u30fc\u30c8\u30a5\u30fc \uff5e\u3078\u884c\u304f if \u30a4\u30d5 \u3082\u3057 import \u30a4\u30f3\u30dd\u30fc\u30c8 \uff5e\u306b\u6301\u3061\u8fbc\u3080 inline \u30a4\u30f3\u30e9\u30a4\u30f3 \u30a4\u30f3\u30e9\u30a4\u30f3 int \u30a4\u30f3\u30c8 \u6574\u6570 (integer) \u306e\u7565 long \u30ed\u30f3\u30b0 \u9577\u3044 module \u30e2\u30b8\u30e5\u30fc\u30eb \u90e8\u54c1\u306e\u96c6\u307e\u308a mutable \u30df\u30e5\u30fc\u30bf\u30d6\u30eb \u5909\u66f4\u53ef\u80fd\u306a namespace \u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9 \u540d\u524d\u7a7a\u9593 new \u30cb\u30e5\u30fc \u65b0\u3057\u3044 noexcept \u30ce\u30fc\u30a8\u30af\u30bb\u30d7\u30c8 \u7121\u4f8b\u5916 (no exception) \u306e\u7565 not \u30ce\u30c3\u30c8 ! \u306e\u7f6e\u304d\u63db\u3048 not_eq \u30ce\u30c3\u30c8\u30fb\u30a4\u30b3\u30fc\u30eb != \u306e\u7f6e\u304d\u63db\u3048 nullptr \u30cc\u30eb\u30dd\u30a4\u30f3\u30bf/\u30cc\u30eb\u30d4\u30fc\u30c6\u30a3\u30fc\u30a2\u30fc\u30eb null \u3092\u8868\u3059\u30dd\u30a4\u30f3\u30bf operator \u30aa\u30da\u30ec\u30fc\u30bf\u30fc \u6f14\u7b97\u5b50 or \u30aa\u30a2 || \u306e\u7f6e\u304d\u63db\u3048 or_eq \u30aa\u30a2\u30fb\u30a4\u30b3\u30fc\u30eb ||= \u306e\u7f6e\u304d\u63db\u3048 private \u30d7\u30e9\u30a4\u30d9\u30fc\u30c8 \u79c1\u6709\u306e protected \u30d7\u30ed\u30c6\u30af\u30c6\u30c3\u30c9 \u4fdd\u8b77\u3055\u308c\u305f public \u30d1\u30d6\u30ea\u30c3\u30af \u516c\u958b\u3055\u308c\u305f register \u30ec\u30b8\u30b9\u30bf\u30fc (CPU \u306e) \u30ec\u30b8\u30b9\u30bf reinterpret_cast \u30ea\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30c3\u30c8\u30fb\u30ad\u30e3\u30b9\u30c8 \u518d\u89e3\u91c8\u3059\u308b\u5909\u63db requires \u30ea\u30af\u30ef\u30a4\u30a2\u30ba \u8981\u6c42\u3059\u308b return \u30ea\u30bf\u30fc\u30f3 \u8fd4\u3059 short \u30b7\u30e7\u30fc\u30c8 \u77ed\u3044 signed \u30b5\u30a4\u30f3\u30c9 \u7b26\u53f7\u4ed8\u304d sizeof \u30b5\u30a4\u30ba\u30aa\u30d6 \uff5e\u306e\u30b5\u30a4\u30ba static \u30b9\u30bf\u30c6\u30a3\u30c3\u30af \u9759\u7684\u306a static_assert \u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30fb\u30a2\u30b5\u30fc\u30c8 \u9759\u7684 (static) \u306a\u8868\u660e (assertion) static_cast \u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30fb\u30ad\u30e3\u30b9\u30c8 \u9759\u7684\u306b\u5909\u63db\u3059\u308b struct \u30b9\u30c8\u30e9\u30af\u30c8 \u69cb\u9020 switch \u30b9\u30a4\u30c3\u30c1 \u5206\u5c90 template \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u96db\u5f62 this \u30c7\u30a3\u30b9 \u3053\u306e thread_local \u30b9\u30ec\u30c3\u30c9\u30fb\u30ed\u30fc\u30ab\u30eb \u30b9\u30ec\u30c3\u30c9 + \u5c40\u6240\u7684\u306a throw \u30b9\u30ed\u30fc \u6295\u3052\u308b true \u30c8\u30a5\u30eb\u30fc \u771f try \u30c8\u30e9\u30a4 \u8a66\u884c\u3059\u308b typedef \u30bf\u30a4\u30d7\u30c7\u30d5 \u578b (type) \u5b9a\u7fa9 (definition) \u306e\u7565 typeid \u30bf\u30a4\u30d7\u30a2\u30a4\u30c7\u30a3\u30fc \u578b (type) \u8b58\u5225 (identification) typename \u30bf\u30a4\u30d7\u30cd\u30fc\u30e0 \u578b (type) \u306e\u540d\u524d (name) union \u30e6\u30cb\u30aa\u30f3 \u9023\u5408/\u5171\u7528 unsigned \u30a2\u30f3\u30b5\u30a4\u30f3\u30c9 \u7b26\u53f7\u306a\u3057 using \u30e6\u30fc\u30b8\u30f3\u30b0 \u4f7f\u3046 virtual \u30d0\u30fc\u30c1\u30e3\u30eb \u4eee\u60f3 void \u30f4\u30a9\u30a4\u30c9 \u7a7a\u306e volatile \u30dc\u30e9\u30bf\u30a4\u30eb \u63ee\u767a\u3059\u308b wchar_t \u30c0\u30d6\u30eb\u30c1\u30e3\u30fc\u30c6\u30a3\u30fc/\u30c0\u30d6\u30eb\u30ad\u30e3\u30e9\u30c6\u30a3\u30fc \u30ef\u30a4\u30c9\u306a char while \u30ef\u30a4\u30eb/\u30db\u30ef\u30a4\u30eb \uff5e\u306e\u9593 xor \u30a8\u30c3\u30af\u30b9\u30aa\u30a2 ^ \u306e\u7f6e\u304d\u63db\u3048 xor_eq \u30a8\u30c3\u30af\u30b9\u30aa\u30a2\u30fb\u30a4\u30b3\u30fc\u30eb ^= \u306e\u7f6e\u304d\u63db\u3048","title":"\u4e88\u7d04\u8a9e\u306e\u8aad\u307f\u65b9\u3068\u540d\u524d\u306e\u7531\u6765"},{"location":"articles/how-to-read-libraries/","text":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765 C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u30e9\u30a4\u30d6\u30e9\u30ea\u540d \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 algorithm \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 any \u30a8\u30cb\u30fc \u306a\u3093\u3067\u3082 array \u30a2\u30ec\u30a4 \u914d\u5217 atomic \u30a2\u30c8\u30df\u30c3\u30af \u4e0d\u53ef\u5206\u6027 bit \u30d3\u30c3\u30c8 \u30d3\u30c3\u30c8\u6f14\u7b97 bitset \u30d3\u30c3\u30c8\u30bb\u30c3\u30c8 \u30d3\u30c3\u30c8\u96c6\u5408 charconv \u30c1\u30e3\u30fc\u30b3\u30f3\u30d6/\u30ad\u30e3\u30e9\u30b3\u30f3\u30d6 \u6587\u5b57\u306e\u5909\u63db (character conversion) \u306e\u7565 chrono \u30af\u30ed\u30ce \u6642\u9593 (\u30ae\u30ea\u30b7\u30e3\u8a9e\u306e Chronus \u306b\u7531\u6765) codecvt \u30b3\u30fc\u30c9\u30b3\u30f3\u30d0\u30fc\u30c8/\u30b3\u30fc\u30c9\u30b7\u30fc\u30d6\u30a4\u30c6\u30a3\u30fc \u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db compare \u30b3\u30f3\u30da\u30a2 \u6bd4\u8f03 complex \u30b3\u30f3\u30d7\u30ec\u30c3\u30af\u30b9 \u8907\u7d20\u6570 concepts \u30b3\u30f3\u30bb\u30d7\u30c4 \u30b3\u30f3\u30bb\u30d7\u30c8 condition_variable \u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u30fb\u30f4\u30a1\u30ea\u30a2\u30d6\u30eb \u6761\u4ef6\u5909\u6570 contract \u30b3\u30f3\u30c8\u30e9\u30af\u30c8 \u5951\u7d04 coroutine \u30b3\u30eb\u30fc\u30c1\u30f3 \u30b3\u30eb\u30fc\u30c1\u30f3 deque \u30c7\u30c3\u30af/\u30c7\u30ad\u30e5\u30fc \u4e21\u7aef\u30ad\u30e5\u30fc (double ended queue) \u306e\u7565 exception \u30a8\u30af\u30bb\u30d7\u30b7\u30e7\u30f3 \u4f8b\u5916 execution \u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30b7\u30e7\u30f3 \u5b9f\u884c filesystem \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0 \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0 forward_list \u30d5\u30a9\u30ef\u30fc\u30c9\u30fb\u30ea\u30b9\u30c8 \u5358\u65b9\u5411\u30ea\u30b9\u30c8 fstream \u30a8\u30d5\u30b9\u30c8\u30ea\u30fc\u30e0 \u30d5\u30a1\u30a4\u30eb\u7528\u30b9\u30c8\u30ea\u30fc\u30e0 functional \u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb \u95a2\u6570\u306e future \u30d5\u30e5\u30fc\u30c1\u30e3\u30fc \u672a\u6765 initializer_list \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u30fc\u30fb\u30ea\u30b9\u30c8 \u521d\u671f\u5316\u30ea\u30b9\u30c8 iomanip \u30a2\u30a4\u30aa\u30fc\u30de\u30cb\u30d4\u30e5 \u5165\u51fa\u529b\u306e\u64cd\u4f5c (manipulator) ios \u30a2\u30a4\u30aa\u30fc\u30a8\u30b9 \u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 iosfwd \u30a2\u30a4\u30aa\u30fc\u30a8\u30b9\u30d5\u30a9\u30ef\u30fc\u30c9 \u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u524d\u65b9\u5ba3\u8a00 iostream \u30a2\u30a4\u30aa\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0 \u6a19\u6e96\u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 istream \u30a2\u30a4\u30b9\u30c8\u30ea\u30fc\u30e0 \u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 iterator \u30a4\u30c6\u30ec\u30fc\u30bf\u30fc \u53cd\u5fa9\u5b50 limits \u30ea\u30df\u30c3\u30c4 \u4e0a\u9650\u4e0b\u9650 list \u30ea\u30b9\u30c8 \u30ea\u30b9\u30c8 locale \u30ed\u30b1\u30fc\u30eb \u5730\u57df map \u30de\u30c3\u30d7 \u30de\u30c3\u30d7 memory \u30e1\u30e2\u30ea\u30fc \u30e1\u30e2\u30ea\u30fc memory_resource \u30e1\u30e2\u30ea\u30fc\u30fb\u30ea\u30bd\u30fc\u30b9 \u30e1\u30e2\u30ea\u30fc\u30ea\u30bd\u30fc\u30b9 mutex \u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9 \u6392\u4ed6\u5236\u5fa1 (mutual exclusion) \u306e\u7565 new \u30cb\u30e5\u30fc \u65b0\u3057\u3044 numeric \u30cb\u30e5\u30fc\u30e1\u30ea\u30c3\u30af \u6570\u5024\u7684\u306a optional \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb \u9078\u629e\u3067\u304d\u308b ostream \u30aa\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0 \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 queue \u30ad\u30e5\u30fc \u30ad\u30e5\u30fc random \u30e9\u30f3\u30c0\u30e0 \u4e71\u6570 ranges \u30ec\u30f3\u30b8 \u7bc4\u56f2 ratio \u30ec\u30b7\u30aa \u6709\u7406\u6570 regex \u30ec\u30b8\u30a7\u30c3\u30af\u30b9 \u6b63\u898f\u8868\u73fe (regular expression) \u306e\u7565 scoped_allocator \u30b9\u30b3\u30fc\u30d7\u30c9\u30fb\u30a2\u30ed\u30b1\u30fc\u30bf\u30fc \u7bc4\u56f2\u3092\u6c7a\u3081\u305f\u30a2\u30ed\u30b1\u30fc\u30bf set \u30bb\u30c3\u30c8 \u96c6\u5408 shared_mutex \u30b7\u30a7\u30a2\u30fc\u30c9\u30fb\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9 \u5171\u6709\u7684\u306a mutex span \u30b9\u30d1\u30f3 \u7bc4\u56f2 sstream \u30a8\u30b9\u30b9\u30c8\u30ea\u30fc\u30e0 \u6587\u5b57\u5217\u306e\u30b9\u30c8\u30ea\u30fc\u30e0 stack \u30b9\u30bf\u30c3\u30af \u30b9\u30bf\u30c3\u30af stdexcept \u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a8\u30af\u30bb\u30d7\u30c8/\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a8\u30af\u30bb\u30d7\u30c8 \u6a19\u6e96\u7684\u306a\u4f8b\u5916 streambuf \u30b9\u30c8\u30ea\u30fc\u30e0\u30d0\u30d5/\u30b9\u30c8\u30ea\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1 \u30b9\u30c8\u30ea\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30fc string \u30b9\u30c8\u30ea\u30f3\u30b0 \u6587\u5b57\u5217 string_view \u30b9\u30c8\u30ea\u30f3\u30b0\u30d3\u30e5\u30fc \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc strstream \u30a8\u30b9\u30c6\u30a3\u30fc\u30a2\u30fc\u30eb\u30b9\u30c8\u30ea\u30fc\u30e0/\u30b9\u30c8\u30e9\u30b9\u30c8\u30ea\u30fc\u30e0 \u6587\u5b57\u5217\u306e\u30b9\u30c8\u30ea\u30fc\u30e0 syncstream \u30b7\u30f3\u30af\u30b9\u30c8\u30ea\u30fc\u30e0 \u540c\u671f\u7684\u306a\u30b9\u30c8\u30ea\u30fc\u30e0 system_error \u30b7\u30b9\u30c6\u30e0\u30fb\u30a8\u30e9\u30fc \u30b7\u30b9\u30c6\u30e0\u30a8\u30e9\u30fc thread \u30b9\u30ec\u30c3\u30c9 \u30b9\u30ec\u30c3\u30c9 tuple \u30bf\u30d7\u30eb \u5024\u306e\u7d44 typeindex \u30bf\u30a4\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 \u30bf\u30a4\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 typeinfo \u30bf\u30a4\u30d7\u30a4\u30f3\u30d5\u30a9 \u578b\u306e\u60c5\u5831 type_traits \u30bf\u30a4\u30d7\u30fb\u30c8\u30ec\u30a4\u30c4 \u578b\u306e\u7279\u5fb4 unordered_map \u30a2\u30f3\u30aa\u30fc\u30c0\u30fc\u30c9\u30fb\u30de\u30c3\u30d7 \u975e\u9806\u5e8f\u306a map unordered_set \u30a2\u30f3\u30aa\u30fc\u30c0\u30fc\u30c9\u30fb\u30bb\u30c3\u30c8 \u975e\u9806\u5e8f\u306a set utility \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc \u4fbf\u5229\u6a5f\u80fd valarray \u30f4\u30a1\u30eb\u30a2\u30ec\u30a4 \u5024\u306e\u914d\u5217 variant \u30f4\u30a1\u30ea\u30a2\u30f3\u30c8 \u76f8\u9055\u3057\u305f vector \u30d9\u30af\u30bf\u30fc \u30d9\u30af\u30c8\u30eb version \u30d0\u30fc\u30b8\u30e7\u30f3 \u30d0\u30fc\u30b8\u30e7\u30f3 C \u8a00\u8a9e\u7531\u6765\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea < \uff5e . h > \u5f62\u5f0f\u306e C \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u591a\u304f\u304c\u3001 < c \uff5e > \u3068\u3044\u3046\u540d\u524d\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u540d \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 cassert \u30b7\u30fc\u30a2\u30b5\u30fc\u30c8 \u8868\u660e cctype \u30b7\u30fc\u30b7\u30fc\u30bf\u30a4\u30d7 \u6587\u5b57\u306e\u5206\u985e cerrno \u30b7\u30fc\u30a8\u30e9\u30fc\u30ca\u30f3\u30d0\u30fc \u30a8\u30e9\u30fc\u30ca\u30f3\u30d0\u30fc (error number) \u306e\u7565 cfenv \u30b7\u30fc\u30a8\u30d5\u30a8\u30f3\u30d6 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u74b0\u5883\u8a2d\u5b9a (float environment) \u306e\u7565 cfloat \u30b7\u30fc\u30d5\u30ed\u30fc\u30c8 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 cinttypes \u30b7\u30fc\u30a4\u30f3\u30c8\u30bf\u30a4\u30d7\u30b9 \u6574\u6570\u578b climits \u30b7\u30fc\u30ea\u30df\u30c3\u30c4 \u4e0a\u9650\u4e0b\u9650 clocale \u30b7\u30fc\u30ed\u30b1\u30fc\u30eb \u5730\u57df cmath \u30b7\u30fc\u30de\u30b9 \u6570\u5b66\u95a2\u6570 csetjmp \u30b7\u30fc\u30bb\u30c3\u30c8\u30b8\u30e3\u30f3\u30d7 \u30bb\u30c3\u30c8\u30b8\u30e3\u30f3\u30d7\u547d\u4ee4 csignal \u30b7\u30fc\u30b7\u30b0\u30ca\u30eb \u30b7\u30b0\u30ca\u30eb cstdarg \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a2\u30fc\u30b0/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a2\u30fc\u30b0 \u5f15\u6570 cstddef \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30c7\u30d5/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30c7\u30d5 \u57fa\u672c\u7684\u306a\u5b9a\u7fa9 cstdint \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a4\u30f3\u30c8/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a4\u30f3\u30c8 \u57fa\u672c\u7684\u306a\u6574\u6570 cstdio \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a2\u30a4\u30aa\u30fc/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a2\u30a4\u30aa\u30fc \u57fa\u672c\u7684\u306a\u5165\u51fa\u529b cstdlib \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30ea\u30d6/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30ea\u30d6 \u57fa\u672c\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea cstring \u30b7\u30fc\u30b9\u30c8\u30ea\u30f3\u30b0 \u6587\u5b57\u5217 ctime \u30b7\u30fc\u30bf\u30a4\u30e0 \u6642\u9593 cuchar \u30b7\u30fc\u30e6\u30fc\u30c1\u30e3\u30fc Unicode \u6587\u5b57 cwchar \u30b7\u30fc\u30c0\u30d6\u30eb\u30c1\u30e3\u30fc \u30ef\u30a4\u30c9\u6587\u5b57 cwctype \u30b7\u30fc\u30c0\u30d6\u30eb\u30bf\u30a4\u30d7 \u30ef\u30a4\u30c9\u6587\u5b57\u306e\u5206\u985e","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765"},{"location":"articles/how-to-read-libraries/#_1","text":"","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765"},{"location":"articles/how-to-read-libraries/#c","text":"\u30e9\u30a4\u30d6\u30e9\u30ea\u540d \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 algorithm \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 any \u30a8\u30cb\u30fc \u306a\u3093\u3067\u3082 array \u30a2\u30ec\u30a4 \u914d\u5217 atomic \u30a2\u30c8\u30df\u30c3\u30af \u4e0d\u53ef\u5206\u6027 bit \u30d3\u30c3\u30c8 \u30d3\u30c3\u30c8\u6f14\u7b97 bitset \u30d3\u30c3\u30c8\u30bb\u30c3\u30c8 \u30d3\u30c3\u30c8\u96c6\u5408 charconv \u30c1\u30e3\u30fc\u30b3\u30f3\u30d6/\u30ad\u30e3\u30e9\u30b3\u30f3\u30d6 \u6587\u5b57\u306e\u5909\u63db (character conversion) \u306e\u7565 chrono \u30af\u30ed\u30ce \u6642\u9593 (\u30ae\u30ea\u30b7\u30e3\u8a9e\u306e Chronus \u306b\u7531\u6765) codecvt \u30b3\u30fc\u30c9\u30b3\u30f3\u30d0\u30fc\u30c8/\u30b3\u30fc\u30c9\u30b7\u30fc\u30d6\u30a4\u30c6\u30a3\u30fc \u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db compare \u30b3\u30f3\u30da\u30a2 \u6bd4\u8f03 complex \u30b3\u30f3\u30d7\u30ec\u30c3\u30af\u30b9 \u8907\u7d20\u6570 concepts \u30b3\u30f3\u30bb\u30d7\u30c4 \u30b3\u30f3\u30bb\u30d7\u30c8 condition_variable \u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u30fb\u30f4\u30a1\u30ea\u30a2\u30d6\u30eb \u6761\u4ef6\u5909\u6570 contract \u30b3\u30f3\u30c8\u30e9\u30af\u30c8 \u5951\u7d04 coroutine \u30b3\u30eb\u30fc\u30c1\u30f3 \u30b3\u30eb\u30fc\u30c1\u30f3 deque \u30c7\u30c3\u30af/\u30c7\u30ad\u30e5\u30fc \u4e21\u7aef\u30ad\u30e5\u30fc (double ended queue) \u306e\u7565 exception \u30a8\u30af\u30bb\u30d7\u30b7\u30e7\u30f3 \u4f8b\u5916 execution \u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30b7\u30e7\u30f3 \u5b9f\u884c filesystem \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0 \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0 forward_list \u30d5\u30a9\u30ef\u30fc\u30c9\u30fb\u30ea\u30b9\u30c8 \u5358\u65b9\u5411\u30ea\u30b9\u30c8 fstream \u30a8\u30d5\u30b9\u30c8\u30ea\u30fc\u30e0 \u30d5\u30a1\u30a4\u30eb\u7528\u30b9\u30c8\u30ea\u30fc\u30e0 functional \u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb \u95a2\u6570\u306e future \u30d5\u30e5\u30fc\u30c1\u30e3\u30fc \u672a\u6765 initializer_list \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u30fc\u30fb\u30ea\u30b9\u30c8 \u521d\u671f\u5316\u30ea\u30b9\u30c8 iomanip \u30a2\u30a4\u30aa\u30fc\u30de\u30cb\u30d4\u30e5 \u5165\u51fa\u529b\u306e\u64cd\u4f5c (manipulator) ios \u30a2\u30a4\u30aa\u30fc\u30a8\u30b9 \u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 iosfwd \u30a2\u30a4\u30aa\u30fc\u30a8\u30b9\u30d5\u30a9\u30ef\u30fc\u30c9 \u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u524d\u65b9\u5ba3\u8a00 iostream \u30a2\u30a4\u30aa\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0 \u6a19\u6e96\u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 istream \u30a2\u30a4\u30b9\u30c8\u30ea\u30fc\u30e0 \u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 iterator \u30a4\u30c6\u30ec\u30fc\u30bf\u30fc \u53cd\u5fa9\u5b50 limits \u30ea\u30df\u30c3\u30c4 \u4e0a\u9650\u4e0b\u9650 list \u30ea\u30b9\u30c8 \u30ea\u30b9\u30c8 locale \u30ed\u30b1\u30fc\u30eb \u5730\u57df map \u30de\u30c3\u30d7 \u30de\u30c3\u30d7 memory \u30e1\u30e2\u30ea\u30fc \u30e1\u30e2\u30ea\u30fc memory_resource \u30e1\u30e2\u30ea\u30fc\u30fb\u30ea\u30bd\u30fc\u30b9 \u30e1\u30e2\u30ea\u30fc\u30ea\u30bd\u30fc\u30b9 mutex \u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9 \u6392\u4ed6\u5236\u5fa1 (mutual exclusion) \u306e\u7565 new \u30cb\u30e5\u30fc \u65b0\u3057\u3044 numeric \u30cb\u30e5\u30fc\u30e1\u30ea\u30c3\u30af \u6570\u5024\u7684\u306a optional \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb \u9078\u629e\u3067\u304d\u308b ostream \u30aa\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0 \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 queue \u30ad\u30e5\u30fc \u30ad\u30e5\u30fc random \u30e9\u30f3\u30c0\u30e0 \u4e71\u6570 ranges \u30ec\u30f3\u30b8 \u7bc4\u56f2 ratio \u30ec\u30b7\u30aa \u6709\u7406\u6570 regex \u30ec\u30b8\u30a7\u30c3\u30af\u30b9 \u6b63\u898f\u8868\u73fe (regular expression) \u306e\u7565 scoped_allocator \u30b9\u30b3\u30fc\u30d7\u30c9\u30fb\u30a2\u30ed\u30b1\u30fc\u30bf\u30fc \u7bc4\u56f2\u3092\u6c7a\u3081\u305f\u30a2\u30ed\u30b1\u30fc\u30bf set \u30bb\u30c3\u30c8 \u96c6\u5408 shared_mutex \u30b7\u30a7\u30a2\u30fc\u30c9\u30fb\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9 \u5171\u6709\u7684\u306a mutex span \u30b9\u30d1\u30f3 \u7bc4\u56f2 sstream \u30a8\u30b9\u30b9\u30c8\u30ea\u30fc\u30e0 \u6587\u5b57\u5217\u306e\u30b9\u30c8\u30ea\u30fc\u30e0 stack \u30b9\u30bf\u30c3\u30af \u30b9\u30bf\u30c3\u30af stdexcept \u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a8\u30af\u30bb\u30d7\u30c8/\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a8\u30af\u30bb\u30d7\u30c8 \u6a19\u6e96\u7684\u306a\u4f8b\u5916 streambuf \u30b9\u30c8\u30ea\u30fc\u30e0\u30d0\u30d5/\u30b9\u30c8\u30ea\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1 \u30b9\u30c8\u30ea\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30fc string \u30b9\u30c8\u30ea\u30f3\u30b0 \u6587\u5b57\u5217 string_view \u30b9\u30c8\u30ea\u30f3\u30b0\u30d3\u30e5\u30fc \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc strstream \u30a8\u30b9\u30c6\u30a3\u30fc\u30a2\u30fc\u30eb\u30b9\u30c8\u30ea\u30fc\u30e0/\u30b9\u30c8\u30e9\u30b9\u30c8\u30ea\u30fc\u30e0 \u6587\u5b57\u5217\u306e\u30b9\u30c8\u30ea\u30fc\u30e0 syncstream \u30b7\u30f3\u30af\u30b9\u30c8\u30ea\u30fc\u30e0 \u540c\u671f\u7684\u306a\u30b9\u30c8\u30ea\u30fc\u30e0 system_error \u30b7\u30b9\u30c6\u30e0\u30fb\u30a8\u30e9\u30fc \u30b7\u30b9\u30c6\u30e0\u30a8\u30e9\u30fc thread \u30b9\u30ec\u30c3\u30c9 \u30b9\u30ec\u30c3\u30c9 tuple \u30bf\u30d7\u30eb \u5024\u306e\u7d44 typeindex \u30bf\u30a4\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 \u30bf\u30a4\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 typeinfo \u30bf\u30a4\u30d7\u30a4\u30f3\u30d5\u30a9 \u578b\u306e\u60c5\u5831 type_traits \u30bf\u30a4\u30d7\u30fb\u30c8\u30ec\u30a4\u30c4 \u578b\u306e\u7279\u5fb4 unordered_map \u30a2\u30f3\u30aa\u30fc\u30c0\u30fc\u30c9\u30fb\u30de\u30c3\u30d7 \u975e\u9806\u5e8f\u306a map unordered_set \u30a2\u30f3\u30aa\u30fc\u30c0\u30fc\u30c9\u30fb\u30bb\u30c3\u30c8 \u975e\u9806\u5e8f\u306a set utility \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc \u4fbf\u5229\u6a5f\u80fd valarray \u30f4\u30a1\u30eb\u30a2\u30ec\u30a4 \u5024\u306e\u914d\u5217 variant \u30f4\u30a1\u30ea\u30a2\u30f3\u30c8 \u76f8\u9055\u3057\u305f vector \u30d9\u30af\u30bf\u30fc \u30d9\u30af\u30c8\u30eb version \u30d0\u30fc\u30b8\u30e7\u30f3 \u30d0\u30fc\u30b8\u30e7\u30f3","title":"C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"articles/how-to-read-libraries/#c_1","text":"< \uff5e . h > \u5f62\u5f0f\u306e C \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u591a\u304f\u304c\u3001 < c \uff5e > \u3068\u3044\u3046\u540d\u524d\u3067 C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u540d \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 cassert \u30b7\u30fc\u30a2\u30b5\u30fc\u30c8 \u8868\u660e cctype \u30b7\u30fc\u30b7\u30fc\u30bf\u30a4\u30d7 \u6587\u5b57\u306e\u5206\u985e cerrno \u30b7\u30fc\u30a8\u30e9\u30fc\u30ca\u30f3\u30d0\u30fc \u30a8\u30e9\u30fc\u30ca\u30f3\u30d0\u30fc (error number) \u306e\u7565 cfenv \u30b7\u30fc\u30a8\u30d5\u30a8\u30f3\u30d6 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u74b0\u5883\u8a2d\u5b9a (float environment) \u306e\u7565 cfloat \u30b7\u30fc\u30d5\u30ed\u30fc\u30c8 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 cinttypes \u30b7\u30fc\u30a4\u30f3\u30c8\u30bf\u30a4\u30d7\u30b9 \u6574\u6570\u578b climits \u30b7\u30fc\u30ea\u30df\u30c3\u30c4 \u4e0a\u9650\u4e0b\u9650 clocale \u30b7\u30fc\u30ed\u30b1\u30fc\u30eb \u5730\u57df cmath \u30b7\u30fc\u30de\u30b9 \u6570\u5b66\u95a2\u6570 csetjmp \u30b7\u30fc\u30bb\u30c3\u30c8\u30b8\u30e3\u30f3\u30d7 \u30bb\u30c3\u30c8\u30b8\u30e3\u30f3\u30d7\u547d\u4ee4 csignal \u30b7\u30fc\u30b7\u30b0\u30ca\u30eb \u30b7\u30b0\u30ca\u30eb cstdarg \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a2\u30fc\u30b0/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a2\u30fc\u30b0 \u5f15\u6570 cstddef \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30c7\u30d5/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30c7\u30d5 \u57fa\u672c\u7684\u306a\u5b9a\u7fa9 cstdint \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a4\u30f3\u30c8/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a4\u30f3\u30c8 \u57fa\u672c\u7684\u306a\u6574\u6570 cstdio \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a2\u30a4\u30aa\u30fc/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a2\u30a4\u30aa\u30fc \u57fa\u672c\u7684\u306a\u5165\u51fa\u529b cstdlib \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30ea\u30d6/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30ea\u30d6 \u57fa\u672c\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea cstring \u30b7\u30fc\u30b9\u30c8\u30ea\u30f3\u30b0 \u6587\u5b57\u5217 ctime \u30b7\u30fc\u30bf\u30a4\u30e0 \u6642\u9593 cuchar \u30b7\u30fc\u30e6\u30fc\u30c1\u30e3\u30fc Unicode \u6587\u5b57 cwchar \u30b7\u30fc\u30c0\u30d6\u30eb\u30c1\u30e3\u30fc \u30ef\u30a4\u30c9\u6587\u5b57 cwctype \u30b7\u30fc\u30c0\u30d6\u30eb\u30bf\u30a4\u30d7 \u30ef\u30a4\u30c9\u6587\u5b57\u306e\u5206\u985e","title":"C \u8a00\u8a9e\u7531\u6765\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"articles/ieee754-arithmetic/","text":"IEEE 754 \u6f14\u7b97\u306e\u30eb\u30fc\u30eb \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4e38\u3081\u30e2\u30fc\u30c9\u304c FE_TONEAREST \u306e\u5834\u5408\u306e\u7d50\u679c\u3067\u3059\u3002 \u56db\u5247\u6f14\u7b97 \u6bd4\u8f03\u6f14\u7b97 \u4e09\u65b9\u6bd4\u8f03\u6f14\u7b97 \u7d50\u679c\u306f std :: partial_ordering \u578b","title":"IEEE 754 \u6f14\u7b97\u306e\u30eb\u30fc\u30eb"},{"location":"articles/ieee754-arithmetic/#ieee-754","text":"\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4e38\u3081\u30e2\u30fc\u30c9\u304c FE_TONEAREST \u306e\u5834\u5408\u306e\u7d50\u679c\u3067\u3059\u3002","title":"IEEE 754 \u6f14\u7b97\u306e\u30eb\u30fc\u30eb"},{"location":"articles/ieee754-arithmetic/#_1","text":"","title":"\u56db\u5247\u6f14\u7b97"},{"location":"articles/ieee754-arithmetic/#_2","text":"","title":"\u6bd4\u8f03\u6f14\u7b97"},{"location":"articles/ieee754-arithmetic/#_3","text":"\u7d50\u679c\u306f std :: partial_ordering \u578b","title":"\u4e09\u65b9\u6bd4\u8f03\u6f14\u7b97"},{"location":"articles/it-compiles/","text":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b C++ \u306e\u898f\u683c\u4e0a\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3001\u4e0d\u601d\u8b70\u306a\u898b\u305f\u76ee\u306e\u30b3\u30fc\u30c9\u306e\u7d39\u4ecb\u3067\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b URL int main () { https : //cppmap.github.io return 0 ; } main \u95a2\u6570 try \u30d6\u30ed\u30c3\u30af int main () try { } catch (...) { return - 1 ; } \u6dfb\u5b57\u5f0f\u306e\u5165\u308c\u66ff\u3048 #include <iostream> int main () { int a [ 3 ] = { 10 , 20 , 30 }; std :: cout << 2 [ a ] << '\\n' ; for ( int i = 0 ; i < 3 ; ++ i ) { std :: cout << i [ a ] << '\\n' ; } } \u62ec\u5f27\u306e\u9023\u7d9a int main () { {}; []{}; [](){}; [](){}(); } \u7a7a\u306e\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6 # #include <iostream> # int main () { # } --> \u6f14\u7b97\u5b50 #include <iostream> int main () { int i = 10 ; while ( i --> 0 ) { std :: cout << i << '\\n' ; } } \u540c\u3058\u95a2\u6570 #include <iostream> using ll = long long ; void f ( unsigned ll ) { std :: cout << \"A \\n \" ; } void f ( unsigned long long ) { std :: cout << \"B \\n \" ; } int main () { f ( 123ull ); } \u623b\u308a\u5024\u304c\u7121\u3044\u306e\u306b [ [nodiscard ] ] [[ nodiscard ]] void Func () { } int main () { Func (); // \u8b66\u544a\u306f\u51fa\u306a\u3044 } \u9577\u3044\u95a2\u6570 struct C { inline virtual volatile constexpr const unsigned long long int f () const noexcept final = delete ; }; int main () { } \u540d\u524d\u7a7a\u9593\u30a8\u30a4\u30ea\u30a2\u30b9\u306e\u518d\u5e30 namespace A { namespace A = A ; void f () {} } int main () { A :: A :: A :: A :: A :: A :: f (); }","title":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b"},{"location":"articles/it-compiles/#_1","text":"C++ \u306e\u898f\u683c\u4e0a\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3001\u4e0d\u601d\u8b70\u306a\u898b\u305f\u76ee\u306e\u30b3\u30fc\u30c9\u306e\u7d39\u4ecb\u3067\u3059\u3002","title":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b"},{"location":"articles/it-compiles/#url","text":"int main () { https : //cppmap.github.io return 0 ; }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b URL"},{"location":"articles/it-compiles/#main-try","text":"int main () try { } catch (...) { return - 1 ; }","title":"main \u95a2\u6570 try \u30d6\u30ed\u30c3\u30af"},{"location":"articles/it-compiles/#_2","text":"#include <iostream> int main () { int a [ 3 ] = { 10 , 20 , 30 }; std :: cout << 2 [ a ] << '\\n' ; for ( int i = 0 ; i < 3 ; ++ i ) { std :: cout << i [ a ] << '\\n' ; } }","title":"\u6dfb\u5b57\u5f0f\u306e\u5165\u308c\u66ff\u3048"},{"location":"articles/it-compiles/#_3","text":"int main () { {}; []{}; [](){}; [](){}(); }","title":"\u62ec\u5f27\u306e\u9023\u7d9a"},{"location":"articles/it-compiles/#_4","text":"# #include <iostream> # int main () { # }","title":"\u7a7a\u306e\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6"},{"location":"articles/it-compiles/#-","text":"#include <iostream> int main () { int i = 10 ; while ( i --> 0 ) { std :: cout << i << '\\n' ; } }","title":"--&gt; \u6f14\u7b97\u5b50"},{"location":"articles/it-compiles/#_5","text":"#include <iostream> using ll = long long ; void f ( unsigned ll ) { std :: cout << \"A \\n \" ; } void f ( unsigned long long ) { std :: cout << \"B \\n \" ; } int main () { f ( 123ull ); }","title":"\u540c\u3058\u95a2\u6570"},{"location":"articles/it-compiles/#nodiscard","text":"[[ nodiscard ]] void Func () { } int main () { Func (); // \u8b66\u544a\u306f\u51fa\u306a\u3044 }","title":"\u623b\u308a\u5024\u304c\u7121\u3044\u306e\u306b [[nodiscard]]"},{"location":"articles/it-compiles/#_6","text":"struct C { inline virtual volatile constexpr const unsigned long long int f () const noexcept final = delete ; }; int main () { }","title":"\u9577\u3044\u95a2\u6570"},{"location":"articles/it-compiles/#_7","text":"namespace A { namespace A = A ; void f () {} } int main () { A :: A :: A :: A :: A :: A :: f (); }","title":"\u540d\u524d\u7a7a\u9593\u30a8\u30a4\u30ea\u30a2\u30b9\u306e\u518d\u5e30"},{"location":"articles/it-does-not-compile/","text":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044 \u6b63\u3057\u3044\u3088\u3046\u306b\u898b\u3048\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u30b3\u30fc\u30c9\u306e\u7d39\u4ecb\u3067\u3059\u3002 \u6dfb\u5b57\u3068\u30e9\u30e0\u30c0\u5f0f #include <iostream> int main () { int a [ 3 ] = { 10 , 20 , 30 }; std :: cout << a [[](){ return 1 ; }()] << '\\n' ; } \u4f7f\u3048\u306a\u3044\u5909\u6570 #include <memory> int main () { std :: shared_ptr < int > p (); p . reset (); } \u30dd\u30a4\u30f3\u30bf\u578b\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570 void Func ( int *= nullptr ) { } int main () { Func (); }","title":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044"},{"location":"articles/it-does-not-compile/#_1","text":"\u6b63\u3057\u3044\u3088\u3046\u306b\u898b\u3048\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u30b3\u30fc\u30c9\u306e\u7d39\u4ecb\u3067\u3059\u3002","title":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044"},{"location":"articles/it-does-not-compile/#_2","text":"#include <iostream> int main () { int a [ 3 ] = { 10 , 20 , 30 }; std :: cout << a [[](){ return 1 ; }()] << '\\n' ; }","title":"\u6dfb\u5b57\u3068\u30e9\u30e0\u30c0\u5f0f"},{"location":"articles/it-does-not-compile/#_3","text":"#include <memory> int main () { std :: shared_ptr < int > p (); p . reset (); }","title":"\u4f7f\u3048\u306a\u3044\u5909\u6570"},{"location":"articles/it-does-not-compile/#_4","text":"void Func ( int *= nullptr ) { } int main () { Func (); }","title":"\u30dd\u30a4\u30f3\u30bf\u578b\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570"},{"location":"contribution/contributors/","text":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf C++ \u306e\u6b69\u304d\u65b9 Web \u30b5\u30a4\u30c8\u306e\u6539\u5584\u3001\u60c5\u5831\u62e1\u5145\u306b\u5354\u529b\u3057\u3066\u304f\u308c\u305f\u65b9\u3005\u3067\u3059\uff08ABC \u9806\uff09\u3002 @cpp_akira \u3055\u3093 \u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599 \u60c5\u5831\u63d0\u4f9b \u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u8a18\u4e8b\u52a0\u7b46 \u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u8a18\u4e8b\u52a0\u7b46 @Fuyutsubaki \u3055\u3093 \u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044 \u30cd\u30bf\u63d0\u4f9b \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u8a18\u4e8b\u4f5c\u6210 @kariya_mitsuru \u3055\u3093 C++17 \u6d0b\u66f8 \u60c5\u5831\u63d0\u4f9b \u51e6\u7406\u7cfb\u306e\u5bfe\u5fdc\u72b6\u6cc1 \u60c5\u5831\u63d0\u4f9b IEEE 754 \u6f14\u7b97\u306b\u3064\u3044\u3066 \u60c5\u5831\u63d0\u4f9b @Linda_pp \u3055\u3093 \u30e9\u30a4\u30d6\u30e9\u30ea \u8a18\u4e8b\u63d0\u4f9b @matken11235 \u3055\u3093 C++ \u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3 \u60c5\u5831\u63d0\u4f9b @nekko1119 \u3055\u3093 \u4e88\u7d04\u8a9e \u8a18\u4e8b\u4f5c\u6210 @NxNeu_J \u3055\u3093 C++17 \u6d0b\u66f8 \u60c5\u5831\u63d0\u4f9b @onihusube9 \u3055\u3093 \u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599 \u60c5\u5831\u63d0\u4f9b Q & A \u30b5\u30a4\u30c8 \u60c5\u5831\u63d0\u4f9b C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848 \u8a18\u4e8b\u63d0\u4f9b \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf \u30e9\u30a4\u30d6\u30e9\u30ea \u60c5\u5831\u63d0\u4f9b \u6a19\u6e96\u5316\u4f1a\u8b70 \u8a18\u4e8b\u52a0\u7b46 C++20 \u306e\u65b0\u6a5f\u80fd \u8a18\u4e8b\u52a0\u7b46 \u6a19\u6e96\u5316\u4f1a\u8b70 \u8a18\u4e8b\u52a0\u7b46 \u6a19\u6e96\u5316\u4f1a\u8b70 \u8a18\u4e8b\u52a0\u7b46 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u57f7\u7b46\u5354\u529b \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u8a18\u4e8b\u52a0\u7b46 @tak0kada \u3055\u3093 \u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u8a18\u4e8b\u52a0\u7b46 @tetzrom \u3055\u3093 \u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599 \u60c5\u5831\u63d0\u4f9b @wolf_cpp \u3055\u3093 \u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u60c5\u5831\u63d0\u4f9b @wx257osn2 \u3055\u3093 \u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9 \u60c5\u5831\u63d0\u4f9b @yohhoy \u3055\u3093 \u8a18\u4e8b\u6539\u5584\u6848 \u63d0\u4f9b C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848 \u60c5\u5831\u63d0\u4f9b @yuji_n_dispair \u3055\u3093 \u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u60c5\u5831\u52a0\u7b46 @yumetodo \u3055\u3093 \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf \u30e9\u30a4\u30d6\u30e9\u30ea \u60c5\u5831\u63d0\u4f9b","title":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf"},{"location":"contribution/contributors/#_1","text":"C++ \u306e\u6b69\u304d\u65b9 Web \u30b5\u30a4\u30c8\u306e\u6539\u5584\u3001\u60c5\u5831\u62e1\u5145\u306b\u5354\u529b\u3057\u3066\u304f\u308c\u305f\u65b9\u3005\u3067\u3059\uff08ABC \u9806\uff09\u3002 @cpp_akira \u3055\u3093 \u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599 \u60c5\u5831\u63d0\u4f9b \u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u8a18\u4e8b\u52a0\u7b46 \u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u8a18\u4e8b\u52a0\u7b46 @Fuyutsubaki \u3055\u3093 \u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044 \u30cd\u30bf\u63d0\u4f9b \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u8a18\u4e8b\u4f5c\u6210 @kariya_mitsuru \u3055\u3093 C++17 \u6d0b\u66f8 \u60c5\u5831\u63d0\u4f9b \u51e6\u7406\u7cfb\u306e\u5bfe\u5fdc\u72b6\u6cc1 \u60c5\u5831\u63d0\u4f9b IEEE 754 \u6f14\u7b97\u306b\u3064\u3044\u3066 \u60c5\u5831\u63d0\u4f9b @Linda_pp \u3055\u3093 \u30e9\u30a4\u30d6\u30e9\u30ea \u8a18\u4e8b\u63d0\u4f9b @matken11235 \u3055\u3093 C++ \u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3 \u60c5\u5831\u63d0\u4f9b @nekko1119 \u3055\u3093 \u4e88\u7d04\u8a9e \u8a18\u4e8b\u4f5c\u6210 @NxNeu_J \u3055\u3093 C++17 \u6d0b\u66f8 \u60c5\u5831\u63d0\u4f9b @onihusube9 \u3055\u3093 \u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599 \u60c5\u5831\u63d0\u4f9b Q & A \u30b5\u30a4\u30c8 \u60c5\u5831\u63d0\u4f9b C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848 \u8a18\u4e8b\u63d0\u4f9b \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf \u30e9\u30a4\u30d6\u30e9\u30ea \u60c5\u5831\u63d0\u4f9b \u6a19\u6e96\u5316\u4f1a\u8b70 \u8a18\u4e8b\u52a0\u7b46 C++20 \u306e\u65b0\u6a5f\u80fd \u8a18\u4e8b\u52a0\u7b46 \u6a19\u6e96\u5316\u4f1a\u8b70 \u8a18\u4e8b\u52a0\u7b46 \u6a19\u6e96\u5316\u4f1a\u8b70 \u8a18\u4e8b\u52a0\u7b46 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u57f7\u7b46\u5354\u529b \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u8a18\u4e8b\u52a0\u7b46 @tak0kada \u3055\u3093 \u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u8a18\u4e8b\u52a0\u7b46 @tetzrom \u3055\u3093 \u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599 \u60c5\u5831\u63d0\u4f9b @wolf_cpp \u3055\u3093 \u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u60c5\u5831\u63d0\u4f9b @wx257osn2 \u3055\u3093 \u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9 \u60c5\u5831\u63d0\u4f9b @yohhoy \u3055\u3093 \u8a18\u4e8b\u6539\u5584\u6848 \u63d0\u4f9b C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848 \u60c5\u5831\u63d0\u4f9b @yuji_n_dispair \u3055\u3093 \u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u60c5\u5831\u52a0\u7b46 @yumetodo \u3055\u3093 \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf \u30e9\u30a4\u30d6\u30e9\u30ea \u60c5\u5831\u63d0\u4f9b","title":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf"},{"location":"learn/books/","text":"\u66f8\u7c4d C++ \u306e\u5b66\u7fd2\u306b\u5f79\u7acb\u3064\u66f8\u7c4d\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 C++14 \u4ee5\u964d\u306e\u66f8\u7c4d \u66f8\u540d \u767a\u884c\u5e74 C++ \u898f\u683c \u5185\u5bb9 Effective Modern C++ 2015 C++14 Effective C++ \u3067\u6709\u540d\u306a Scott Meyers \u306b\u3088\u308b C++11/14 \u306e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u30fb\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u30fb\u30a4\u30c7\u30a3\u30aa\u30e0\u96c6 C++11/14 \u30b3\u30a2\u8a00\u8a9e 2015 C++14 C++11/14 \u306e\u6587\u6cd5\u3068\u8a00\u8a9e\u6a5f\u80fd\u3092\u898f\u683c\u66f8\u306b\u57fa\u3065\u3044\u3066\u8a73\u7d30\u306b\u89e3\u8aac\u3002 \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u7248 C++ \u306b\u3088\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u539f\u5247\u3068\u5b9f\u8df5 2016 C++14 C++ \u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u6559\u3048\u308b 1,000 \u30da\u30fc\u30b8\u8d85\u306e\u5165\u9580\u66f8\u3002C++ \u751f\u307f\u306e\u89aa Bjarne Stroustrup \u8457 \u57fa\u790e\u304b\u3089\u3057\u3063\u304b\u308a\u5b66\u3076 C++ \u306e\u6559\u79d1\u66f8 2017 C++14 \u521d\u5b66\u8005\u5411\u3051\u3002\u57fa\u672c\u7684\u306a\u6587\u6cd5\u304b\u3089\u30af\u30e9\u30b9\u3001\u30b3\u30f3\u30c6\u30ca\u3001\u4e26\u5217\u5316\u307e\u3067\u6271\u3046\u7d04 300 \u30da\u30fc\u30b8\u306e\u5165\u9580\u66f8 C++ \u306e\u7d75\u672c \u7b2c\uff12\u7248 2017 C++14 \u30af\u30e9\u30b9\u3084\u53c2\u7167\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u3069\u3001C \u306b\u5bfe\u3059\u308b C++ \u56fa\u6709\u306e\u8a00\u8a9e\u6a5f\u80fd\u3092\u56f3\u7248\u3092\u7528\u3044\u3066\u89e3\u8aac Optimized C++ 2017 C++14 C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6027\u80fd\u6e2c\u5b9a\u3068\u6700\u9069\u5316\u306b\u3064\u3044\u3066\u306e\u5b9f\u8df5\u3068\u89e3\u8aac [\u6539\u8a02\u7b2c3\u7248] C++ \u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 2018 C++17 \u57fa\u672c\u6587\u6cd5\u306e\u89e3\u8aac\u306b\u52a0\u3048\u3001\u9006\u5f15\u304d\u5f62\u5f0f\u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5e45\u5e83\u3044\u6a5f\u80fd\u3092\u7d39\u4ecb \u6c5f\u6dfb\u4eae\u306e\u8a73\u8aac C++17 2018 C++17 C++14/17 \u306e\u65b0\u3057\u3044\u6587\u6cd5\u3068\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3002 \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u7248 \u5192\u967a\u3067\u5b66\u3076\u306f\u3058\u3081\u3066\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 2018 C++17 \u521d\u5b66\u8005\u5411\u3051\u3002\u65e9\u7a32\u7530\u5927\u5b66\u304c\u904b\u55b6\u3059\u308b\u4e2d\u5b66\u30fb\u9ad8\u6821\u751f\u5411\u3051 C++ \u5165\u9580\u8b1b\u5ea7\u306e\u6559\u79d1\u66f8\u3002 \u7d39\u4ecb\u30da\u30fc\u30b8 Modern C++ \u30c1\u30e3\u30ec\u30f3\u30b8 \u2015 C++17 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u529b\u3092\u935b\u3048\u308b 100 \u554f 2019 C++17/20 \u73fe\u5b9f\u7684\u30fb\u5b9f\u8df5\u7684\u306a 100 \u306e\u8ab2\u984c\u3092 C++ \u3067\u89e3\u6c7a\u3059\u308b\u554f\u984c\u96c6\u3002\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7a4d\u6975\u7684\u306b\u6d3b\u7528\u3059\u308b \u6c5f\u6dfb\u4eae\u306e C++ \u5165\u9580 2019 C++17/20 C++ \u306e\u30c4\u30fc\u30eb\u3084\u6587\u6cd5\u3001\u3044\u304f\u3064\u304b\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u306e\u8a2d\u8a08\u3092\u5b66\u3079\u308b\u89e3\u8aac\u66f8\u3002 \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u7248 \u72ec\u7fd2 C++ \u65b0\u7248 2019 C++17 \u521d\u5b66\u8005\u5411\u3051\u3002\u300c\u72ec\u7fd2 C++ \u7b2c 4 \u7248\u300d\u3092 C++17 \u306b\u5bfe\u5fdc\u3055\u305b\u89e3\u8aac\u3092\u4e00\u65b0 \u6d0b\u66f8 \u66f8\u540d \u767a\u884c\u5e74 C++ \u898f\u683c \u5185\u5bb9 C++ Templates: The Complete Guide (2nd Edition) 2017 C++17/20 C++17 \u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u6587\u6cd5\u3084\u69d8\u3005\u306a\u30c6\u30af\u30cb\u30c3\u30af\u3092\u89e3\u8aac\u3002C++20 \u3067\u5c0e\u5165\u3055\u308c\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u7d39\u4ecb\u3082\u3002 \u76ee\u6b21 Mastering the C++17 STL 2017 C++17 C++17 \u307e\u3067\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3084\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3002 \u76ee\u6b21 C++ Concurrency in Action, Second Edition 2019 C++17 C++17 \u306b\u304a\u3051\u308b\u4e26\u884c\u51e6\u7406\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3002\u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u8a2d\u8a08\u306a\u3069\u3082\u53d6\u308a\u4e0a\u3052\u308b\u3002 \u8a66\u3057\u8aad\u307f C++17 in Detail 2019 C++17 C++17 \u306e\u4e3b\u8981\u306a\u65b0\u6a5f\u80fd\u30fb\u5909\u66f4\u70b9\u306e\u307b\u304b\u3001Boost \u304b\u3089\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3078\u306e\u79fb\u884c\u3092\u89e3\u8aac\u3002 \u76ee\u6b21 C++17 - The Complete Guide 2019 C++17 \u76ee\u6b21","title":"\u66f8\u7c4d"},{"location":"learn/books/#_1","text":"C++ \u306e\u5b66\u7fd2\u306b\u5f79\u7acb\u3064\u66f8\u7c4d\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002","title":"\u66f8\u7c4d"},{"location":"learn/books/#c14","text":"\u66f8\u540d \u767a\u884c\u5e74 C++ \u898f\u683c \u5185\u5bb9 Effective Modern C++ 2015 C++14 Effective C++ \u3067\u6709\u540d\u306a Scott Meyers \u306b\u3088\u308b C++11/14 \u306e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u30fb\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u30fb\u30a4\u30c7\u30a3\u30aa\u30e0\u96c6 C++11/14 \u30b3\u30a2\u8a00\u8a9e 2015 C++14 C++11/14 \u306e\u6587\u6cd5\u3068\u8a00\u8a9e\u6a5f\u80fd\u3092\u898f\u683c\u66f8\u306b\u57fa\u3065\u3044\u3066\u8a73\u7d30\u306b\u89e3\u8aac\u3002 \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u7248 C++ \u306b\u3088\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u539f\u5247\u3068\u5b9f\u8df5 2016 C++14 C++ \u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u6559\u3048\u308b 1,000 \u30da\u30fc\u30b8\u8d85\u306e\u5165\u9580\u66f8\u3002C++ \u751f\u307f\u306e\u89aa Bjarne Stroustrup \u8457 \u57fa\u790e\u304b\u3089\u3057\u3063\u304b\u308a\u5b66\u3076 C++ \u306e\u6559\u79d1\u66f8 2017 C++14 \u521d\u5b66\u8005\u5411\u3051\u3002\u57fa\u672c\u7684\u306a\u6587\u6cd5\u304b\u3089\u30af\u30e9\u30b9\u3001\u30b3\u30f3\u30c6\u30ca\u3001\u4e26\u5217\u5316\u307e\u3067\u6271\u3046\u7d04 300 \u30da\u30fc\u30b8\u306e\u5165\u9580\u66f8 C++ \u306e\u7d75\u672c \u7b2c\uff12\u7248 2017 C++14 \u30af\u30e9\u30b9\u3084\u53c2\u7167\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u3069\u3001C \u306b\u5bfe\u3059\u308b C++ \u56fa\u6709\u306e\u8a00\u8a9e\u6a5f\u80fd\u3092\u56f3\u7248\u3092\u7528\u3044\u3066\u89e3\u8aac Optimized C++ 2017 C++14 C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6027\u80fd\u6e2c\u5b9a\u3068\u6700\u9069\u5316\u306b\u3064\u3044\u3066\u306e\u5b9f\u8df5\u3068\u89e3\u8aac [\u6539\u8a02\u7b2c3\u7248] C++ \u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 2018 C++17 \u57fa\u672c\u6587\u6cd5\u306e\u89e3\u8aac\u306b\u52a0\u3048\u3001\u9006\u5f15\u304d\u5f62\u5f0f\u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5e45\u5e83\u3044\u6a5f\u80fd\u3092\u7d39\u4ecb \u6c5f\u6dfb\u4eae\u306e\u8a73\u8aac C++17 2018 C++17 C++14/17 \u306e\u65b0\u3057\u3044\u6587\u6cd5\u3068\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3002 \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u7248 \u5192\u967a\u3067\u5b66\u3076\u306f\u3058\u3081\u3066\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 2018 C++17 \u521d\u5b66\u8005\u5411\u3051\u3002\u65e9\u7a32\u7530\u5927\u5b66\u304c\u904b\u55b6\u3059\u308b\u4e2d\u5b66\u30fb\u9ad8\u6821\u751f\u5411\u3051 C++ \u5165\u9580\u8b1b\u5ea7\u306e\u6559\u79d1\u66f8\u3002 \u7d39\u4ecb\u30da\u30fc\u30b8 Modern C++ \u30c1\u30e3\u30ec\u30f3\u30b8 \u2015 C++17 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u529b\u3092\u935b\u3048\u308b 100 \u554f 2019 C++17/20 \u73fe\u5b9f\u7684\u30fb\u5b9f\u8df5\u7684\u306a 100 \u306e\u8ab2\u984c\u3092 C++ \u3067\u89e3\u6c7a\u3059\u308b\u554f\u984c\u96c6\u3002\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7a4d\u6975\u7684\u306b\u6d3b\u7528\u3059\u308b \u6c5f\u6dfb\u4eae\u306e C++ \u5165\u9580 2019 C++17/20 C++ \u306e\u30c4\u30fc\u30eb\u3084\u6587\u6cd5\u3001\u3044\u304f\u3064\u304b\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u306e\u8a2d\u8a08\u3092\u5b66\u3079\u308b\u89e3\u8aac\u66f8\u3002 \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u7248 \u72ec\u7fd2 C++ \u65b0\u7248 2019 C++17 \u521d\u5b66\u8005\u5411\u3051\u3002\u300c\u72ec\u7fd2 C++ \u7b2c 4 \u7248\u300d\u3092 C++17 \u306b\u5bfe\u5fdc\u3055\u305b\u89e3\u8aac\u3092\u4e00\u65b0","title":"C++14 \u4ee5\u964d\u306e\u66f8\u7c4d"},{"location":"learn/books/#_2","text":"\u66f8\u540d \u767a\u884c\u5e74 C++ \u898f\u683c \u5185\u5bb9 C++ Templates: The Complete Guide (2nd Edition) 2017 C++17/20 C++17 \u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u6587\u6cd5\u3084\u69d8\u3005\u306a\u30c6\u30af\u30cb\u30c3\u30af\u3092\u89e3\u8aac\u3002C++20 \u3067\u5c0e\u5165\u3055\u308c\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u7d39\u4ecb\u3082\u3002 \u76ee\u6b21 Mastering the C++17 STL 2017 C++17 C++17 \u307e\u3067\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3084\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3002 \u76ee\u6b21 C++ Concurrency in Action, Second Edition 2019 C++17 C++17 \u306b\u304a\u3051\u308b\u4e26\u884c\u51e6\u7406\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3002\u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u8a2d\u8a08\u306a\u3069\u3082\u53d6\u308a\u4e0a\u3052\u308b\u3002 \u8a66\u3057\u8aad\u307f C++17 in Detail 2019 C++17 C++17 \u306e\u4e3b\u8981\u306a\u65b0\u6a5f\u80fd\u30fb\u5909\u66f4\u70b9\u306e\u307b\u304b\u3001Boost \u304b\u3089\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3078\u306e\u79fb\u884c\u3092\u89e3\u8aac\u3002 \u76ee\u6b21 C++17 - The Complete Guide 2019 C++17 \u76ee\u6b21","title":"\u6d0b\u66f8"},{"location":"learn/communities/","text":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 C++ \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u3059\u3002 \u30e6\u30fc\u30b6\u30b0\u30eb\u30fc\u30d7 Cpplang Slack https://cpplang.now.sh/ 1 \u4e07\u4eba\u4ee5\u4e0a\u304c\u767b\u9332\u3057\u3001100 \u4ee5\u4e0a\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u5b58\u5728\u3059\u308b\u3001C++ \u306b\u95a2\u3059\u308b\u4e16\u754c\u6700\u5927\u306e Slack \u30ef\u30fc\u30af\u30b9\u30da\u30fc\u30b9\u3067\u3059\u3002\u4e0a\u8a18\u30da\u30fc\u30b8\u306b\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u529b\u3059\u308b\u3068\u62db\u5f85\u30e1\u30fc\u30eb\u304c\u5c4a\u304d\u307e\u3059\u3002 C++JP Facebook \u30b0\u30eb\u30fc\u30d7 https://www.facebook.com/groups/cppjp/ 400 \u4eba\u4ee5\u4e0a\u304c\u53c2\u52a0\u3059\u308b\u3001\u65e5\u672c\u306e C++ \u30d7\u30ed\u30b0\u30e9\u30de\u306e\u305f\u3081\u306e Facebook \u30b0\u30eb\u30fc\u30d7\u3067\u3059\u3002\u66f8\u7c4d\u3084\u30a4\u30d9\u30f3\u30c8\u306e\u60c5\u5831\u304c\u6295\u7a3f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 Twitter C++ \u306b\u95a2\u3059\u308b\u65e5\u672c\u8a9e\u306e\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22\u3059\u308b\u65b9\u6cd5 Twitter \u306e\u691c\u7d22\u6a5f\u80fd\u3067\u306f\u3001\"C++20\" \u306e\u3088\u3046\u306b + \u8a18\u53f7\u3092\u542b\u3080\u30ef\u30fc\u30c9\u3092\u691c\u7d22\u3067\u304d\u307e\u305b\u3093\u3002\"C++20\" \u3067\u30c4\u30a4\u30fc\u30c8\u691c\u7d22\u3092\u3059\u308b\u306b\u306f\u3001 Yahoo!\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u691c\u7d22 \u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u3067\u306f\u3001\u76f4\u8fd1 1 \u30ab\u6708\u306e\u65e5\u672c\u8a9e\u30c4\u30a4\u30fc\u30c8\u306e\u4e2d\u304b\u3089\u3001\"C++20\" \u306e\u3088\u3046\u306b + \u8a18\u53f7\u3092\u542b\u3080\u30ef\u30fc\u30c9\u3067\u306e\u691c\u7d22\u304c\u3067\u304d\u307e\u3059\u3002 \u65e5\u672c\u8a9e\u306e Q & A \u30b5\u30a4\u30c8 Stack Overflow (\u65e5\u672c\u8a9e\u7248) C++ \u30bf\u30b0\u304c\u4ed8\u3044\u305f\u8cea\u554f: https://ja.stackoverflow.com/questions/tagged/c%2b%2b teratail C++ \u30bf\u30b0\u304c\u4ed8\u3044\u305f\u8cea\u554f: https://teratail.com/search?q=C%2B%2B 2 \u3061\u3083\u3093\u306d\u308b\u30b9\u30ec\u30c3\u30c9 C++ \u76f8\u8ac7\u5ba4 C/C++ \u5ba4","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"learn/communities/#_1","text":"C++ \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u3059\u3002","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"learn/communities/#_2","text":"","title":"\u30e6\u30fc\u30b6\u30b0\u30eb\u30fc\u30d7"},{"location":"learn/communities/#cpplang-slack","text":"https://cpplang.now.sh/ 1 \u4e07\u4eba\u4ee5\u4e0a\u304c\u767b\u9332\u3057\u3001100 \u4ee5\u4e0a\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u5b58\u5728\u3059\u308b\u3001C++ \u306b\u95a2\u3059\u308b\u4e16\u754c\u6700\u5927\u306e Slack \u30ef\u30fc\u30af\u30b9\u30da\u30fc\u30b9\u3067\u3059\u3002\u4e0a\u8a18\u30da\u30fc\u30b8\u306b\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u529b\u3059\u308b\u3068\u62db\u5f85\u30e1\u30fc\u30eb\u304c\u5c4a\u304d\u307e\u3059\u3002","title":"Cpplang Slack"},{"location":"learn/communities/#cjp-facebook","text":"https://www.facebook.com/groups/cppjp/ 400 \u4eba\u4ee5\u4e0a\u304c\u53c2\u52a0\u3059\u308b\u3001\u65e5\u672c\u306e C++ \u30d7\u30ed\u30b0\u30e9\u30de\u306e\u305f\u3081\u306e Facebook \u30b0\u30eb\u30fc\u30d7\u3067\u3059\u3002\u66f8\u7c4d\u3084\u30a4\u30d9\u30f3\u30c8\u306e\u60c5\u5831\u304c\u6295\u7a3f\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"C++JP Facebook \u30b0\u30eb\u30fc\u30d7"},{"location":"learn/communities/#twitter","text":"","title":"Twitter"},{"location":"learn/communities/#c","text":"Twitter \u306e\u691c\u7d22\u6a5f\u80fd\u3067\u306f\u3001\"C++20\" \u306e\u3088\u3046\u306b + \u8a18\u53f7\u3092\u542b\u3080\u30ef\u30fc\u30c9\u3092\u691c\u7d22\u3067\u304d\u307e\u305b\u3093\u3002\"C++20\" \u3067\u30c4\u30a4\u30fc\u30c8\u691c\u7d22\u3092\u3059\u308b\u306b\u306f\u3001 Yahoo!\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u691c\u7d22 \u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u3067\u306f\u3001\u76f4\u8fd1 1 \u30ab\u6708\u306e\u65e5\u672c\u8a9e\u30c4\u30a4\u30fc\u30c8\u306e\u4e2d\u304b\u3089\u3001\"C++20\" \u306e\u3088\u3046\u306b + \u8a18\u53f7\u3092\u542b\u3080\u30ef\u30fc\u30c9\u3067\u306e\u691c\u7d22\u304c\u3067\u304d\u307e\u3059\u3002","title":"C++ \u306b\u95a2\u3059\u308b\u65e5\u672c\u8a9e\u306e\u30c4\u30a4\u30fc\u30c8\u3092\u691c\u7d22\u3059\u308b\u65b9\u6cd5"},{"location":"learn/communities/#q-a","text":"","title":"\u65e5\u672c\u8a9e\u306e Q &amp; A \u30b5\u30a4\u30c8"},{"location":"learn/communities/#stack-overflow","text":"C++ \u30bf\u30b0\u304c\u4ed8\u3044\u305f\u8cea\u554f: https://ja.stackoverflow.com/questions/tagged/c%2b%2b","title":"Stack Overflow (\u65e5\u672c\u8a9e\u7248)"},{"location":"learn/communities/#teratail","text":"C++ \u30bf\u30b0\u304c\u4ed8\u3044\u305f\u8cea\u554f: https://teratail.com/search?q=C%2B%2B","title":"teratail"},{"location":"learn/communities/#2","text":"C++ \u76f8\u8ac7\u5ba4 C/C++ \u5ba4","title":"2 \u3061\u3083\u3093\u306d\u308b\u30b9\u30ec\u30c3\u30c9"},{"location":"learn/online-resources/","text":"\u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599 \u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b C++ \u30ea\u30bd\u30fc\u30b9\u3067\u3059\u3002 \u65e5\u672c\u8a9e\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 cpprefjp cppreference.com \u65e5\u672c\u8a9e\u7248 \u82f1\u8a9e\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 cppreference.com C++ Language Reference \u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3 C++ Core Guidelines | \u898b\u51fa\u3057\u65e5\u672c\u8a9e\u8a33 Google C++ Style Guide | \u65e5\u672c\u8a9e\u8a33 LLVM Coding Standards C++ \u898f\u683c\u95a2\u9023 C++ \u898f\u683c FAQ C++ FAQ Marshall Cline \u306e C++ FAQ \u3068 Bjarne Stroustrup \u306e C++ FAQ \u3092\u7d71\u5408\u30fb\u66f4\u65b0\u3057\u305f Q&A \u96c6","title":"\u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599"},{"location":"learn/online-resources/#_1","text":"\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b C++ \u30ea\u30bd\u30fc\u30b9\u3067\u3059\u3002","title":"\u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599"},{"location":"learn/online-resources/#_2","text":"cpprefjp cppreference.com \u65e5\u672c\u8a9e\u7248","title":"\u65e5\u672c\u8a9e\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9"},{"location":"learn/online-resources/#_3","text":"cppreference.com C++ Language Reference","title":"\u82f1\u8a9e\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9"},{"location":"learn/online-resources/#_4","text":"C++ Core Guidelines | \u898b\u51fa\u3057\u65e5\u672c\u8a9e\u8a33 Google C++ Style Guide | \u65e5\u672c\u8a9e\u8a33 LLVM Coding Standards","title":"\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3"},{"location":"learn/online-resources/#c","text":"C++ \u898f\u683c","title":"C++ \u898f\u683c\u95a2\u9023"},{"location":"learn/online-resources/#faq","text":"C++ FAQ Marshall Cline \u306e C++ FAQ \u3068 Bjarne Stroustrup \u306e C++ FAQ \u3092\u7d71\u5408\u30fb\u66f4\u65b0\u3057\u305f Q&A \u96c6","title":"FAQ"},{"location":"learn/studymeetings/","text":"\u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u56fd\u5185\u3067\u958b\u50ac\u3055\u308c\u3066\u3044\u308b C++ \u95a2\u9023\u306e\u52c9\u5f37\u4f1a\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 C++ MIX \u300cC++ MIX\u300d\u306f\u3001C++\u5468\u8fba\u306e\u52c9\u5f37\u4f1a\u3067\u3059\u3002 \u6a19\u6e96C++\u3001\u6a19\u6e96\u5916\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30c4\u30fc\u30eb\u306e\u7d39\u4ecb\u306f\u3082\u3061\u308d\u3093\u3067\u3059\u304c\u3001Rust\u3084Go\u306a\u3069\u306e\u5f8c\u7d99\u8a00\u8a9e\u306e\u3088\u3046\u306b\u3001C++\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u77e5\u3063\u3066\u3082\u3089\u3044\u305f\u3044\u8a71\u3092\u5e83\u304f\u6271\u3063\u3066\u3044\u304d\u307e\u3059\u3002 \u3053\u306e\u52c9\u5f37\u4f1a\u3067\u306f\u3001\u767a\u8868\u8005\u306b\u3088\u308b\u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3060\u3051\u3067\u306a\u304f\u3001\u53c2\u52a0\u8005\u306e\u307f\u306a\u3055\u3093\u3068\u8b70\u8ad6\u3059\u308b\u6642\u9593\u3082\u4eca\u5f8c\u7528\u610f\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002 https://cppmix.connpass.com/ Youtube \u30c1\u30e3\u30f3\u30cd\u30eb Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #cppmix C++ MIX #6 (2019-11-20) \u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e Akira Takahashi std::format - C++20 \u6642\u4ee3\u306e\u4fbf\u5229\u306a\u6587\u5b57\u5217\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 Ryo Suzuki \u30a4\u30f3\u30bf\u30fc\u30f3\u30b7\u30c3\u30d7\u3067C++\u3092\u4f7f\u7528\u3057\u305f\u30b2\u30fc\u30e0\u958b\u767a\u3092\u7d4c\u9a13\u3057\u305f\u8a71 \u304c\u3063\u3061\u3087 \u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u3044\u3058\u3081\u65b9 kaityo256 \u66f8\u7c4d\u300e\u72ec\u7fd2C++\u300f\u306e\u6539\u8a02\u306b\u3064\u3044\u3066 (\u4eee) Flast \u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3 (\u5168\u54e1\u53c2\u52a0) C++ MIX #5 (2019-09-04) \u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e Shintaro Okada \u81ea\u4f5cOS\u5411\u3051\u306blibc++\u3092\u30d3\u30eb\u30c9\u3059\u308b\u65b9\u6cd5 uchan C++ \u88fd\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea Skia \u306e\u7d39\u4ecb \u6c34\u97f3\u3074\u306d Unreal C++ \u3092\u59cb\u3081\u3066\u307f\u305f\u6642\u306e\u8e93\u3044\u305fTips akoto C++20\u30b9\u30c6\u30fc\u30bf\u30b9 Akira Takahashi 20\u5206\u304f\u3089\u3044\u3067\u308f\u304b\u3063\u305f\u6c17\u5206\u306b\u306a\u308c\u308bC++20\u30b3\u30eb\u30fc\u30c1\u30f3 yohhoy \u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3 (\u5168\u54e1\u53c2\u52a0) C++ MIX #4 (2019-06-26) \u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e Shintaro Okada C++ \u3067\u3082 Result \u3057\u305f\u3044 \u3044\u306a\u3080\u306e\u307f\u305f\u307e (@mitama_rs) \u4e16\u754c\u3092\u5275\u9020\u3059\u308b OSS \u958b\u767a\u3092\u59cb\u3081\u305f\u8a71 \u304c\u3063\u3061\u3087 C++ \u3067 HTTP Proxy \u6771\u5c71\u88d5\u5fb3 \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6982\u8981 Tetsuro Matsumura C++ MIX #3 (2019-04-17) \u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e Shintaro Okada Clang\u306breflection/metaclass\u63d0\u6848\u3063\u307d\u3044\u3082\u306e\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u8a71 Iwahori Kodai C++ \u60c5\u5831\u30b5\u30a4\u30c8\u300cC++ \u306e\u6b69\u304d\u65b9 | cppmap\u300d\u3092\u4f5c\u3063\u3066\u3044\u308b\u8a71 Ryo Suzuki \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u3068Modern C++ \u5b89\u9054\u4fca\u8cb4 C++20\u306e\u6982\u8981 #1 \u8a00\u8a9e\u6a5f\u80fd\u7de8 Akira Takahash C++ MIX #2 (2019-02-20) \u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e Akira Takahashi iOS\u30a2\u30d7\u30ea\u300e\u30d1\u30ba\u30e2\u30ca\u300f\u306e\u3072\u307f\u3064 Nobuyuki Nishiyama Qt\u00d7Reactive Extensions Tetsuro Matsumura C++\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u300cpoac\u300d\u3092\u958b\u767a\u3057\u305f\u8a71 Ken Matsui \u96d1\u8ac7\u30bf\u30a4\u30e0 C++ MIX #1 (2018-12-06) \u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u3001\u6700\u8fd1\u306eC++\u306e\u8aac\u660e Akira Takahashi Menoh\u306b\u304a\u3051\u308b C++\u5b9f\u88c5 / C API / C++API okdshin Undefined Behavior\u306b\u5bfe\u3059\u308b\u9632\u885b\u8853 \u3044\u306a\u3080\u306e\u307f\u305f\u307e C++ \u3092\u6559\u3048\u308b \uff5e\u65e9\u7a32\u7530\u5927\u5b66\u306e\u5c0f\u4e2d\u9ad8\u751f\u5411\u3051\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6559\u5ba4\u306b\u304a\u3051\u308b\u4e8b\u4f8b\u7d39\u4ecb\uff5e Reputeless \u907f\u3051\u3088\u3046 memset \u306e\u4e71\u7528 agate-pris feature.cpp C++17\u306e\u65b0\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3001\u5fa9\u7fd2\uff06\u4e88\u7fd2\u3092\u3057\u307e\u305b\u3093\u304b\uff1f \u30fbC++17\u304c\u51fa\u305f\u307f\u305f\u3044\u3060\u3051\u3069\u3001\u4f55\u304c\u65b0\u3057\u304f\u306a\u3063\u305f\u306e\u304c\u5168\u7136\u8ffd\u3048\u3066\u306a\u3044\u2026\uff1e\uff1c \u30fb\u8272\u3093\u306a\u6a5f\u80fd\u304c\u5165\u3063\u3066\u308b\u307f\u305f\u3044\u3060\u3051\u3069\u3001\u672c\u5f53\u306b\u6291\u3048\u3068\u304f\u3079\u304d\u6a5f\u80fd\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3063\u3066\u4f55\u306a\u3093\u3060\u308d\uff1f \u30fb\u4ed6\u306e\u4eba\u304c\u3069\u3046\u8003\u3048\u3066\u3044\u308b\u304b\u77e5\u308a\u305f\u3044\u2026 \u3053\u3093\u306a\u4eba\u306f\u3001\u4e00\u5ea6\u3001\u3053\u306e\u96c6\u307e\u308a\u306b\u53c2\u52a0\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044 \u8cea\u7591\u5fdc\u7b54\u30fb\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u5f62\u5f0f\u3067\u9032\u3081\u308b\u4e88\u5b9a\u3067\u3059\u304c\u3001\u7121\u8a00\u306e\u65b9\u3082OK\u3067\u3059 \u7279\u306b\u66f8\u7c4d\u306a\u3069\u3092\u6301\u53c2\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093 \u30cd\u30bf\u632f\u308a\u3068\u3057\u3066 \u9032\u884c\u5f79\u304c\u3001C++17\u306e\u57fa\u790e\u7684\u306a\u6a5f\u80fd\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8a71\u984c\u3092\u3001\u53c2\u52a0\u8005\u306b\u63d0\u4f9b\u3057\u307e\u3059 \u307e\u3068\u3081 http://feature-cpp.github.io/feature.cpp/ https://ebisu-effective-modern-cpp.connpass.com/ Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #nakamecpp \u30a4\u30d9\u30f3\u30c8\u756a\u53f7 \u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 Vol. 18 (2019-03-28) C++17\u306e\u65b0\u6a5f\u80fd \u843d\u7a42\u62fe\u3044 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 17 (2019-03-14) \u843d\u3061\u7a42\u62fe\u3044:\u30e1\u30bf\u95a2\u6570\u7de8 \u3044\u306a\u3080\u306e\u307f\u305f\u307e Vol. 16 (2019-02-21) std::invoke \u306e\u7d39\u4ecb Flast Vol. 15 (2019-01-31) - Akira Takahashi Vol. 14 (2019-01-17) string_view \u3044\u306a\u3080\u306e\u307f\u305f\u307e Vol. 13 (2018-12-13) C++17\u306e\u65b0\u6a5f\u80fd optional\u7de8 , std::optional\u306e\u4f7f\u3044\u65b9 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3, \u9065\u4f50\u4fdd, \u3044\u306a\u3080\u306e\u307f\u305f\u307e Vol. 12 (2018-11-22) C++17\u306e\u65b0\u6a5f\u80fd optional\u7de8 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 11 (2018-11-08) - \u897f\u5c71 \u4fe1\u884c Vol. 10 (2018-10-18) C++17 std::any\u306b\u3064\u3044\u3066 \u897f\u5c71 \u4fe1\u884c Vol. 9 (2018-10-04) C++17\u306e\u65b0\u6a5f\u80fd \u30a2\u30ed\u30b1\u30fc\u30bf\u7de8 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 8 (2018-09-13) shared_mutex \u4ed6 yoh Vol. 7 (2018-08-23) C++17\u306e\u65b0\u6a5f\u80fd (\u975e\u9806\u5e8f)\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u7de8 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 6 (2018-08-09) \u984c\u540d\u306e\u306a\u3044\u30b9\u30e9\u30a4\u30c921 Flast Vol. 5 (2018-02-14) \u4e26\u5217(parallel)\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 , std::invoke\u3068\u304bstd::result_of\u3068\u304b herumi Flast Vol. 4 (2018-02-01) C++17\u6982\u7565 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 herumi Vol. 3 (2018-01-11) C++14 \u3059\u3054\u30fc\u3044\uff01\u305f\u30fc\u306e\u3057\u30fc\uff01\uff01\uff01 C++14\u30e9\u30a4\u30d6\u30e9\u30ea\u7de8 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 2 (2017-12-14) (Vol. 1 \u3068\u540c\u3058) \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 1 (2017-11-29) C++14 \u3059\u3054\u30fc\u3044\uff01\u305f\u30fc\u306e\u3057\u30fc\uff01\uff01\uff01 C++14\u8a00\u8a9e\u7de8 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 C++20 \u3092\u76f8\u8ac7\u3057\u306a\u304c\u3089\u8abf\u3079\u308b\u4f1a C++20\u3092\u76f8\u8ac7\u3057\u306a\u304c\u3089\u8abf\u3079\u307e\u3059\u3002 https://cpp20survey.connpass.com/ \u30a4\u30d9\u30f3\u30c8\u756a\u53f7 \u53c2\u52a0\u8005\u9593\u306e\u5171\u6709\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 #3 (2019-10-04) \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 #2 (2019-05-17) \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 #1 (2019-04-02) \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u30ad\u30e3\u30c7\u30a3\u682a\u5f0f\u4f1a\u793e C++ \u52c9\u5f37\u4f1a \u30ad\u30e3\u30c7\u30a3\u682a\u5f0f\u4f1a\u793e\u306f\u30c6\u30af\u30cb\u30ab\u30eb\u30a2\u30c9\u30d0\u30a4\u30b6\u30fc\u3068\u3057\u3066\u6c5f\u6dfb\u4eae\u6c0f\u3092\u8fce\u3048\u5165\u308c\u3001\u4eca\u5f8c\u9694\u9031\u3067C++\u306b\u307e\u3064\u308f\u308b\u52c9\u5f37\u4f1a\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\u57fa\u790e\u7684\u306a\u5185\u5bb9\u304b\u3089\u767a\u5c55\u7684\u306a\u5185\u5bb9\u307e\u3067\u3001\u5e45\u5e83\u304f\u30b7\u30ea\u30fc\u30ba\u958b\u50ac\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\u306e\u3067\u3001C++\u306e\u52c9\u5f37\u3092\u3057\u3066\u3044\u308b\u65b9\u3001\u6c5f\u6dfb\u4eae\u6c0f\u3084\u30ad\u30e3\u30c7\u30a3\u30e1\u30f3\u30d0\u30fc\u3068\u304a\u8a71\u3057\u305f\u3044\u65b9\u306a\u3069\u6c17\u8efd\u306b\u3044\u3089\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #caddicpp \u30a4\u30d9\u30f3\u30c8\u756a\u53f7 \u5185\u5bb9 \u30e0\u30fc\u30d3\u30fc #7 (2019-10-29) type erasure \u306e\u7d9a\u304d\u3068 expression templates #6 (2019-10-09) \u6d3e\u751f\u3068\u7d99\u627f\u3001Type Erasure #5 (2019-09-25) \u6a19\u6e96\u5909\u63db\u3001\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5b9f\u5f15\u6570\u63a8\u5b9a #4 (2019-09-11) C++ \u6a19\u6e96\u898f\u683c\u306e\u7528\u8a9e\u89e3\u8aac #3 (2019-08-30) \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 #2 (2019-08-21) \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u57fa\u790e #1 (2019-07-30) \u30dd\u30a4\u30f3\u30bf\u30fc\u306b\u3064\u3044\u3066 \u672d\u5e4c C++ \u52c9\u5f37\u4f1a Sapporo.cpp\u306e\u30e1\u30f3\u30d0\u30fc\u3067\u904b\u55b6\u3057\u3066\u3044\u308b\u3001\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u5b9f\u65bd\u3057\u3066\u3044\u308b\u3082\u304f\u3082\u304f\u4f1a\u3067\u3059\u3002\u52c9\u5f37\u4f1a\u3088\u308a\u3082\u9ad8\u983b\u5ea6\u306b\u6d3b\u52d5\u3092\u884c\u3046\u5834\u3068\u3057\u3066\u3001\u304a\u304a\u3080\u306d\u6bce\u90311\u56de\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3002 https://sapporocpp-mokumoku.connpass.com/ \u672d\u5e4cC++\u52c9\u5f37\u4f1a/\u3082\u304f\u3082\u304f\u4f1a \u5927\u962a C++ \u8aad\u66f8\u4f1a \u5927\u962a\u3067C++\u306b\u95a2\u3059\u308b\u3082\u306e\u3092\u8aad\u307f\u9032\u3081\u308b\u4f1a\u3067\u3059\u3002 \u8ab0\u304b\u304c\u767a\u8868\u3059\u308b\u3068\u3044\u3063\u305f\u30b9\u30bf\u30a4\u30eb\u3067\u306f\u306a\u304f\u3001\u307f\u3093\u306a\u3067\u308f\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3092\u8a71\u3057\u5408\u3063\u3066\u8aad\u3093\u3067\u3044\u304f\u30b9\u30bf\u30a4\u30eb\u306e\u4f1a\u3067\u3059\u3002 https://cpp-osaka.connpass.com/ Boost. \u52c9\u5f37\u4f1a Boost C++ Libraries\u3068\u3044\u3046\u3001C++\u306e\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u3001C++\u5168\u822c\u306e\u52c9\u5f37\u4f1a\u3067\u3059\u3002 Boost\u306b\u9650\u3089\u305a\u3001C++\u5168\u822c\u306e\u8a71\u3001Qt\u3084OpenCV\u306e\u3088\u3046\u306a\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u81ea\u5206\u304c\u4f5c\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d39\u4ecb\u3001\u305d\u306e\u4ed6C++\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u77e5\u3063\u3066\u304a\u3044\u3066\u3082\u3089\u3044\u305f\u3044\u3053\u3068\u306e\u7d39\u4ecb(\u30c7\u30fc\u30bf\u69cb\u9020\u3084\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u30a4\u30c7\u30a3\u30aa\u30e0\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8a2d\u8a08\u3084\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3001\u4ed6\u306e\u8a00\u8a9e\u3067\u306e\u8003\u3048\u65b9\u3084\u30a2\u30d7\u30ed\u30fc\u30c1)\u306a\u3069\u3001\u5e45\u5e83\u3044\u30c6\u30fc\u30de\u3092\u6271\u3063\u3066\u3044\u307e\u3059\u3002 https://boostjp.github.io/study_meeting.html \uff08\u6d3b\u52d5\u4f11\u6b62\uff09","title":"\u56fd\u5185\u306e\u52c9\u5f37\u4f1a"},{"location":"learn/studymeetings/#_1","text":"\u56fd\u5185\u3067\u958b\u50ac\u3055\u308c\u3066\u3044\u308b C++ \u95a2\u9023\u306e\u52c9\u5f37\u4f1a\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002","title":"\u56fd\u5185\u306e\u52c9\u5f37\u4f1a"},{"location":"learn/studymeetings/#c-mix","text":"\u300cC++ MIX\u300d\u306f\u3001C++\u5468\u8fba\u306e\u52c9\u5f37\u4f1a\u3067\u3059\u3002 \u6a19\u6e96C++\u3001\u6a19\u6e96\u5916\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30c4\u30fc\u30eb\u306e\u7d39\u4ecb\u306f\u3082\u3061\u308d\u3093\u3067\u3059\u304c\u3001Rust\u3084Go\u306a\u3069\u306e\u5f8c\u7d99\u8a00\u8a9e\u306e\u3088\u3046\u306b\u3001C++\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u77e5\u3063\u3066\u3082\u3089\u3044\u305f\u3044\u8a71\u3092\u5e83\u304f\u6271\u3063\u3066\u3044\u304d\u307e\u3059\u3002 \u3053\u306e\u52c9\u5f37\u4f1a\u3067\u306f\u3001\u767a\u8868\u8005\u306b\u3088\u308b\u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3060\u3051\u3067\u306a\u304f\u3001\u53c2\u52a0\u8005\u306e\u307f\u306a\u3055\u3093\u3068\u8b70\u8ad6\u3059\u308b\u6642\u9593\u3082\u4eca\u5f8c\u7528\u610f\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002 https://cppmix.connpass.com/ Youtube \u30c1\u30e3\u30f3\u30cd\u30eb Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #cppmix","title":"C++ MIX"},{"location":"learn/studymeetings/#c-mix-6-2019-11-20","text":"\u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e Akira Takahashi std::format - C++20 \u6642\u4ee3\u306e\u4fbf\u5229\u306a\u6587\u5b57\u5217\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 Ryo Suzuki \u30a4\u30f3\u30bf\u30fc\u30f3\u30b7\u30c3\u30d7\u3067C++\u3092\u4f7f\u7528\u3057\u305f\u30b2\u30fc\u30e0\u958b\u767a\u3092\u7d4c\u9a13\u3057\u305f\u8a71 \u304c\u3063\u3061\u3087 \u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u3044\u3058\u3081\u65b9 kaityo256 \u66f8\u7c4d\u300e\u72ec\u7fd2C++\u300f\u306e\u6539\u8a02\u306b\u3064\u3044\u3066 (\u4eee) Flast \u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3 (\u5168\u54e1\u53c2\u52a0)","title":"C++ MIX #6 (2019-11-20)"},{"location":"learn/studymeetings/#c-mix-5-2019-09-04","text":"\u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e Shintaro Okada \u81ea\u4f5cOS\u5411\u3051\u306blibc++\u3092\u30d3\u30eb\u30c9\u3059\u308b\u65b9\u6cd5 uchan C++ \u88fd\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea Skia \u306e\u7d39\u4ecb \u6c34\u97f3\u3074\u306d Unreal C++ \u3092\u59cb\u3081\u3066\u307f\u305f\u6642\u306e\u8e93\u3044\u305fTips akoto C++20\u30b9\u30c6\u30fc\u30bf\u30b9 Akira Takahashi 20\u5206\u304f\u3089\u3044\u3067\u308f\u304b\u3063\u305f\u6c17\u5206\u306b\u306a\u308c\u308bC++20\u30b3\u30eb\u30fc\u30c1\u30f3 yohhoy \u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3 (\u5168\u54e1\u53c2\u52a0)","title":"C++ MIX #5 (2019-09-04)"},{"location":"learn/studymeetings/#c-mix-4-2019-06-26","text":"\u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e Shintaro Okada C++ \u3067\u3082 Result \u3057\u305f\u3044 \u3044\u306a\u3080\u306e\u307f\u305f\u307e (@mitama_rs) \u4e16\u754c\u3092\u5275\u9020\u3059\u308b OSS \u958b\u767a\u3092\u59cb\u3081\u305f\u8a71 \u304c\u3063\u3061\u3087 C++ \u3067 HTTP Proxy \u6771\u5c71\u88d5\u5fb3 \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u6982\u8981 Tetsuro Matsumura","title":"C++ MIX #4 (2019-06-26)"},{"location":"learn/studymeetings/#c-mix-3-2019-04-17","text":"\u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e Shintaro Okada Clang\u306breflection/metaclass\u63d0\u6848\u3063\u307d\u3044\u3082\u306e\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u8a71 Iwahori Kodai C++ \u60c5\u5831\u30b5\u30a4\u30c8\u300cC++ \u306e\u6b69\u304d\u65b9 | cppmap\u300d\u3092\u4f5c\u3063\u3066\u3044\u308b\u8a71 Ryo Suzuki \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u3068Modern C++ \u5b89\u9054\u4fca\u8cb4 C++20\u306e\u6982\u8981 #1 \u8a00\u8a9e\u6a5f\u80fd\u7de8 Akira Takahash","title":"C++ MIX #3 (2019-04-17)"},{"location":"learn/studymeetings/#c-mix-2-2019-02-20","text":"\u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e Akira Takahashi iOS\u30a2\u30d7\u30ea\u300e\u30d1\u30ba\u30e2\u30ca\u300f\u306e\u3072\u307f\u3064 Nobuyuki Nishiyama Qt\u00d7Reactive Extensions Tetsuro Matsumura C++\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u300cpoac\u300d\u3092\u958b\u767a\u3057\u305f\u8a71 Ken Matsui \u96d1\u8ac7\u30bf\u30a4\u30e0","title":"C++ MIX #2 (2019-02-20)"},{"location":"learn/studymeetings/#c-mix-1-2018-12-06","text":"\u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 \u30e0\u30fc\u30d3\u30fc \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u3001\u6700\u8fd1\u306eC++\u306e\u8aac\u660e Akira Takahashi Menoh\u306b\u304a\u3051\u308b C++\u5b9f\u88c5 / C API / C++API okdshin Undefined Behavior\u306b\u5bfe\u3059\u308b\u9632\u885b\u8853 \u3044\u306a\u3080\u306e\u307f\u305f\u307e C++ \u3092\u6559\u3048\u308b \uff5e\u65e9\u7a32\u7530\u5927\u5b66\u306e\u5c0f\u4e2d\u9ad8\u751f\u5411\u3051\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6559\u5ba4\u306b\u304a\u3051\u308b\u4e8b\u4f8b\u7d39\u4ecb\uff5e Reputeless \u907f\u3051\u3088\u3046 memset \u306e\u4e71\u7528 agate-pris","title":"C++ MIX #1 (2018-12-06)"},{"location":"learn/studymeetings/#featurecpp","text":"C++17\u306e\u65b0\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3001\u5fa9\u7fd2\uff06\u4e88\u7fd2\u3092\u3057\u307e\u305b\u3093\u304b\uff1f \u30fbC++17\u304c\u51fa\u305f\u307f\u305f\u3044\u3060\u3051\u3069\u3001\u4f55\u304c\u65b0\u3057\u304f\u306a\u3063\u305f\u306e\u304c\u5168\u7136\u8ffd\u3048\u3066\u306a\u3044\u2026\uff1e\uff1c \u30fb\u8272\u3093\u306a\u6a5f\u80fd\u304c\u5165\u3063\u3066\u308b\u307f\u305f\u3044\u3060\u3051\u3069\u3001\u672c\u5f53\u306b\u6291\u3048\u3068\u304f\u3079\u304d\u6a5f\u80fd\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3063\u3066\u4f55\u306a\u3093\u3060\u308d\uff1f \u30fb\u4ed6\u306e\u4eba\u304c\u3069\u3046\u8003\u3048\u3066\u3044\u308b\u304b\u77e5\u308a\u305f\u3044\u2026 \u3053\u3093\u306a\u4eba\u306f\u3001\u4e00\u5ea6\u3001\u3053\u306e\u96c6\u307e\u308a\u306b\u53c2\u52a0\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044 \u8cea\u7591\u5fdc\u7b54\u30fb\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u5f62\u5f0f\u3067\u9032\u3081\u308b\u4e88\u5b9a\u3067\u3059\u304c\u3001\u7121\u8a00\u306e\u65b9\u3082OK\u3067\u3059 \u7279\u306b\u66f8\u7c4d\u306a\u3069\u3092\u6301\u53c2\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093 \u30cd\u30bf\u632f\u308a\u3068\u3057\u3066 \u9032\u884c\u5f79\u304c\u3001C++17\u306e\u57fa\u790e\u7684\u306a\u6a5f\u80fd\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8a71\u984c\u3092\u3001\u53c2\u52a0\u8005\u306b\u63d0\u4f9b\u3057\u307e\u3059 \u307e\u3068\u3081 http://feature-cpp.github.io/feature.cpp/ https://ebisu-effective-modern-cpp.connpass.com/ Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #nakamecpp \u30a4\u30d9\u30f3\u30c8\u756a\u53f7 \u30bf\u30a4\u30c8\u30eb \u767a\u8868\u8005 Vol. 18 (2019-03-28) C++17\u306e\u65b0\u6a5f\u80fd \u843d\u7a42\u62fe\u3044 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 17 (2019-03-14) \u843d\u3061\u7a42\u62fe\u3044:\u30e1\u30bf\u95a2\u6570\u7de8 \u3044\u306a\u3080\u306e\u307f\u305f\u307e Vol. 16 (2019-02-21) std::invoke \u306e\u7d39\u4ecb Flast Vol. 15 (2019-01-31) - Akira Takahashi Vol. 14 (2019-01-17) string_view \u3044\u306a\u3080\u306e\u307f\u305f\u307e Vol. 13 (2018-12-13) C++17\u306e\u65b0\u6a5f\u80fd optional\u7de8 , std::optional\u306e\u4f7f\u3044\u65b9 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3, \u9065\u4f50\u4fdd, \u3044\u306a\u3080\u306e\u307f\u305f\u307e Vol. 12 (2018-11-22) C++17\u306e\u65b0\u6a5f\u80fd optional\u7de8 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 11 (2018-11-08) - \u897f\u5c71 \u4fe1\u884c Vol. 10 (2018-10-18) C++17 std::any\u306b\u3064\u3044\u3066 \u897f\u5c71 \u4fe1\u884c Vol. 9 (2018-10-04) C++17\u306e\u65b0\u6a5f\u80fd \u30a2\u30ed\u30b1\u30fc\u30bf\u7de8 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 8 (2018-09-13) shared_mutex \u4ed6 yoh Vol. 7 (2018-08-23) C++17\u306e\u65b0\u6a5f\u80fd (\u975e\u9806\u5e8f)\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u7de8 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 6 (2018-08-09) \u984c\u540d\u306e\u306a\u3044\u30b9\u30e9\u30a4\u30c921 Flast Vol. 5 (2018-02-14) \u4e26\u5217(parallel)\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 , std::invoke\u3068\u304bstd::result_of\u3068\u304b herumi Flast Vol. 4 (2018-02-01) C++17\u6982\u7565 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 herumi Vol. 3 (2018-01-11) C++14 \u3059\u3054\u30fc\u3044\uff01\u305f\u30fc\u306e\u3057\u30fc\uff01\uff01\uff01 C++14\u30e9\u30a4\u30d6\u30e9\u30ea\u7de8 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 2 (2017-12-14) (Vol. 1 \u3068\u540c\u3058) \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3 Vol. 1 (2017-11-29) C++14 \u3059\u3054\u30fc\u3044\uff01\u305f\u30fc\u306e\u3057\u30fc\uff01\uff01\uff01 C++14\u8a00\u8a9e\u7de8 \u9ce5\u982d\u304b\u308a\u3084\u30de\u30f3","title":"feature.cpp"},{"location":"learn/studymeetings/#c20","text":"C++20\u3092\u76f8\u8ac7\u3057\u306a\u304c\u3089\u8abf\u3079\u307e\u3059\u3002 https://cpp20survey.connpass.com/ \u30a4\u30d9\u30f3\u30c8\u756a\u53f7 \u53c2\u52a0\u8005\u9593\u306e\u5171\u6709\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 #3 (2019-10-04) \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 #2 (2019-05-17) \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 #1 (2019-04-02) \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","title":"C++20 \u3092\u76f8\u8ac7\u3057\u306a\u304c\u3089\u8abf\u3079\u308b\u4f1a"},{"location":"learn/studymeetings/#c","text":"\u30ad\u30e3\u30c7\u30a3\u682a\u5f0f\u4f1a\u793e\u306f\u30c6\u30af\u30cb\u30ab\u30eb\u30a2\u30c9\u30d0\u30a4\u30b6\u30fc\u3068\u3057\u3066\u6c5f\u6dfb\u4eae\u6c0f\u3092\u8fce\u3048\u5165\u308c\u3001\u4eca\u5f8c\u9694\u9031\u3067C++\u306b\u307e\u3064\u308f\u308b\u52c9\u5f37\u4f1a\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\u57fa\u790e\u7684\u306a\u5185\u5bb9\u304b\u3089\u767a\u5c55\u7684\u306a\u5185\u5bb9\u307e\u3067\u3001\u5e45\u5e83\u304f\u30b7\u30ea\u30fc\u30ba\u958b\u50ac\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\u306e\u3067\u3001C++\u306e\u52c9\u5f37\u3092\u3057\u3066\u3044\u308b\u65b9\u3001\u6c5f\u6dfb\u4eae\u6c0f\u3084\u30ad\u30e3\u30c7\u30a3\u30e1\u30f3\u30d0\u30fc\u3068\u304a\u8a71\u3057\u305f\u3044\u65b9\u306a\u3069\u6c17\u8efd\u306b\u3044\u3089\u3057\u3066\u304f\u3060\u3055\u3044\u3002 Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #caddicpp \u30a4\u30d9\u30f3\u30c8\u756a\u53f7 \u5185\u5bb9 \u30e0\u30fc\u30d3\u30fc #7 (2019-10-29) type erasure \u306e\u7d9a\u304d\u3068 expression templates #6 (2019-10-09) \u6d3e\u751f\u3068\u7d99\u627f\u3001Type Erasure #5 (2019-09-25) \u6a19\u6e96\u5909\u63db\u3001\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5b9f\u5f15\u6570\u63a8\u5b9a #4 (2019-09-11) C++ \u6a19\u6e96\u898f\u683c\u306e\u7528\u8a9e\u89e3\u8aac #3 (2019-08-30) \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 #2 (2019-08-21) \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u57fa\u790e #1 (2019-07-30) \u30dd\u30a4\u30f3\u30bf\u30fc\u306b\u3064\u3044\u3066","title":"\u30ad\u30e3\u30c7\u30a3\u682a\u5f0f\u4f1a\u793e C++ \u52c9\u5f37\u4f1a"},{"location":"learn/studymeetings/#c_1","text":"Sapporo.cpp\u306e\u30e1\u30f3\u30d0\u30fc\u3067\u904b\u55b6\u3057\u3066\u3044\u308b\u3001\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u5b9f\u65bd\u3057\u3066\u3044\u308b\u3082\u304f\u3082\u304f\u4f1a\u3067\u3059\u3002\u52c9\u5f37\u4f1a\u3088\u308a\u3082\u9ad8\u983b\u5ea6\u306b\u6d3b\u52d5\u3092\u884c\u3046\u5834\u3068\u3057\u3066\u3001\u304a\u304a\u3080\u306d\u6bce\u90311\u56de\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3002 https://sapporocpp-mokumoku.connpass.com/ \u672d\u5e4cC++\u52c9\u5f37\u4f1a/\u3082\u304f\u3082\u304f\u4f1a","title":"\u672d\u5e4c C++ \u52c9\u5f37\u4f1a"},{"location":"learn/studymeetings/#c_2","text":"\u5927\u962a\u3067C++\u306b\u95a2\u3059\u308b\u3082\u306e\u3092\u8aad\u307f\u9032\u3081\u308b\u4f1a\u3067\u3059\u3002 \u8ab0\u304b\u304c\u767a\u8868\u3059\u308b\u3068\u3044\u3063\u305f\u30b9\u30bf\u30a4\u30eb\u3067\u306f\u306a\u304f\u3001\u307f\u3093\u306a\u3067\u308f\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3092\u8a71\u3057\u5408\u3063\u3066\u8aad\u3093\u3067\u3044\u304f\u30b9\u30bf\u30a4\u30eb\u306e\u4f1a\u3067\u3059\u3002 https://cpp-osaka.connpass.com/","title":"\u5927\u962a C++ \u8aad\u66f8\u4f1a"},{"location":"learn/studymeetings/#boost","text":"Boost C++ Libraries\u3068\u3044\u3046\u3001C++\u306e\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u3001C++\u5168\u822c\u306e\u52c9\u5f37\u4f1a\u3067\u3059\u3002 Boost\u306b\u9650\u3089\u305a\u3001C++\u5168\u822c\u306e\u8a71\u3001Qt\u3084OpenCV\u306e\u3088\u3046\u306a\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u81ea\u5206\u304c\u4f5c\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d39\u4ecb\u3001\u305d\u306e\u4ed6C++\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u77e5\u3063\u3066\u304a\u3044\u3066\u3082\u3089\u3044\u305f\u3044\u3053\u3068\u306e\u7d39\u4ecb(\u30c7\u30fc\u30bf\u69cb\u9020\u3084\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u30a4\u30c7\u30a3\u30aa\u30e0\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8a2d\u8a08\u3084\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3001\u4ed6\u306e\u8a00\u8a9e\u3067\u306e\u8003\u3048\u65b9\u3084\u30a2\u30d7\u30ed\u30fc\u30c1)\u306a\u3069\u3001\u5e45\u5e83\u3044\u30c6\u30fc\u30de\u3092\u6271\u3063\u3066\u3044\u307e\u3059\u3002 https://boostjp.github.io/study_meeting.html \uff08\u6d3b\u52d5\u4f11\u6b62\uff09","title":"Boost. \u52c9\u5f37\u4f1a"},{"location":"libraries/boost/","text":"Boost \u30d0\u30fc\u30b8\u30e7\u30f3 / \u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8 \u30ea\u30ea\u30fc\u30b9\u65e5 \u65b0\u3057\u304f\u8ffd\u52a0\u3055\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea 1.71.0 / \u65e5\u672c\u8a9e\u8a33 2019-08-19 Variant2 1.70.0 / \u65e5\u672c\u8a9e\u8a33 2019-04-12 Outcome , Histogram 1.69.0 / \u65e5\u672c\u8a9e\u8a33 2018-12-12 Safe Numerics 1.68.0 / \u65e5\u672c\u8a9e\u8a33 2018-08-09 YAP 1.67.0 / \u65e5\u672c\u8a9e\u8a33 2018-04-14 Contract , HOF 1.66.0 / \u65e5\u672c\u8a9e\u8a33 2017-12-18 Beast , CallableTraits , Mp11 1.65.1 / \u65e5\u672c\u8a9e\u8a33 2017-09-07 1.65.0 / \u65e5\u672c\u8a9e\u8a33 2017-08-21 PolyCollection , Stacktrace 1.64.0 / \u65e5\u672c\u8a9e\u8a33 2017-04-19 Process 1.63.0 / \u65e5\u672c\u8a9e\u8a33 2016-12-26 1.62.0 / \u65e5\u672c\u8a9e\u8a33 2016-09-28 Fiber , QVM 1.61.0 / \u65e5\u672c\u8a9e\u8a33 2016-05-13 Compute , DLL , Hana , Metaparse 1.60.0 / \u65e5\u672c\u8a9e\u8a33 2015-12-17 VMD 1.59.0 / \u65e5\u672c\u8a9e\u8a33 2015-08-13 Convert , Coroutine2 1.58.0 / \u65e5\u672c\u8a9e\u8a33 2015-04-17 Endian , Sort 1.57.0 / \u65e5\u672c\u8a9e\u8a33 2014-11-03 1.56.0 / \u65e5\u672c\u8a9e\u8a33 2014-08-07 Align , Type_Index 1.55.0 / \u65e5\u672c\u8a9e\u8a33 2013-11-11 Predef 1.54.0 / \u65e5\u672c\u8a9e\u8a33 2013-07-01 Log , TTI , Type Erasure 1.53.0 / \u65e5\u672c\u8a9e\u8a33 2013-02-04 Atomic , Coroutine , Lockfree , Multiprecision , Odeint 1.52.0 / \u65e5\u672c\u8a9e\u8a33 2012-11-05 1.51.0 / \u65e5\u672c\u8a9e\u8a33 2012-08-20 Context 1.50.0 / \u65e5\u672c\u8a9e\u8a33 2012-06-28 Algorithm , Functional/OverloadedFunction , LocalFunction , Utility/IdentityType 1.49.0 / \u65e5\u672c\u8a9e\u8a33 2012-02-24 Heap 1.48.0 / \u65e5\u672c\u8a9e\u8a33 2011-11-15 Container , Locale , Move 1.47.0 / \u65e5\u672c\u8a9e\u8a33 2011-07-11 Chrono , Geometry , Phoenix , Ratio 1.46.1 / \u65e5\u672c\u8a9e\u8a33 2011-03-12 1.46.0 / \u65e5\u672c\u8a9e\u8a33 2011-02-21 Icl 1.45.0 / \u65e5\u672c\u8a9e\u8a33 2010-11-19 1.44.0 2010-08-13 Meta State Machine , Polygon 1.43.0 2010-05-06 Functional/factory , Functional/forward 1.42.0 2010-02-02 Uuid 1.41.0 2009-11-17 Property Tree 1.40.0 2009-08-27 1.39.0 2009-05-02 Signals2 1.38.0 2009-02-08 Flyweight , ScopeExit , Swap 1.37.0 2008-11-03 Proto 1.36.0 2008-08-14 Accumulators , Exception , Units , Unordered 1.35.0 2008-03-29 Asio , Bimap , Circular Buffer , Function Types , Fusion , GIL , Interprocess , Intrusive , Math/Special Functions , Math/Statistical Distributions , MPI , System 1.34.1 2007-07-24 1.34.0 2007-05-12 Foreach , Statechart , TR1 (removed) , Typeof , Xpressive 1.33.1 2006-12-05 1.33.0 2005-08-11 Iostreams , Functional/Hash , Parameter , Pointer Container , Wave 1.32.0 2004-11-19 Assignment , Minmax , Multi-index Containers , Numeric Conversion , Program Options , Range , Serialization , String Algorithms , Tribool 1.31.0 2004-01-26 enable_if , Variant 1.30.2 2003-08-19 1.30.1 2003-08-04 1.30.0 2003-03-19 Filesystem , Optional , Interval , MPL , Spirit 1.29.0 2002-10-10 Date-Time , Dynamic Bitset , Format \u2026 \u2026 \u2026 \u53c2\u8003\u6587\u732e Boost Version History https://www.boost.org/users/history/","title":"Boost"},{"location":"libraries/boost/#boost","text":"\u30d0\u30fc\u30b8\u30e7\u30f3 / \u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8 \u30ea\u30ea\u30fc\u30b9\u65e5 \u65b0\u3057\u304f\u8ffd\u52a0\u3055\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea 1.71.0 / \u65e5\u672c\u8a9e\u8a33 2019-08-19 Variant2 1.70.0 / \u65e5\u672c\u8a9e\u8a33 2019-04-12 Outcome , Histogram 1.69.0 / \u65e5\u672c\u8a9e\u8a33 2018-12-12 Safe Numerics 1.68.0 / \u65e5\u672c\u8a9e\u8a33 2018-08-09 YAP 1.67.0 / \u65e5\u672c\u8a9e\u8a33 2018-04-14 Contract , HOF 1.66.0 / \u65e5\u672c\u8a9e\u8a33 2017-12-18 Beast , CallableTraits , Mp11 1.65.1 / \u65e5\u672c\u8a9e\u8a33 2017-09-07 1.65.0 / \u65e5\u672c\u8a9e\u8a33 2017-08-21 PolyCollection , Stacktrace 1.64.0 / \u65e5\u672c\u8a9e\u8a33 2017-04-19 Process 1.63.0 / \u65e5\u672c\u8a9e\u8a33 2016-12-26 1.62.0 / \u65e5\u672c\u8a9e\u8a33 2016-09-28 Fiber , QVM 1.61.0 / \u65e5\u672c\u8a9e\u8a33 2016-05-13 Compute , DLL , Hana , Metaparse 1.60.0 / \u65e5\u672c\u8a9e\u8a33 2015-12-17 VMD 1.59.0 / \u65e5\u672c\u8a9e\u8a33 2015-08-13 Convert , Coroutine2 1.58.0 / \u65e5\u672c\u8a9e\u8a33 2015-04-17 Endian , Sort 1.57.0 / \u65e5\u672c\u8a9e\u8a33 2014-11-03 1.56.0 / \u65e5\u672c\u8a9e\u8a33 2014-08-07 Align , Type_Index 1.55.0 / \u65e5\u672c\u8a9e\u8a33 2013-11-11 Predef 1.54.0 / \u65e5\u672c\u8a9e\u8a33 2013-07-01 Log , TTI , Type Erasure 1.53.0 / \u65e5\u672c\u8a9e\u8a33 2013-02-04 Atomic , Coroutine , Lockfree , Multiprecision , Odeint 1.52.0 / \u65e5\u672c\u8a9e\u8a33 2012-11-05 1.51.0 / \u65e5\u672c\u8a9e\u8a33 2012-08-20 Context 1.50.0 / \u65e5\u672c\u8a9e\u8a33 2012-06-28 Algorithm , Functional/OverloadedFunction , LocalFunction , Utility/IdentityType 1.49.0 / \u65e5\u672c\u8a9e\u8a33 2012-02-24 Heap 1.48.0 / \u65e5\u672c\u8a9e\u8a33 2011-11-15 Container , Locale , Move 1.47.0 / \u65e5\u672c\u8a9e\u8a33 2011-07-11 Chrono , Geometry , Phoenix , Ratio 1.46.1 / \u65e5\u672c\u8a9e\u8a33 2011-03-12 1.46.0 / \u65e5\u672c\u8a9e\u8a33 2011-02-21 Icl 1.45.0 / \u65e5\u672c\u8a9e\u8a33 2010-11-19 1.44.0 2010-08-13 Meta State Machine , Polygon 1.43.0 2010-05-06 Functional/factory , Functional/forward 1.42.0 2010-02-02 Uuid 1.41.0 2009-11-17 Property Tree 1.40.0 2009-08-27 1.39.0 2009-05-02 Signals2 1.38.0 2009-02-08 Flyweight , ScopeExit , Swap 1.37.0 2008-11-03 Proto 1.36.0 2008-08-14 Accumulators , Exception , Units , Unordered 1.35.0 2008-03-29 Asio , Bimap , Circular Buffer , Function Types , Fusion , GIL , Interprocess , Intrusive , Math/Special Functions , Math/Statistical Distributions , MPI , System 1.34.1 2007-07-24 1.34.0 2007-05-12 Foreach , Statechart , TR1 (removed) , Typeof , Xpressive 1.33.1 2006-12-05 1.33.0 2005-08-11 Iostreams , Functional/Hash , Parameter , Pointer Container , Wave 1.32.0 2004-11-19 Assignment , Minmax , Multi-index Containers , Numeric Conversion , Program Options , Range , Serialization , String Algorithms , Tribool 1.31.0 2004-01-26 enable_if , Variant 1.30.2 2003-08-19 1.30.1 2003-08-04 1.30.0 2003-03-19 Filesystem , Optional , Interval , MPL , Spirit 1.29.0 2002-10-10 Date-Time , Dynamic Bitset , Format \u2026 \u2026 \u2026","title":"Boost"},{"location":"libraries/boost/#_1","text":"Boost Version History https://www.boost.org/users/history/","title":"\u53c2\u8003\u6587\u732e"},{"location":"libraries/containers/","text":"\u30b3\u30f3\u30c6\u30ca \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb absl::flat_hash_map absl::node_hash_map boost::unordered_map eastl::hash_map emilib::HashMap folly::F14NodeMap folly::F14ValueMap google::dense_hash_map google::sparse_hash_map robin_hood::unordered_flat_map robin_hood::unordered_node_map ska::bytell_hash_map spp::sparse_hash_map tsl::hopscotch_map tsl::robin_map tsl::sparse_map","title":"\u30b3\u30f3\u30c6\u30ca"},{"location":"libraries/containers/#_1","text":"","title":"\u30b3\u30f3\u30c6\u30ca"},{"location":"libraries/containers/#_2","text":"absl::flat_hash_map absl::node_hash_map boost::unordered_map eastl::hash_map emilib::HashMap folly::F14NodeMap folly::F14ValueMap google::dense_hash_map google::sparse_hash_map robin_hood::unordered_flat_map robin_hood::unordered_node_map ska::bytell_hash_map spp::sparse_hash_map tsl::hopscotch_map tsl::robin_map tsl::sparse_map","title":"\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb"},{"location":"libraries/multi-threading/","text":"\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0 Cpp-Taskflow MIT C++17 \u4ee5\u4e0a\u3067\u30e2\u30c0\u30f3\u306a API \u3067\u30bf\u30b9\u30af\u30d5\u30ed\u30fc\u304c\u7d44\u3081\u308b work-stealing \u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u3088\u308b\u9ad8\u52b9\u7387\u306a\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0 chrome : // tracing \u3067\u5b9f\u884c\u72b6\u6cc1\u3092\u30e2\u30cb\u30bf\u3067\u304d\u308b \u30bf\u30b9\u30af\u30d5\u30ed\u30fc\u3092\u30b0\u30e9\u30d5\u51fa\u529b\u3067\u304d\u308b","title":"\u4e26\u884c\u30fb\u4e26\u5217"},{"location":"libraries/multi-threading/#_1","text":"Cpp-Taskflow MIT C++17 \u4ee5\u4e0a\u3067\u30e2\u30c0\u30f3\u306a API \u3067\u30bf\u30b9\u30af\u30d5\u30ed\u30fc\u304c\u7d44\u3081\u308b work-stealing \u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306b\u3088\u308b\u9ad8\u52b9\u7387\u306a\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0 chrome : // tracing \u3067\u5b9f\u884c\u72b6\u6cc1\u3092\u30e2\u30cb\u30bf\u3067\u304d\u308b \u30bf\u30b9\u30af\u30d5\u30ed\u30fc\u3092\u30b0\u30e9\u30d5\u51fa\u529b\u3067\u304d\u308b","title":"\u30de\u30eb\u30c1\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0"},{"location":"libraries/testing/","text":"\u5358\u4f53\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af googletest BSD 3-Clause Catch BSL 1.0 C++11 \u4ee5\u4e0a \u30b7\u30f3\u30b0\u30eb\u30d8\u30c3\u30c0\u3067\u5916\u90e8\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3057 \u7c21\u5358\u306b\u4f7f\u3044\u59cb\u3081\u3089\u308c\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 doctest MIT C++11 \u4ee5\u4e0a \u30b7\u30f3\u30b0\u30eb\u30d8\u30c3\u30c0\u3067\u5916\u90e8\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3057 \u30d8\u30c3\u30c0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u304c\u975e\u5e38\u306b\u77ed\u304f\uff08 \u30d9\u30f3\u30c1\u30de\u30fc\u30af \uff09\u3001\u30c6\u30b9\u30c8\u5b9f\u884c\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u901f\u304f\u56de\u305b\u308b\u306e\u304c\u58f2\u308a","title":"\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af"},{"location":"libraries/testing/#_1","text":"googletest BSD 3-Clause Catch BSL 1.0 C++11 \u4ee5\u4e0a \u30b7\u30f3\u30b0\u30eb\u30d8\u30c3\u30c0\u3067\u5916\u90e8\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3057 \u7c21\u5358\u306b\u4f7f\u3044\u59cb\u3081\u3089\u308c\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 doctest MIT C++11 \u4ee5\u4e0a \u30b7\u30f3\u30b0\u30eb\u30d8\u30c3\u30c0\u3067\u5916\u90e8\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3057 \u30d8\u30c3\u30c0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u304c\u975e\u5e38\u306b\u77ed\u304f\uff08 \u30d9\u30f3\u30c1\u30de\u30fc\u30af \uff09\u3001\u30c6\u30b9\u30c8\u5b9f\u884c\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u901f\u304f\u56de\u305b\u308b\u306e\u304c\u58f2\u308a","title":"\u5358\u4f53\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af"},{"location":"libraries/text-data/","text":"\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf JSON ArduinoJson MIT JsonCpp MIT / Public domain dropbox/json11 MIT hjiang/jsonxx MIT nlohmann/json MIT PicoJSON BSD 2-Clause RapidJSON MIT sajson MIT simdjson Apache License 2.0 \u30d9\u30f3\u30c1\u30de\u30fc\u30af Native JSON Benchmark TOML cpptoml MIT toml11 MIT XML Boost.PropertyTree BSL 1.0 \u5185\u90e8\u5b9f\u88c5\u306b RapidXml \u3092\u4f7f\u7528 pugixml MIT RapidXml BSL 1.0 TinyXML-2 zlib CSV Boost.Tokenizer BSL 1.0 Fast C++ CSV Parser BSD 3-Clause Vince's CSV Parser MIT INI Boost.PropertyTree BSL 1.0 inicpp MIT .ini parser MIT YAML yaml-cpp MIT","title":"\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf"},{"location":"libraries/text-data/#_1","text":"","title":"\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf"},{"location":"libraries/text-data/#json","text":"ArduinoJson MIT JsonCpp MIT / Public domain dropbox/json11 MIT hjiang/jsonxx MIT nlohmann/json MIT PicoJSON BSD 2-Clause RapidJSON MIT sajson MIT simdjson Apache License 2.0","title":"JSON"},{"location":"libraries/text-data/#_2","text":"Native JSON Benchmark","title":"\u30d9\u30f3\u30c1\u30de\u30fc\u30af"},{"location":"libraries/text-data/#toml","text":"cpptoml MIT toml11 MIT","title":"TOML"},{"location":"libraries/text-data/#xml","text":"Boost.PropertyTree BSL 1.0 \u5185\u90e8\u5b9f\u88c5\u306b RapidXml \u3092\u4f7f\u7528 pugixml MIT RapidXml BSL 1.0 TinyXML-2 zlib","title":"XML"},{"location":"libraries/text-data/#csv","text":"Boost.Tokenizer BSL 1.0 Fast C++ CSV Parser BSD 3-Clause Vince's CSV Parser MIT","title":"CSV"},{"location":"libraries/text-data/#ini","text":"Boost.PropertyTree BSL 1.0 inicpp MIT .ini parser MIT","title":"INI"},{"location":"libraries/text-data/#yaml","text":"yaml-cpp MIT","title":"YAML"},{"location":"standardization/cpp20/","text":"C++20 \u306e\u65b0\u6a5f\u80fd C++20 \u306e\u5909\u66f4\u3059\u3079\u3066\u3092\u30ab\u30d0\u30fc\u3059\u308b\u305f\u3081\u306b\u3001\u9805\u76ee\u8ffd\u52a0\u30fb\u57f7\u7b46\u4f5c\u696d\u4e2d\u3067\u3059\uff08\u5b8c\u6210\u5ea6 \u7d04 25%\uff09 \u8a00\u8a9e\u6a5f\u80fd \u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u53ef\u80fd\u306b (P0683R1) \u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u304a\u3051\u308b\u30d3\u30c3\u30c8\u5e45\u306e\u6307\u5b9a\u306b\u7d9a\u3044\u3066\u3001 = \u6f14\u7b97\u5b50\u307e\u305f\u306f {} \u521d\u671f\u5316\u5b50\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u5f0f\u3092\u8a18\u8ff0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> enum class Terrain { Open , Forest , Hill , Mountain , Desert , Tundra , River , Ocean }; struct Tile { unsigned int height : 4 = 1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092 1 \u306b Terrain terrain : 3 = Terrain :: Open ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u660e\u793a\u7684\u306b Terrain::Open \u306b bool passable : 1 = true ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092 true \u306b }; int main () { std :: cout << std :: boolalpha ; Tile tile1 ; std :: cout << tile1 . height << \", \" << static_cast < int > ( tile1 . terrain ) << \", \" << tile1 . passable << '\\n' ; Tile tile2 { 15 , Terrain :: Mountain , false }; std :: cout << tile2 . height << \", \" << static_cast < int > ( tile2 . terrain ) << \", \" << tile2 . passable << '\\n' ; } 1 , 0 , true 15 , 3 , false \u30e1\u30f3\u30d0\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50\u306e\u4ed5\u69d8\u3092\u4e00\u8cab\u6027\u306e\u305f\u3081\u306b\u4fee\u6b63 (P0704R1) C++17 \u307e\u3067\u306e\u30e1\u30f3\u30d0\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50 . * \u306f\u300c\u53f3\u8fba\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3001\u5de6\u8fba\u5024\u53c2\u7167\u4fee\u98fe\u3055\u308c\u305f\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u4f7f\u3046\u3053\u3068\u306f\u4e0d\u9069\u683c\u300d\u3068\u3044\u3046\u898f\u683c\u6587\u9762\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u305f\u3081\u3001\u540c\u3058\u610f\u5473\u3092\u3082\u3064\u6b21\u306e 2 \u3064\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5f8c\u8005\u3060\u3051\u4e0d\u9069\u683c\u3068\u3055\u308c\u3001\u4e00\u8cab\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002 #include <iostream> #include <string> struct Text { std :: string m_data ; const std :: string & get () const & { return m_data ; } }; int main () { std :: cout << Text { \"Hello\" }. get () << '\\n' ; // OK std :: cout << ( Text { \"Hello\" }. *& Text :: get )() << '\\n' ; // C++17 \u307e\u3067\u306f\u4e0d\u9069\u683c\u3001C++20 \u304b\u3089 OK } C++20 \u3067\u306f\u300c\u53f3\u8fba\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3001\u5de6\u8fba\u5024\u53c2\u7167\u4fee\u98fe\u3055\u308c\u305f \"\u975e const\" \u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u4f7f\u3046\u3053\u3068\u306f\u4e0d\u9069\u683c\u300d\u3068\u6587\u9762\u3092\u4fee\u6b63\u3057\u3001\u5f8c\u8005\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u7b26\u53f7\u4ed8\u304d\u6574\u6570\u578b\u306e\u8ca0\u6570\u8868\u73fe\u3092 2 \u306e\u88dc\u6570\u3068\u898f\u5b9a (P1236R1) \u307b\u307c\u3059\u3079\u3066\u306e\u73fe\u4ee3\u7684\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u3001\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u578b\u306e\u8ca0\u6570\u306f 2 \u306e\u88dc\u6570\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001C++ \u3067\u306f\u8ca0\u6570\u306e\u8868\u73fe\u65b9\u6cd5\u306b\u3064\u3044\u3066\u898f\u683c\u3067\u5b9a\u3081\u3066\u3044\u306a\u304b\u3063\u305f\u305f\u3081\u3001\uff08\u73fe\u5b9f\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\uff092 \u306e\u88dc\u6570\u4ee5\u5916\u3067\u8ca0\u6570\u8868\u73fe\u3092\u5b9f\u88c5\u3059\u308b\u4f59\u5730\u3082\u6b8b\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002C++20 \u304b\u3089\u306f 2 \u306e\u88dc\u6570\u306e\u307f\u3092\u8a31\u53ef\u3059\u308b\u3088\u3046\u898f\u683c\u6587\u8a00\u304c\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002 \u8fd1\u5e74\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067 2 \u306e\u88dc\u6570\u4ee5\u5916\u3092\u4f7f\u3046\u4f8b\u306f\u30011 \u306e\u88dc\u6570\u3092\u4f7f\u3046 Unisys 2200 \u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u904e\u53bb\u306b\u306f\u7b26\u53f7\u3068\u7d76\u5bfe\u5024\u3067\u8868\u73fe\u3059\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3082\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306f\u30e2\u30c0\u30f3\u306a C++ \u3092\u958b\u767a\u74b0\u5883\u3068\u3057\u3066\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u898f\u683c\u5909\u66f4\u306b\u3088\u308b\u5f71\u97ff\u306f\u7121\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002 \uff08\u53c2\u8003\uff09\u7b26\u53f7\u4ed8\u304d 8-bit \u6574\u6570\u306e 2 \u9032\u8868\u73fe 10 \u9032\u8868\u73fe 2 \u306e\u88dc\u6570 1 \u306e\u88dc\u6570 \u7b26\u53f7\u3068\u7d76\u5bfe\u5024 127 01111111 01111111 01111111 126 01111110 01111110 01111110 125 01111101 01111101 01111101 2 00000010 00000010 00000010 1 00000001 00000001 00000001 0 00000000 00000000 00000000 -0 11111111 10000000 -1 11111111 11111110 10000001 -2 11111110 11111101 10000010 -126 10000010 10000001 11111110 -127 10000001 10000000 11111111 -128 10000000 \u30e1\u30f3\u30d0\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7a7a\u306e\u30af\u30e9\u30b9\u306e\u5834\u5408\u306b\u30e1\u30e2\u30ea\u6d88\u8cbb\u3092 0 \u306b\u3067\u304d\u308b [ [no_unique_address ] ] \u5c5e\u6027\u3092\u8ffd\u52a0 (P0840R2) \u30a2\u30ed\u30b1\u30fc\u30bf\u306a\u3069\u3092\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3068\u3057\u3066\u4fdd\u6301\u3059\u308b\u3068\u304d\u3001\u305d\u308c\u304c\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306a\u7a7a\u306e\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u4e00\u610f\u306b\u7528\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u305f\u3081\u3001\u30b5\u30a4\u30ba\u3092 0 \u306b\u3067\u304d\u305a\u30e1\u30e2\u30ea\u6d88\u8cbb\u304c\u7121\u99c4\u306b\u5897\u3048\u3066\u3057\u307e\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u3002 #include <iostream> struct Empty {}; struct X { int i ; Empty e ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 \u3088\u308a\u5927\u304d\u3044 } \u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u300c\u7a7a\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306f\u6700\u9069\u5316\u306b\u3088\u3063\u3066\u30b5\u30a4\u30ba 0 \u306b\u3057\u3066\u3088\u3044\u300d\u3068\u3044\u3046\u4ed5\u69d8\u3092\u5229\u7528\u3057\u305f Empty Base Optimization (EBO) \u3068\u3044\u3046\u30c6\u30af\u30cb\u30c3\u30af\u304c\u3042\u308a\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3082\u3000 std :: unique_ptr \u3084 std :: shared_ptr , std :: vector \u306a\u3069\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 #include <iostream> struct Empty {}; struct X : public Empty { int i ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 } \u3057\u304b\u3057\u3001\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u3067\u7d99\u627f\u306b\u3088\u308b EBO \u3092\u5b9f\u88c5\u3059\u308b\u3068\u30b3\u30fc\u30c9\u304c\u8907\u96d1\u306b\u306a\u308b\u3068\u3044\u3046\u6b20\u70b9\u304c\u3042\u308a\u307e\u3057\u305f\u3002C++20 \u3067\u306f\u30e1\u30f3\u30d0\u306e\u5ba3\u8a00\u306b [ [no_unique_address ] ] \u5c5e\u6027\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u7d99\u627f\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30e9\u304c EBO \u3068\u540c\u3058\u3088\u3046\u306a\u6700\u9069\u5316\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u5f93\u6765\u306e\u7d99\u627f\u306b\u3088\u308b EBO \u3092\u4f7f\u3063\u3066\u3044\u305f\u30b3\u30fc\u30c9\u3092\u3001\u3088\u308a\u5358\u7d14\u306a\u30b3\u30fc\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002 #include <iostream> struct Empty {}; struct X { int i ; [[ no_unique_address ]] Empty e ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 } \u578b\u540d\u3067\u3042\u308b\u3053\u3068\u304c\u660e\u3089\u304b\u306a\u6587\u8108\u3067 typename \u3092\u7701\u7565\u53ef\u80fd\u306b (P0634R3) C++17 \u3067\u4f9d\u5b58\u540d\u304c\u578b\u3067\u3042\u308b\u5834\u5408\u306b typename \u3092\u4ed8\u3051\u306a\u3044\u306e\u306f\u3001\u6d3e\u751f\u30af\u30e9\u30b9\u5b9a\u7fa9\u6642\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a\u3068\u3001\u521d\u671f\u5316\u5b50\u30ea\u30b9\u30c8\u3067\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a\u306e\u307f\u3067\u3057\u305f\uff08\u53b3\u5bc6\u306b\u306f\u3053\u306e 2 \u3064\u306b\u306f typename \u3092\u4ed8\u3051\u3089\u308c\u307e\u305b\u3093\uff09\u3002C++20 \u3067\u306f\u3001\u578b\u540d\u3057\u304b\u4f7f\u3048\u306a\u3044\u3055\u3089\u306b\u3044\u304f\u3064\u304b\u306e\u6587\u8108\u3067 typename \u304c\u7701\u7565\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u5de6\u53f3\u30bf\u30d6\u3067\u6bd4\u8f03\u3067\u304d\u307e\u3059\u3002 C++17 #include <vector> #include <string> template < class T , class Alloc = typename T :: allocator_type > struct S : T :: value_type // \u6d3e\u751f\u30af\u30e9\u30b9\u5b9a\u7fa9\u6642\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a { using value_type = typename T :: value_type ; S () : T :: value_type () {} // \u521d\u671f\u5316\u5b50\u30ea\u30b9\u30c8\u3067\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a typename T :: size_type max_size () const ; auto data () -> typename T :: pointer ; auto min_size () const { return static_cast < typename T :: size_type > ( 0 ); } }; template < class T > typename T :: size_type MaxSize (); int main () { S < std :: vector < std :: string >> s ; } C++20 #include <vector> #include <string> template < class T , class Alloc = T :: allocator_type > // OK struct S : T :: value_type // \u6d3e\u751f\u30af\u30e9\u30b9\u5b9a\u7fa9\u6642\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a { using value_type = T :: value_type ; // OK S () : T :: value_type () {} // \u521d\u671f\u5316\u5b50\u30ea\u30b9\u30c8\u3067\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a T :: size_type max_size () const ; // OK auto data () -> T :: pointer ; // OK auto min_size () const { return static_cast < T :: size_type > ( 0 ); // OK } }; template < class T > T :: size_type MaxSize (); // OK int main () { S < std :: vector < std :: string >> s ; } \u5b9a\u6570\u5f0f\u3067\u306e\u4eee\u60f3\u95a2\u6570\u547c\u3073\u51fa\u3057\u304c\u53ef\u80fd\u306b (P1064R0) \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u5b9a\u53ef\u80fd\u3067\u3042\u308c\u3070\u3001\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3092\u901a\u3057\u305f\u4eee\u60f3\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3092 constexpr \u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 constexpr \u4fee\u98fe\u3055\u308c\u305f\u4eee\u60f3\u95a2\u6570\u3092\u975e constexpr \u95a2\u6570\u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3084\u3001\u305d\u306e\u9006\u3082\u53ef\u80fd\u3067\u3059\u3002 struct Cpp { virtual int version () const = 0 ; }; struct Cpp17 : Cpp { constexpr int version () const override { return 17 ; } }; struct Cpp20 : Cpp { constexpr int version () const override { return 20 ; } }; constexpr int GetVersion ( const Cpp & a ) { return a . version (); } int main () { constexpr Cpp17 cpp17 ; constexpr Cpp20 cpp20 ; static_assert ( GetVersion ( cpp17 ) == 17 ); static_assert ( GetVersion ( cpp20 ) == 20 ); } type_id \u3068 dynamic_cast \u304c constexpr \u306b (P1327R1) dynamic_cast \u3068 type_id \u304c\u3001\u4f8b\u5916\u3092\u6295\u3052\u308b\u30b1\u30fc\u30b9\u3092\u9664\u3044\u3066 constexpr \u306b\u306a\u308a\u307e\u3059\u3002 #include <typeinfo> struct Cpp { virtual int version () const = 0 ; }; struct Cpp17 : Cpp { constexpr int version () const override { return 17 ; } }; struct Cpp20 : Cpp { constexpr int version () const override { return 20 ; } }; int main () { constexpr static Cpp17 cpp17 ; constexpr const Cpp * pCpp = & cpp17 ; constexpr auto & cpptype = typeid ( * pCpp ); constexpr const Cpp & refCpp = cpp17 ; constexpr const Cpp17 & redCpp2 = dynamic_cast < const Cpp17 &> ( refCpp ); } \u6b21\u306e\u3088\u3046\u306b\u4f8b\u5916\u3092\u6295\u3052\u308b\u30b1\u30fc\u30b9\u3067\u306f constexpr \u306b\u3067\u304d\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 #include <typeinfo> struct Cpp { virtual int version () const = 0 ; }; struct Cpp17 : Cpp { constexpr int version () const override { return 17 ; } }; struct Cpp20 : Cpp { constexpr int version () const override { return 20 ; } }; int main () { constexpr Cpp * pCpp = nullptr ; constexpr auto & cpptype = typeid ( * pCpp ); //\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc: \u4f8b\u5916 std::bad_typeid \u3092\u6295\u3052\u308b\u305f\u3081 constexpr \u4e0d\u53ef constexpr static Cpp17 cpp17 ; constexpr const Cpp & refCpp = cpp17 ; constexpr const Cpp20 & redCpp2 = dynamic_cast < const Cpp20 &> ( refCpp ); // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc: \u4f8b\u5916 std::bad_cast \u3092\u6295\u3052\u308b\u305f\u3081 constexpr \u4e0d\u53ef } \u5b9a\u6570\u5f0f\u306b\u304a\u3044\u3066\u5171\u7528\u4f53\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u306e\u5207\u308a\u66ff\u3048\u304c\u53ef\u80fd\u306b (P1330R0) \u5171\u7528\u4f53\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u3068\u306f\u3001\u6700\u5f8c\u306b\u521d\u671f\u5316\u307e\u305f\u306f\u5024\u3092\u4ee3\u5165\u3057\u305f\u30e1\u30f3\u30d0\u306e\u3053\u3068\u3067\u3059\u3002C++17 \u3067\u306f\u5171\u7528\u4f53\u306e\u521d\u671f\u5316\u3084\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u5b9a\u6570\u5f0f\u3067\u884c\u3048\u307e\u3057\u305f\u304c\u3001\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u306e\u5207\u308a\u66ff\u3048\u306f\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u5b9a\u6570\u5f0f\u3067\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u306e\u5207\u308a\u66ff\u3048\u304c\u53ef\u80fd\u306b\u306a\u308b\u3068\u3001\u5171\u7528\u4f53\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u308b std :: string \u3084 std :: optional \u306a\u3069\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306e constexpr \u5bfe\u5fdc\u3092\u62e1\u5145\u3067\u304d\u307e\u3059\u3002\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u672a\u5b9a\u7fa9\u52d5\u4f5c\u306a\u306e\u3067\u3001\u5b9a\u6570\u5f0f\u3067\u884c\u3046\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 #include <cstdint> union Value { float f ; std :: uint32_t i ; }; constexpr Value GetFloat ( float x ) { return Value { x }; // value.f \u304c\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0 } constexpr Value GetUint ( std :: uint32_t x ) { Value value = GetFloat ( 0.0f ); // value.f \u304c\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0 value . i = x ; // value.i \u304c\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u306b return value ; } int main () { static_assert ( GetUint ( 123 ). i == 123 ); } \u5b9a\u6570\u5f0f\u306e\u6587\u8108\u3067\u306f try - catch \u3092\u7121\u8996\u3059\u308b\u3088\u3046\u306b (P1002R1) \u3053\u308c\u307e\u3067 constexpr \u95a2\u6570\u306e\u4e2d\u306b\u306f try - catch \u30d6\u30ed\u30c3\u30af\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3057\u304b\u3057\u3001 std :: vector \u7b49\u306e\u30b3\u30f3\u30c6\u30ca\u3092 constexpr \u5bfe\u5fdc\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u306f\u3001\u3053\u306e\u5236\u9650\u304c\u969c\u58c1\u3068\u306a\u308b\u305f\u3081\u3001C++20 \u3067\u306f constexpr \u95a2\u6570\u306e\u4e2d\u306e try - catch \u306f\u3001\u5b9a\u6570\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3055\u308c\u308b\u3068\u304d\u306b\u306f\u7121\u8996\u3059\u308b\u3088\u3046\u4ed5\u69d8\u304c\u6539\u3081\u3089\u308c\u307e\u3059\u3002\u5b9a\u6570\u5f0f\u306e\u8a55\u4fa1\u4e2d\u306b\u4f8b\u5916\u3092\u6295\u3052\u308b\u3088\u3046\u3067\u3042\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 std :: vector \u306a\u3069\u3092 constexpr \u5bfe\u5fdc\u3055\u305b\u308b\u305f\u3081\u306e\u63aa\u7f6e\u3067\u3042\u308a\u3001\u5c06\u6765\u306e C++ \u306b\u304a\u3051\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u4f8b\u5916\u51e6\u7406\u306e\u5b9f\u73fe\u3092\u5426\u5b9a\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 #include <cstdint> #include <iostream> #include <exception> constexpr std :: uint32_t AddU8 ( std :: uint32_t a , std :: uint32_t b ) { if (( a + b ) >= 256 ) { throw std :: exception {}; } return a + b ; } constexpr std :: uint32_t DoubleU8 ( std :: uint32_t n ) { try { return AddU8 ( n , n ); } catch ( const std :: exception & except ) { return 0 ; } } int main () { static_assert ( DoubleU8 ( 123 ) == 246 ); // OK: \u4f8b\u5916\u3092\u6295\u3052\u305a\u306b\u5b9a\u6570\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u53ef\u80fd //static_assert(DoubleU8(200) > 0); // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc: \u5b9a\u6570\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3055\u308c\u308b constexpr \u95a2\u6570\u5185\u3067\u4f8b\u5916\u3092\u6295\u3052\u308b\u305f\u3081 std :: cout << \"result: \" << DoubleU8 ( 200 ) << '\\n' ; // OK: \u5b9f\u884c\u6642\u306b\u8a55\u4fa1\u3055\u308c\u308b\u95a2\u6570\u3067\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b } \u6dfb\u5b57\u5f0f\u306b\u304b\u304b\u308b\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u306e\u4f7f\u7528\u3092 deprecated \u306b (P1161R3) \u3053\u308c\u307e\u3067 array [ x , y ] \u3068\u3044\u3046\u30b3\u30fc\u30c9\u3067\u306f\u3001\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u306e\u4f5c\u7528\u3067 y \u304c\u6dfb\u5b57\u6f14\u7b97\u306e\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u6319\u52d5\u306f\u7d1b\u3089\u308f\u3057\u304f\u3001\u5c06\u6765\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u591a\u6b21\u5143\u914d\u5217\u30af\u30e9\u30b9\u304c\u5b9f\u88c5\u3055\u308c\u305f\u3068\u304d\u3001\u6dfb\u5b57\u6f14\u7b97\u5b50\u3092\u8907\u6570\u306e\u5f15\u6570\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3088\u3046\u306a\u898f\u683c\u3092\u8ffd\u52a0\u3059\u308b\u3046\u3048\u3067\u306e\u969c\u58c1\u306b\u3082\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001C++20 \u304b\u3089\u3001 array [( x , y )] \u306e\u3088\u3046\u306b\u62ec\u5f27\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3092\u306e\u305e\u304d\u3001\u6dfb\u5b57\u5f0f\u306b\u304b\u304b\u308b\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u306e\u4f7f\u7528\u304c deprecated \u306b\u306a\u308a\u307e\u3059\u3002\u53e4\u3044\u30b3\u30fc\u30c9\u3067 deprecated \u306a\u66f8\u304d\u65b9\u3092\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u524d\u8ff0\u306e\u3088\u3046\u306b () \u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u30b3\u30fc\u30c9\u306e\u6319\u52d5\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u305a\u306b\u79fb\u690d\u304c\u53ef\u80fd\u3067\u3059\u3002 #include <vector> int main () { std :: vector < int > v ( 10 ); int index = 0 ; v [ ++ index , 0 ] = - 1 ; // C++17 \u307e\u3067 OK, C++20 \u304b\u3089 deprecated v [( ++ index , 0 )] = - 1 ; // OK } \u30b9\u30b3\u30fc\u30d7\u4ed8\u304d\u5217\u6319\u578b\u306b\u5bfe\u3059\u308b using \u5ba3\u8a00\u304c\u3067\u304d\u308b\u3088\u3046\u306b (P1099R5) \u3053\u308c\u307e\u3067\u306f\u3001enum class \u306e\u30b9\u30b3\u30fc\u30d7\u89e3\u6c7a\u3092\u7701\u7565\u3059\u308b\u65b9\u6cd5\u304c\u7121\u304f\u3001\u6b21\u306e\u3088\u3046\u306a switch \u3067\u3001\u5217\u6319\u578b\u306e\u540d\u524d\u304c\u4f55\u5ea6\u3082\u767b\u5834\u3059\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u3001\u8aad\u307f\u306b\u304f\u304f\u3001\u9577\u3044\u5217\u6319\u578b\u306e\u540d\u524d\u304c\u907f\u3051\u3089\u308c\u308b\u539f\u56e0\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002 #include <iostream> #include <string_view> enum class Terrain { Open , Mountain , River , Ocean }; constexpr std :: string_view ToString ( Terrain terrain ) { using namespace std :: string_view_literals ; switch ( terrain ) { case Terrain :: Open : return \"Open\" sv ; case Terrain :: Mountain : return \"Mountain\" sv ; case Terrain :: River : return \"River\" sv ; case Terrain :: Ocean : return \"Ocean\" sv ; default : return \"\" sv ; } } int main () { std :: cout << ToString ( Terrain :: Mountain ); } C++20 \u3067\u306f using \u5ba3\u8a00\u3092\u62e1\u5f35\u3057\u3001 using Terrain :: Open ; \u3067 Open \u3092\u30a8\u30a4\u30ea\u30a2\u30b9\u3068\u3057\u3066\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f using enum \u5ba3\u8a00\u3068\u3044\u3046\u65b0\u3057\u3044\u4ed5\u7d44\u307f\u306b\u3088\u308a\u3001 using enum Terrain ; \u3067 Terrain \u304c\u30ed\u30fc\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5c0e\u5165\u3055\u308c\u3001\u30b9\u30b3\u30fc\u30d7\u89e3\u6c7a\u6f14\u7b97\u5b50\u3092\u4f7f\u308f\u305a\u306b\u305d\u306e\u5217\u6319\u5b50\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 enum class Terrain { Open , Mountain , River , Ocean }; constexpr std :: string_view ToString ( Terrain terrain ) { using namespace std :: string_view_literals ; switch ( terrain ) { using enum Terrain ; // using enum \u5ba3\u8a00\u3067\u3001\u5217\u6319\u578b\u306e\u540d\u524d Terrain \u3092\u30ed\u30fc\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5c0e\u5165 case Open : return \"Open\" sv ; case Mountain : return \"Mountain\" sv ; case River : return \"River\" sv ; case Ocean : return \"Ocean\" sv ; default : return \"\" sv ; } } int main () { using Terrain :: Mountain ; // using \u5ba3\u8a00\u3067\u3001\u5217\u6319\u5b50 Mountain \u3092\u30ed\u30fc\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5c0e\u5165 std :: cout << ToString ( Mountain ); } \u306a\u304a\u3001\u6b21\u306e\u3088\u3046\u306b\u8907\u6570\u306e using \u5ba3\u8a00\u306b\u3088\u3063\u3066\u540d\u524d\u306e\u885d\u7a81\u304c\u8d77\u3053\u308b\u5834\u5408\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> #include <string_view> enum class Terrain { Open , Mountain , River , Ocean }; enum class State { Open , Closed }; int main () { using enum Terrain ; // OK using enum State ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc: Terrain::Open \u3068 State::Open \u306e\u540d\u524d\u304c\u885d\u7a81 } \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b [ [nodiscard ] ] \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b (P1771R1) C++17 \u3067 [ [nodiscard ] ] \u304c\u5c0e\u5165\u3055\u308c\u305f\u969b\u3001\u4ed5\u69d8\u3067\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\uff08\u305f\u3060\u3057\u3001GCC \u3067\u306f\u8b66\u544a\u3092\u51fa\u3057\u3064\u3064\u3082\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u4ed8\u3051\u305f [ [nodiscard ] ] \u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3057\u305f\uff09\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u547c\u3073\u51fa\u3057\u306b\u3088\u3063\u3066\u4f5c\u6210\u3055\u308c\u305f\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u610f\u56f3\u305b\u305a\u7121\u8996\u3055\u308c\u305f\u3068\u304d\u306b\u8b66\u544a\u3092\u51fa\u305b\u308b\u3068\u3001\u30e6\u30fc\u30b6\u306e\u9593\u9055\u3044\u3092\u6e1b\u3089\u305b\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3082 [ [nodiscard ] ] \u5c5e\u6027\u3092\u4ed8\u3051\u3089\u308c\u308b\u3088\u3046\u3001C++17 \u5411\u3051\u306e\u898f\u683c\u306b\u3055\u304b\u306e\u307c\u3063\u3066\u4ed5\u69d8\u304c\u4fee\u6b63\u3055\u308c\u3001C++20 \u304a\u3088\u3073\u3001\u3053\u306e\u5909\u66f4\u306b\u5bfe\u5fdc\u3057\u305f C++17 \u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u65b0\u4ed5\u69d8\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u305f\u5834\u5408\u3067\u3082\u8b66\u544a\u306f\u6d88\u3048\u307e\u305b\u3093\u3002 struct Circle { double x , y , r ; Circle () = default ; [[ nodiscard ]] constexpr Circle ( double _x , double _y , double _r ) noexcept : x ( _x ), y ( _y ), r ( _r ) {} void draw () const { /* ... */ } }; int main () { Circle ( 200 , 300 , 50 ); // warning: nodiscard \u5c5e\u6027\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u4f5c\u6210\u3055\u308c\u305f\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7121\u8996 Circle ( 400 , 300 , 50 ). draw (); } \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u6587\u5b57\u5217\u306e\u5148\u982d\u3084\u672b\u5c3e\u304c\u3001\u3042\u308b\u6587\u5b57\u5217\u3068\u4e00\u81f4\u3059\u308b\u304b\u5224\u5b9a (P0457R2) std :: basic_string \u3068 std :: basic_string_view \u306b\u3001 starts_with () \u3068 ends_with () \u30e1\u30f3\u30d0\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002 #include <iostream> #include <string_view> constexpr bool HasPNGExtension ( std :: string_view filePath ) { // \u6587\u5b57\u5217\u304c \".png\" \u3067\u7d42\u308f\u308b\u306a\u3089 true, \u305d\u308c\u4ee5\u5916\u306f false \u3092\u8fd4\u3059 return filePath . ends_with ( \".png\" ); } int main () { std :: cout << std :: boolalpha ; std :: cout << HasPNGExtension ( \"picture.png\" ) << '\\n' ; std :: cout << HasPNGExtension ( \"photo.jpg\" ) << '\\n' ; std :: cout << HasPNGExtension ( \"music.mp3\" ) << '\\n' ; } true false false operator >> ( basic_istream & , charT * ) \u306e\u7b2c\u4e8c\u5f15\u6570\u3092 charT ( & ) [ N ] \u306b\u5909\u66f4\u3057\u3066\u5b89\u5168\u306b (P0487R1) C++17 \u307e\u3067\u306e operator >> ( basic_istream & , charT * ) \u306f\u3001\u95a2\u6570\u306b\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u304c\u6e21\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3078\u306e\u5bfe\u7b56\u304c\u5fc5\u8981\u3067\u3057\u305f\u3002 #include <iostream> #include <iomanip> int main () { char buffer [ 4 ]; // std::cin >> buffer; // \u5371\u967a: \u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u53ef\u80fd\u6027 std :: cin >> std :: setw ( 4 ) >> buffer ; // OK: \u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u5bfe\u7b56 std :: cout << buffer ; } C++20 \u3067\u306f\u5f15\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3001\u95a2\u6570\u304c\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u5bfe\u7b56\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 // C++17 \u307e\u3067 template < class charT , class traits > basic_istream < charT , traits >& operator >> ( basic_istream < charT , traits >& in , charT * s ); // C++20 \u304b\u3089 template < class charT , class traits , size_t N > basic_istream < charT , traits >& operator >> ( basic_istream < charT , traits >& in , charT ( & s )[ N ]); #include <iostream> #include <iomanip> int main () { char buffer [ 4 ]; std :: cin >> buffer ; // OK: C++20 \u3067\u306f\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u9632\u3052\u308b std :: cout << buffer ; } \u3053\u306e\u5909\u66f4\u306b\u4f34\u3044\u3001C++17 \u307e\u3067\u306f\u6709\u52b9\u3060\u3063\u305f\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3001C++20 \u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> #include <iomanip> int main () { char * p = new char [ 100 ]; std :: cin >> std :: setw ( 100 ) >> p ; // C++20 \u304b\u3089\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc std :: cout << p ; } \u623b\u308a\u5024\u306e\u7121\u8996\u304c\u4e0d\u5177\u5408\u3092\u3082\u305f\u3089\u3059\u95a2\u6570\u306b [ [nodiscard ] ] \u3092\u4ed8\u4e0e (P0600R1) C++17 \u3067\u5c0e\u5165\u3055\u308c\u305f [ [nodiscard ] ] \u5c5e\u6027\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u6d3b\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002C++20 \u3067\u306f\u4ed8\u4e0e\u57fa\u6e96\u3092\u300c\u623b\u308a\u5024\u306e\u7121\u8996\u304c\u30c8\u30e9\u30d6\u30eb\u3084\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306a\u3069\u306e\u91cd\u5927\u306a\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059 C++ \u306e\u95a2\u6570\u300d\u3068\u3057\u3001 async () , launder () , allocate () , empty () , operator new () \u304c\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 #include <vector> #include <future> int main () { std :: vector < int > v = { 10 , 20 , 30 }; v . empty (); // C++20 \u3067\u306f\u8b66\u544a std :: async ( std :: launch :: async , [] { return 1 ; }); // C++20 \u3067\u306f\u8b66\u544a } MSVC \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f Visual Studio 2017 15.6 \u4ee5\u964d\u3001\u898f\u683c\u306e\u7bc4\u56f2\u3092\u8d85\u3048\u3066\u3088\u308a\u591a\u304f\u306e\u95a2\u6570\uff08 2,500 \u500b\u4ee5\u4e0a \uff09\u306b [ [nodiscard ] ] \u5c5e\u6027\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001 Chromium \u306e\u30bd\u30fc\u30b9\u306b\u7121\u610f\u5473\u306a std::move() \u304c\u898b\u3064\u304b\u308b \u306a\u3069\u3001\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30d0\u30b0\u306e\u767a\u898b\u306b\u5f79\u7acb\u3063\u3066\u3044\u307e\u3059\u3002 < array > \u30d8\u30c3\u30c0\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u306b (P1023R0) , (P1032R1) C++17 \u306e < array > \u30d8\u30c3\u30c0\u3067\u306f\u3001\u6bd4\u8f03\u6f14\u7b97\u5b50\u3001 swap () , fill () \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u3067\u3057\u305f\u3002C++20 \u3067\u306f\u3055\u3089\u306b\u3001array \u306e\u6bd4\u8f03\u6f14\u7b97\u306e\u5b9f\u88c5\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b std :: equal () \u3068 std :: lexicographical_compare () \u304c constexpr \u306b\u306a\u3063\u305f (P0202R3) \u3053\u3068\u306b\u3068\u3082\u306a\u3044\u3001array \u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092 constexpr \u3068\u3057\u3001\u307e\u305f swap () \u3068 fill () \u306b\u3064\u3044\u3066\u3082 constexpr \u306b\u3059\u308b\u3053\u3068\u3092\u6c7a\u3081\u3001array \u30d8\u30c3\u30c0\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u3067\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 < chrono > \u30d8\u30c3\u30c0\u306e zero () , min () , max () \u95a2\u6570\u304c noexcept \u306b (P0972R0) std :: chrono :: duration_values , std :: chrono :: duration , std :: chrono :: time_point \u306a\u3069\u306e zero () , min () , max () \u95a2\u6570\u306b noexcept \u304c\u4ed8\u304d\u307e\u3059\u3002 pointer_traits \u304c constexpr \u306b (P1006R1) std :: vector \u3092 constexpr \u306b\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u305f\u3081\u3001 std :: pointer_traits :: pointer_to () \u95a2\u6570\u304c constrexpr \u306b\u306a\u308a\u307e\u3059\u3002 \u30dd\u30a4\u30f3\u30bf\u306e\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u6700\u9069\u5316\u30d2\u30f3\u30c8\u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f1d\u3048\u308b assume_aligned () \u95a2\u6570 (P1007R3) \u30c7\u30fc\u30bf\u306e\u30a2\u30c9\u30ec\u30b9\u304c 16 \u30d0\u30a4\u30c8\u306a\u3069\u306e\u30b5\u30a4\u30ba\u306b\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c SIMD \u3092\u4f7f\u3063\u305f\u6700\u9069\u306a\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3067\u304d\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3042\u308b\u30dd\u30a4\u30f3\u30bf\u306e\u6307\u3059\u30c7\u30fc\u30bf\u304c\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f1d\u3048\u308b\u65b9\u6cd5\u3068\u3057\u3066\u3001GCC \u3084 Clang \u3067\u306f __builtin_assume_aligned () \u3084 __attribute__ (( assume_aligned ( alignment ))) , ICC \u3067\u306f __assume_aligned () \u306a\u3069\u306e\u72ec\u81ea\u62e1\u5f35\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u6a19\u6e96\u5316\u3055\u308c\u305f\u65b9\u6cd5\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002C++20 \u3067\u306f\u3001\u3053\u308c\u3089\u306e\u5dee\u7570\u3092\u5438\u53ce\u3059\u308b\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 template < size_t N , class T > [[ nodiscard ]] constexpr T * assume_aligned ( T * ptr ); \u5b9f\u969b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002 void Multiply ( float * x , size_t size , float factor ) { float * ax = std :: assume_aligned < 64 > ( x ); // x \u304c 64 \u30d0\u30a4\u30c8\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3067\u3042\u308b\u3053\u3068\u3092\u4f1d\u3048\u308b for ( size_t i = 0 ; i < size ; ++ i ) // \u30eb\u30fc\u30d7\u304c\u9069\u5b9c\u6700\u9069\u5316\u3055\u308c\u308b { ax [ i ] *= factor ; } } \u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306e\u4f5c\u6210\u6642\u306b\u5024\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u521d\u671f\u5316\u3059\u308b make \u95a2\u6570\u3092\u8ffd\u52a0 (P1020R1) \u5b9f\u884c\u6642\u6027\u80fd\u306e\u305f\u3081\u306b\u3001 float \u3084 unsigned char \u306a\u3069\u7d44\u307f\u8fbc\u307f\u578b\u306e\u914d\u5217\u306e\u5024\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u521d\u671f\u5316\u3055\u305b\u305f\u3044\uff08\u30bc\u30ed\u521d\u671f\u5316\u3057\u306a\u3044\uff09\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001 make_unique \u3084 make_shared , allocate_shared \u3067\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3092\u4f5c\u6210\u3057\u305f\u5834\u5408\u306b\u306f\u5024\u521d\u671f\u5316\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002C++20 \u3067\u306f\u3001\u5024\u521d\u671f\u5316\u3092\u305b\u305a\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u521d\u671f\u5316\u3067\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570 make_unique_default_init , make_shared_default_init , allocate_shared_default_init \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 #include <iostream> #include <memory> // \u672a\u521d\u671f\u5316\u306e\u5909\u6570\u3092\u4f7f\u3046\u5b9f\u9a13\u7684\u306a\u30b3\u30fc\u30c9 int main () { float v [ 4 ]; // \u30c7\u30d5\u30a9\u30eb\u30c8\u521d\u671f\u5316 for ( int i = 0 ; i < 4 ; ++ i ) { std :: cout << v [ i ] << '\\n' ; } auto pv = std :: make_unique < float [] > ( 4 ); // \u5024\u521d\u671f\u5316 (0 \u521d\u671f\u5316) for ( int i = 0 ; i < 4 ; ++ i ) { std :: cout << pv [ i ] << '\\n' ; } auto pd = std :: make_unique_default_init < float [] > ( 4 ); // \u30c7\u30d5\u30a9\u30eb\u30c8\u521d\u671f\u5316 for ( int i = 0 ; i < 4 ; ++ i ) { std :: cout << pd [ i ] << '\\n' ; } } \u51fa\u529b\u4f8b 2 . 20325 e - 38 4 . 11052 e + 32 1 . 3013 e - 45 2 . 48626 e - 38 0 0 0 0 2 . 30415 e - 38 2 . 51341 e - 38 4 . 63281 e + 30 2 . 32703 e + 17 \u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u64cd\u4f5c\u3067\u3001 key_type \u3068\u6bd4\u8f03\u53ef\u80fd\u306a\u578b\u3092\u5909\u63db\u305b\u305a\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b (P0919R3) C++17 \u307e\u3067\u306e unorderd_map \u3084 unordered_set \u306a\u3069\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u3067\u306f\u3001 find () , count () , equal_range () \u306a\u3069\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u884c\u3046\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u5f15\u6570\u306b key_type \u3092\u3068\u308a\u3001\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067 std :: string \u578b\u306e\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u975e\u52b9\u7387\u3067\u3057\u305f\u3002 #include <string> #include <unordered_map> int main () { std :: unordered_map < std :: string , int > table = { /* ... */ }; auto it = table . find ( \"abc\" ); // std::string \u578b\u306e\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3055\u308c\u308b } C++20 \u3067\u306f\u3001\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf Hash \u304c transparent_key_equal \u30bf\u30b0\u3092\u6301\u3064\u3068\u304d\u306b\u3001 key_type \u4ee5\u5916\u306e\u578b\u3092\u5f15\u6570\u306b\u3068\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u4f7f\u7528\u53ef\u80fd\u306b\u306a\u308a\u3001\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u3092\u56de\u907f\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 #include <string> #include <string_view> #include <unordered_map> struct string_hash { using transparent_key_equal = std :: equal_to <> ; // KeyEqual to use using hash_type = std :: hash < std :: string_view > ; // helper local type size_t operator ()( std :: string_view txt ) const { return hash_type {}( txt ); } size_t operator ()( const std :: string & txt ) const { return hash_type {}( txt ); } size_t operator ()( const char * txt ) const { return hash_type {}( txt ); } }; int main () { using namespace std :: literals ; std :: unordered_map < std :: string , int , string_hash > table = { /* ... */ }; auto it1 = table . find ( \"abc\" ); // std::string \u578b\u306e\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f5c\u6210\u3055\u308c\u306a\u3044 auto it2 = table . find ( \"abc\" sv ); // std::string \u578b\u306e\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f5c\u6210\u3055\u308c\u306a\u3044 } 2 \u3064\u306e\u5024\u306e\u4e2d\u70b9\u3092\u8a08\u7b97\u3059\u308b std :: midpoint () \u95a2\u6570 (P0811R3) 2 \u3064\u306e\u5024 a , b \u306e\u4e2d\u70b9\u3092\u8a08\u7b97\u3059\u308b\u969b\u306b\u3001\u5358\u7d14\u306a ( a + b ) / 2 \u3068\u3044\u3046\u5f0f\u3067\u306f\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002C++20 \u3067\u8ffd\u52a0\u3055\u308c\u308b std :: midpoint () \u95a2\u6570\u3067\u306f\u3001\u6574\u6570\u306b\u5bfe\u3057\u3066 constexpr Integer midpoint ( Integer a , Integer b ) noexcept { using U = make_unsigned_t < Integer > ; return a > b ? a - ( U ( a ) - b ) / 2 : a + ( U ( b ) - a ) / 2 ; } \u306e\u3088\u3046\u306a\u5b9f\u88c5\u304c\u4f7f\u308f\u308c\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u56de\u907f\u3067\u304d\u307e\u3059\u3002 ( a + b ) \u304c\u5947\u6570\u306b\u306a\u308b\u30b1\u30fc\u30b9\u306e\u7d50\u679c\u306f a \u306e\u65b9\u5411\u306b\u4e38\u3081\u3089\u308c\u307e\u3059\u3002 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u5bfe\u3057\u3066\u306f\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 Float midpoint ( Float a , Float b ) { return isnormal ( a ) && isnormal ( b ) ? a / 2 + b / 2 : ( a + b ) / 2 ; } #include <iostream> #include <numeric> int main () { std :: cout << ( 2 ' 000 ' 000 ' 000 + 1 ' 000 ' 000 ' 000 ) / 2 << '\\n' ; // \u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc std :: cout << std :: midpoint ( 2 ' 000 ' 000 ' 000 , 1 ' 000 ' 000 ' 000 ) << '\\n' ; // 1500000000 std :: cout << std :: midpoint ( 1 , 4 ) << '\\n' ; // 2 std :: cout << std :: midpoint ( 4 , 1 ) << '\\n' ; // 3 } 2 \u3064\u306e\u5024\u306e\u7dda\u5f62\u88dc\u9593\u3092\u8a08\u7b97\u3059\u308b std :: lerp () \u95a2\u6570 (P0811R3) 2 \u70b9 a , b \u306e\u9593\u3092\u30d1\u30e9\u30e1\u30fc\u30bf t \u306b\u3088\u3063\u3066\u7dda\u5f62\u88dc\u9593\u3059\u308b\u95a2\u6570\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\u8a08\u7b97\u7d50\u679c r \u306f a + t * ( b - a ) \u306b\u3088\u3063\u3066\u6c42\u3081\u3089\u308c\u307e\u3059\u304c\u3001\u5b9f\u88c5\u306b\u3088\u308a isfinite ( a ) && isfinite ( b ) \u306e\u3068\u304d lerp ( a , b , 0 ) == a && lerp ( a , b , 1 ) == b 0 <= t && t <= 1 \u306e\u3068\u304d isfinite ( r ) isfinite ( t ) && a == b \u306e\u3068\u304d r == a isfinite ( t ) || ! isnan ( t ) && ( b - a ) != 0 \u306e\u3068\u304d !isnan(r) \u307e\u305f\u3001 cmp ( lerp ( a , b , t2 ), lerp ( a , b , t1 )) * cmp ( t2 , t1 ) * cmp ( b , a ) >= 0 (cmp \u306f -1, 0, 1 \u3092\u8fd4\u3059\u4e09\u65b9\u6bd4\u8f03\u95a2\u6570\u3068\u3059\u308b) \u3067\u3042\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u307e\u3059\u3002 #include <iostream> #include <numeric> int main () { std :: cout << std :: lerp ( 0.0 , 10.0 , 0.0 ) << '\\n' ; // 0 std :: cout << std :: lerp ( 0.0 , 10.0 , 0.3 ) << '\\n' ; // 3 std :: cout << std :: lerp ( 0.0 , 10.0 , 1.0 ) << '\\n' ; // 10 std :: cout << std :: lerp ( 0.0 , 10.0 , 1.2 ) << '\\n' ; // 12 } \u5b9f\u88c5\u56fa\u6709\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u308b < version > \u30d8\u30c3\u30c0\u3092\u8ffd\u52a0 (P0754R2) __cpp_lib_byte , __cpp_lib_void_t \u306e\u3088\u3046\u306a\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u30c6\u30b9\u30c8\u30de\u30af\u30ed\u3001\u305d\u306e\u4ed6\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3084\u5b9f\u88c5\u56fa\u6709\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u308b\u76ee\u7684\u306e < version > \u30d8\u30c3\u30c0\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u4f8b\u3048\u3070 C++20 \u4ee5\u524d\u306e MSVC \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001 < yvals_core . h > \u3068\u3044\u3046\u72ec\u81ea\u30d8\u30c3\u30c0\u306b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u30c6\u30b9\u30c8\u30de\u30af\u30ed\u304c\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001C++20 \u4ee5\u964d\u3067\u306f\u3042\u3089\u3086\u308b\u5b9f\u88c5\u306b\u304a\u3044\u3066\u3001 < version > \u30d8\u30c3\u30c0\u3092\u898b\u308b\u3053\u3068\u3067\u3001\u3053\u3046\u3057\u305f\u5b9f\u88c5\u56fa\u6709\u306e\u60c5\u5831\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u305f\u3081\u5229\u4fbf\u6027\u304c\u9ad8\u307e\u308a\u307e\u3059\u3002 \u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u6697\u9ed9\u306e\u5909\u63db\u304c\u53ef\u80fd\u304b\u8abf\u3079\u308b is_nothrow_convertible (P0758R1) \u578b From \u304b\u3089\u578b To \u3078\u306e\u6697\u9ed9\u306e\u5909\u63db\u304c\u53ef\u80fd\u3067\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\u578b\u7279\u6027\u30af\u30e9\u30b9 std :: is_convertible < class From , class To > \u304c C++11 \u304b\u3089\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u5909\u63db\u304c noexcept \u3067\u3082\u3042\u308b\u304b\u3092\u8abf\u3079\u3089\u308c\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u3053\u306e\u3053\u3068\u304c\u539f\u56e0\u3067\u3001 std :: decay_copy \u306e\u63d0\u6848 ( N3255 ) \u306b\u304a\u3044\u3066\u3001\u9069\u5207\u306a noexcept \u4f8b\u5916\u4ed5\u69d8\u3092\u79fb\u690d\u6027\u306e\u3042\u308b\u65b9\u6cd5\u3067\u5b9a\u7fa9\u3067\u304d\u306a\u3044\u554f\u984c ( LWG 2040 ) \u304c\u6307\u6458\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002 template < class T > typename decay < T >:: type decay_copy ( T && v ) noexcept ( ??? /* is_nothrow_convertible<T, T>::value */ ); C++20 \u304b\u3089\u306f\u3001 noexcept \u306a\u6697\u9ed9\u306e\u5909\u63db\u304c\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u8abf\u3079\u308b\u65b0\u3057\u3044\u578b\u7279\u6027\u30af\u30e9\u30b9 std :: is_nothrow_convertible < class From , class To > \u304c\u5b9f\u88c5\u3055\u308c\u308b\u3053\u3068\u3067\u554f\u984c\u3092\u89e3\u6d88\u3067\u304d\u307e\u3059\u3002 \u65e2\u5b58\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u306b\u304a\u3044\u3066\u3082\u3001 std :: basic_string \u306e\u30e1\u30f3\u30d0\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3001\u3088\u308a\u9069\u5207\u306a noexcept \u4f8b\u5916\u4ed5\u69d8\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306b\u6d3b\u7528\u3055\u308c\u307e\u3059\u3002 template < class T > size_type find ( const T & t , size_type pos = 0 ) const noexcept ( is_nothrow_convertible_v < const T & , basic_string_view < CharT , Traits >> ); \u30dd\u30a4\u30f3\u30bf\u30e9\u30a4\u30af\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u5f97\u3059\u308b std :: to_address () \u95a2\u6570 (P0653R2) \u30dd\u30a4\u30f3\u30bf\u30e9\u30a4\u30af\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u305d\u308c\u304c\u8868\u3059\u306e\u3068\u540c\u3058\u30a2\u30c9\u30ec\u30b9\u3092\u751f\u30dd\u30a4\u30f3\u30bf\u3067\u8fd4\u3059\u95a2\u6570 std :: to_address ( p ) \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30dd\u30a4\u30f3\u30bf\u578b\u306e\u5834\u5408\u306f\u305d\u306e\u5024\u3092\u8fd4\u3057\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u3001 std :: pointer_traits < Ptr > :: to_address ( p ) \u306e\u7279\u6b8a\u5316\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066\u4f7f\u3048\u308c\u3070\u305d\u306e\u623b\u308a\u5024\u3092\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f std :: to_address ( p . operator -> ()) \u306e\u623b\u308a\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002 < complex > \u30d8\u30c3\u30c0\u306e\u95a2\u6570\u306e constexpr \u5bfe\u5fdc\u3092\u5f37\u5316 (P0415R1) < complex > \u30d8\u30c3\u30c0\u304c\u63d0\u4f9b\u3059\u308b\u95a2\u6570\u306e\u3046\u3061\u3001\u8907\u7d20\u6570\u306e\u56db\u5247\u6f14\u7b97\u3001\u30ce\u30eb\u30e0\u306e\u53d6\u5f97\u3001\u5171\u5f79\u8907\u7d20\u6570\u306e\u53d6\u5f97\u306a\u3069\u3001 constexpr \u975e\u5bfe\u5fdc\u306e\u6570\u5b66\u95a2\u6570 (sqrt \u306a\u3069) \u3092\u4f7f\u308f\u305a\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3082\u306e\u304c constexpr \u5316\u3055\u308c\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a55\u4fa1\u306e\u6587\u8108\u304b\u5b9f\u884c\u6642\u8a55\u4fa1\u306e\u6587\u8108\u304b\u3092\u5224\u5225\u3067\u304d\u308b std :: is_constant_evaluated () \u95a2\u6570 (P0595R2) C++17 \u307e\u3067\u306f\u3001\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9\u3092\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a55\u4fa1\u304b\u5b9f\u884c\u6642\u8a55\u4fa1\u304b\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u308b\u65b9\u6cd5\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002C++20 \u3067\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a55\u4fa1\u3055\u308c\u3066\u3044\u308b\u6587\u8108\u3067\u306f true \u3092\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u3067\u306f false \u3092\u8fd4\u3059 std :: is_constant_evaluated () \u95a2\u6570\u304c < type_traits > \u30d8\u30c3\u30c0\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u4f8b\u3048\u3070\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067 constexpr \u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u6570\u5b66\u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\u969b\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a55\u4fa1\u3067\u306f constexpr \u7248\u306e\u5b9f\u88c5\u3092\u3001\u5b9f\u884c\u6642\u306b\u306f\u975e constexpr \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b9f\u88c5\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u9078\u629e\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u306a\u304a\u3001 std :: is_constant_evaluated () \u3092 if constexpr \u306e ( ) \u5185\u3084 static_assert \u5185\u3067\u4f7f\u3046\u3068\u5e38\u306b true \u306b\u8a55\u4fa1\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u57fa\u672c\u7684\u306b\u306f if ( std :: is_constant_evaluated ()) \u3068\u66f8\u304d\u307e\u3059\u3002 #include <cmath> #include <type_traits> #include <iostream> #include <iomanip> constexpr float Sin_impl ( float x2 , int i , int k , float xn , long long nf ) { return ( i > 10 ) ? 0.0f : ( k * xn / nf + Sin_impl ( x2 , i + 2 , - k , xn * x2 , nf * ( i + 1 ) * ( i + 2 ))); } constexpr float Sin ( float x ) { if ( std :: is_constant_evaluated ()) { return Sin_impl ( x * x , 1 , 1 , x , 1 ); } else { return std :: sin ( x ); } } int main () { constexpr float Pi = 3.14159265f ; constexpr float theta = Pi / 4.0 ; constexpr float x1 = Sin ( theta ); // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a08\u7b97 float x2 = Sin ( theta ); // \u5b9f\u884c\u6642\u8a08\u7b97 std :: cout << std :: setprecision ( 16 ); std :: cout << x1 << '\\n' ; std :: cout << x2 << '\\n' ; } 0 . 7071068286895752 0 . 7071067690849304 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b\u306e\u30a2\u30c8\u30df\u30c3\u30af\u64cd\u4f5c\u3092\u62e1\u5f35 (P0020R6) std :: atomic < T > \u306e float , double , long double \u578b\u306e\u7279\u6b8a\u5316\u306b\u3001\u30e1\u30f3\u30d0\u95a2\u6570 fetch_add () , fetch_sub () , operator += () , operator -= () \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002 std :: memory_order \u3092 enum class \u306b\u5909\u66f4 (P0439R0) C++17 \u307e\u3067 enum \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u305f std :: memory_order \u3092\u3001\u30e2\u30c0\u30f3\u306a C++ \u6587\u6cd5\u3068\u578b\u5b89\u5168\u306e\u305f\u3081\u306b\u3001 enum class \u3067\u5b9a\u7fa9\u3059\u308b\u4ed5\u69d8\u306b\u5909\u66f4\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u307e\u3067\u306e\u8868\u8a18\u306f\u5b9a\u6570\u3067\u63d0\u4f9b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u305f\u3081\u3001\u65e2\u5b58\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u5f71\u97ff\u3092\u53d7\u3051\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u30d0\u30a4\u30ca\u30ea\u4e92\u63db\u6027\u306e\u305f\u3081\u306b\u3001 enum class \u306e\u57fa\u5e95\u578b\u306e\u9078\u629e\u306f\u5b9f\u88c5\u306b\u4efb\u305b\u3089\u308c\u3066\u3044\u307e\u3059\u3002 C++17 namespace std { typedef enum memory_order { memory_order_relaxed , memory_order_consume , memory_order_acquire , memory_order_release , memory_order_acq_rel , memory_order_seq_cst } memory_order ; } C++20 namespace std { enum class memory_order /* : unspecified */ { relaxed , consume , acquire , release , acq_rel , seq_cst }; inline constexpr memory_order memory_order_relaxed = memory_order :: relaxed ; inline constexpr memory_order memory_order_consume = memory_order :: consume ; inline constexpr memory_order memory_order_acquire = memory_order :: acquire ; inline constexpr memory_order memory_order_release = memory_order :: release ; inline constexpr memory_order memory_order_acq_rel = memory_order :: acq_rel ; inline constexpr memory_order memory_order_seq_cst = memory_order :: seq_cst ; } Hash \u304c\u540c\u4e00\u306e\u6319\u52d5\u3092\u3057\u306a\u3044\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u3069\u3046\u3057\u306e\u6bd4\u8f03\u304c\u53ef\u80fd\u306b (P0809R0) C++17 \u307e\u3067\u306f\u3001\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u306e operator == , operator != \u306b\u3064\u3044\u3066\u3001\u300c\u4e21\u8005\u306e Hash \u3068 Pred \u304c\u305d\u308c\u305e\u308c\u540c\u4e00\u306e\u6319\u52d5\u3092\u3057\u306a\u3044\u5834\u5408\u306f\u672a\u5b9a\u7fa9\u52d5\u4f5c\u300d\u3068\u898f\u683c\u306b\u8a18\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u30bd\u30eb\u30c8\u3092\u4f7f\u3046\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u6301\u3064\u30b3\u30f3\u30c6\u30ca\u540c\u58eb\u306e\u6bd4\u8f03\u3082\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3068\u3057\u3066\u60f3\u5b9a\u3055\u308c\u3001\u307e\u305f\u3001\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306e\u5b9f\u88c5\u3082\u96e3\u3057\u304f\u306a\u304b\u3063\u305f\u3053\u3068\u304b\u3089\u3001C++20 \u304b\u3089\u306f\u3053\u306e\u3046\u3061 Hash \u306b\u95a2\u3059\u308b\u8a18\u8ff0\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002 #include <iostream> #include <unordered_map> #include <random> #include <string> template < class Type > struct RandomizedHash { size_t rnd ; RandomizedHash () { std :: random_device rd ; rnd = std :: uniform_int_distribution < size_t > {}( rd ); } size_t operator ()( const Type & s ) const { return ( std :: hash < Type > {}( s ) ^ rnd ); } }; int main () { std :: unordered_map < std :: string , int , RandomizedHash < std :: string >> u1 = { { \"One\" , 1 }, { \"Two\" , 2 }, { \"Three\" , 3 }, }; std :: unordered_map < std :: string , int , RandomizedHash < std :: string >> u2 = { { \"One\" , 1 }, { \"Two\" , 2 }, { \"Three\" , 3 }, }; // \u305d\u308c\u305e\u308c\u7570\u306a\u308b\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u8fd4\u3059 const std :: string s = \"abcde\" ; std :: cout << \"u1: \" << u1 . hash_function ()( s ) << '\\n' ; std :: cout << \"u2: \" << u2 . hash_function ()( s ) << '\\n' ; std :: cout << std :: boolalpha ; // C++17 \u307e\u3067\u306f\u672a\u5b9a\u7fa9\u52d5\u4f5c\u3001C++20 \u304b\u3089 OK std :: cout << ( u1 == u2 ) << '\\n' ; } \u5b9f\u884c\u74b0\u5883\u306e\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3092\u5224\u5225\u3059\u308b\u305f\u3081\u306e\u5217\u6319\u5b9a\u6570\u3092\u8ffd\u52a0 (P0463R1) \u3053\u308c\u307e\u3067\u306e C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u3092\u5224\u5225\u3059\u308b\u969b\u306b\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002C++20 \u304b\u3089\u306f\u3001\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3092\u8868\u3059 endian :: little , \u30d3\u30c3\u30b0\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3092\u8868\u3059 endian :: big , \u5b9f\u884c\u74b0\u5883\u306e\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3092\u8868\u3059 endian :: native \u306e 3 \u3064\u306e endian \u578b\u306e\u5217\u6319\u5b9a\u6570\uff08\u5024\u306f\u5b9f\u88c5\u306b\u4f9d\u5b58\uff09\u304c < type_traits > \u306b\u5b9a\u7fa9\u3055\u308c\u3001 endian :: native \u3092\u305d\u308c\u4ee5\u5916\u306e\u5024\u3068\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3067\u3001\u5b9f\u884c\u74b0\u5883\u306e\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u3092\u5224\u5225\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u73fe\u5728\u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3001\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3067\u3082\u30d3\u30c3\u30b0\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3067\u3082\u306a\u3044\u30df\u30c9\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\uff08PDP \u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306a\u3069\uff09\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30df\u30c9\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306e\u74b0\u5883\u306b\u304a\u3044\u3066\u306f\u3001 endian :: native \u306f endian :: big \u3067\u3082 endian :: little \u3067\u3082\u306a\u3044\u5024\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 #include <iostream> #include <type_traits> int main () { if constexpr ( std :: endian :: native == std :: endian :: little ) { std :: cout << \"Little-endian \\n \" ; } else if constexpr ( std :: endian :: native == std :: endian :: big ) { std :: cout << \"Big-endian \\n \" ; } else { std :: cout << \"Middle-endian \\n \" ; } } \u578b\u304b\u3089 cv \u4fee\u98fe\u3068\u53c2\u7167\u3092\u9664\u53bb\u3059\u308b std :: remove_cvref trait (P0550R2) \u578b\u304b\u3089 const \u3084 volatile \u306e\u4fee\u98fe\u304a\u3088\u3073\u53c2\u7167\u3092\u9664\u53bb\u3057\u305f\u3044\u3060\u3051\u3067\u3001\u914d\u5217\u304b\u3089\u30dd\u30a4\u30f3\u30bf\u3001\u95a2\u6570\u578b\u304b\u3089\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u5909\u63db\u306b\u3064\u3044\u3066\u306f\u4e0d\u8981\u3067\u3042\u3063\u3066\u3082\u3001C++17 \u3067\u306f std :: remove_cv_t < std :: remove_reference_t < T >> \u3068\u66f8\u304f\u3068\u9577\u304f\u306a\u308b\u305f\u3081 std :: decay \u3092\u4f7f\u3046\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3057\u305f\u3002C++20 \u304b\u3089\u306f std :: remove_cv_t < std :: remove_reference_t < T >> \u3068\u540c\u3058\u52b9\u679c\u3092\u6301\u3064 std :: remove_cvref trait \u3068\u3001\u305d\u306e\u30d8\u30eb\u30d1\u30fc\u578b std :: remove_cvref_t \u304c\u8ffd\u52a0\u3055\u308c\u3001\u77ed\u304f\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 std :: remove_reference_t < std :: remove_cv_t < T >> \u306e\u3088\u3046\u306a\u9806\u756a\u306e\u9593\u9055\u3044\u3092\u9632\u3050\u3053\u3068\u306b\u3082\u3064\u306a\u304c\u308a\u307e\u3059\u3002 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306e\u4e0d\u5fc5\u8981\u306a std :: decay \u306e\u4f7f\u7528\u3092\u56de\u907f (P0777R1) C++17 \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u898f\u683c\u3067\u306f std :: decay_t \u304c\u304a\u3088\u305d 40 \u7b87\u6240\u3067\u4f7f\u308f\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u3046\u3061 cv \u4fee\u98fe\u306e\u9664\u53bb\u3084\u53c2\u7167\u306e\u9664\u53bb\u3060\u3051\u3067\u5341\u5206\u306a\u7b87\u6240\u306b\u3064\u3044\u3066\u3001\u5b9f\u88c5\u306e\u610f\u56f3\u3092\u3088\u308a\u660e\u78ba\u306b\u3059\u308b\u305f\u3081 std :: remove_reference_t \u3084\u3001C++20 \u304b\u3089\u5c0e\u5165\u3055\u308c\u308b std :: remove_cvref_t \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001 std :: apply \u3084\u3001 std :: optional , std :: variant \u306e\u4e00\u90e8\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306a\u3069\u3067\u7f6e\u304d\u63db\u3048\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u6570\u5b66\u5b9a\u6570\u3092\u63d0\u4f9b\u3059\u308b < numbers > \u30d8\u30c3\u30c0 (P0631R8) \u3053\u308c\u307e\u3067 C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u6570\u5b66\u5b9a\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\uff08 M_PI \u306a\u3069\u306f\u62e1\u5f35\uff09\u3002C++20 \u304b\u3089\u306f\u6570\u5b66\u5b9a\u6570\u3092\u307e\u3068\u3081\u305f < numbers > \u30d8\u30c3\u30c0\u304c\u8ffd\u52a0\u3055\u308c\u300113 \u7a2e\u985e\u306e\u6570\u5b66\u5b9a\u6570\u306e\u5909\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5ba3\u8a00\u3068\u3001\u305d\u308c\u3089\u306e double \u578b\u3078\u306e\u7279\u6b8a\u5316\u306e\u5b9a\u7fa9\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 \u5909\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30b3\u30f3\u30bb\u30d7\u30c8 floating_point \u3092\u4f7f\u3063\u3066\u3001 std :: numbers \u540d\u524d\u7a7a\u9593\u306b\u6b21\u306e\u3088\u3046\u306b\u5ba3\u8a00\u3055\u308c\u307e\u3059\u3002 template < floating_point T > inline constexpr T pi_v < T > = 3.141592653589793238462643383279502884 L ; \u5408\u308f\u305b\u3066 double \u578b\u3078\u306e\u7279\u6b8a\u5316\u306e\u5b9a\u7fa9\u304c\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u3067\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 inline constexpr double pi = pi_v < double > ; C++20 \u3067\u8ffd\u52a0\u3055\u308c\u308b\u6570\u5b66\u5b9a\u6570\u306e\u4e00\u89a7\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 \u5b9a\u6570\u540d \u8aac\u660e binary128 \u306b\u5145\u5206\u306a\u7cbe\u5ea6\u3092\u6301\u3064\u5024 e_v e 2.718281828459045235360287471352662498L log2e_v 2 \u3092\u5e95\u3068\u3059\u308b e \u306e\u5bfe\u6570 1.442695040888963407359924681001892137L log10e_v 10 \u3092\u5e95\u3068\u3059\u308b e \u306e\u5bfe\u6570 0.434294481903251827651128918916605082L pi_v \u5186\u5468\u7387 (\u03c0) 3.141592653589793238462643383279502884L inv_pi_v 1/\u03c0 0.318309886183790671537767526745028724L inv_sqrtpi_v 1/\u221a\u03c0 0.564189583547756286948079451560772586L ln2_v 2 \u306e\u81ea\u7136\u5bfe\u6570 0.693147180559945309417232121458176568L ln10_v 10 \u306e\u81ea\u7136\u5bfe\u6570 2.302585092994045684017991454684364208L sqrt2_v \u221a2 1.414213562373095048801688724209698078L sqrt3_v \u221a3 1.732050807568877293527446341505872366L inv_sqrt3_v 1/\u221a3 0.577350269189625764509148780501957456L egamma_v \u30aa\u30a4\u30e9\u30fc\u306e\u5b9a\u6570 0.577215664901532860606512090082402431L phi_v \u9ec4\u91d1\u6570 (\u03c6) 1.618033988749894848204586834365638117L \u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001 using \u5ba3\u8a00\u306b\u3088\u3063\u3066\u8a18\u8ff0\u3092\u77ed\u304f\u3067\u304d\u307e\u3059\u3002 #include <iostream> #include <numbers> int main () { using std :: numbers :: pi ; using std :: numbers :: pi_v ; std :: cout << 2.0 * pi << '\\n' ; std :: cout << pi_v < float > << '\\n' ; }","title":"C++20 \u306e\u65b0\u6a5f\u80fd"},{"location":"standardization/cpp20/#c20","text":"C++20 \u306e\u5909\u66f4\u3059\u3079\u3066\u3092\u30ab\u30d0\u30fc\u3059\u308b\u305f\u3081\u306b\u3001\u9805\u76ee\u8ffd\u52a0\u30fb\u57f7\u7b46\u4f5c\u696d\u4e2d\u3067\u3059\uff08\u5b8c\u6210\u5ea6 \u7d04 25%\uff09","title":"C++20 \u306e\u65b0\u6a5f\u80fd"},{"location":"standardization/cpp20/#_1","text":"","title":"\u8a00\u8a9e\u6a5f\u80fd"},{"location":"standardization/cpp20/#p0683r1","text":"\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u304a\u3051\u308b\u30d3\u30c3\u30c8\u5e45\u306e\u6307\u5b9a\u306b\u7d9a\u3044\u3066\u3001 = \u6f14\u7b97\u5b50\u307e\u305f\u306f {} \u521d\u671f\u5316\u5b50\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u5f0f\u3092\u8a18\u8ff0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> enum class Terrain { Open , Forest , Hill , Mountain , Desert , Tundra , River , Ocean }; struct Tile { unsigned int height : 4 = 1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092 1 \u306b Terrain terrain : 3 = Terrain :: Open ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u660e\u793a\u7684\u306b Terrain::Open \u306b bool passable : 1 = true ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092 true \u306b }; int main () { std :: cout << std :: boolalpha ; Tile tile1 ; std :: cout << tile1 . height << \", \" << static_cast < int > ( tile1 . terrain ) << \", \" << tile1 . passable << '\\n' ; Tile tile2 { 15 , Terrain :: Mountain , false }; std :: cout << tile2 . height << \", \" << static_cast < int > ( tile2 . terrain ) << \", \" << tile2 . passable << '\\n' ; } 1 , 0 , true 15 , 3 , false","title":"\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u53ef\u80fd\u306b (P0683R1)"},{"location":"standardization/cpp20/#p0704r1","text":"C++17 \u307e\u3067\u306e\u30e1\u30f3\u30d0\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50 . * \u306f\u300c\u53f3\u8fba\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3001\u5de6\u8fba\u5024\u53c2\u7167\u4fee\u98fe\u3055\u308c\u305f\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u4f7f\u3046\u3053\u3068\u306f\u4e0d\u9069\u683c\u300d\u3068\u3044\u3046\u898f\u683c\u6587\u9762\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u305f\u3081\u3001\u540c\u3058\u610f\u5473\u3092\u3082\u3064\u6b21\u306e 2 \u3064\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5f8c\u8005\u3060\u3051\u4e0d\u9069\u683c\u3068\u3055\u308c\u3001\u4e00\u8cab\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002 #include <iostream> #include <string> struct Text { std :: string m_data ; const std :: string & get () const & { return m_data ; } }; int main () { std :: cout << Text { \"Hello\" }. get () << '\\n' ; // OK std :: cout << ( Text { \"Hello\" }. *& Text :: get )() << '\\n' ; // C++17 \u307e\u3067\u306f\u4e0d\u9069\u683c\u3001C++20 \u304b\u3089 OK } C++20 \u3067\u306f\u300c\u53f3\u8fba\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3001\u5de6\u8fba\u5024\u53c2\u7167\u4fee\u98fe\u3055\u308c\u305f \"\u975e const\" \u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u4f7f\u3046\u3053\u3068\u306f\u4e0d\u9069\u683c\u300d\u3068\u6587\u9762\u3092\u4fee\u6b63\u3057\u3001\u5f8c\u8005\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u30e1\u30f3\u30d0\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50\u306e\u4ed5\u69d8\u3092\u4e00\u8cab\u6027\u306e\u305f\u3081\u306b\u4fee\u6b63 (P0704R1)"},{"location":"standardization/cpp20/#2-p1236r1","text":"\u307b\u307c\u3059\u3079\u3066\u306e\u73fe\u4ee3\u7684\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u3001\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u578b\u306e\u8ca0\u6570\u306f 2 \u306e\u88dc\u6570\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001C++ \u3067\u306f\u8ca0\u6570\u306e\u8868\u73fe\u65b9\u6cd5\u306b\u3064\u3044\u3066\u898f\u683c\u3067\u5b9a\u3081\u3066\u3044\u306a\u304b\u3063\u305f\u305f\u3081\u3001\uff08\u73fe\u5b9f\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\uff092 \u306e\u88dc\u6570\u4ee5\u5916\u3067\u8ca0\u6570\u8868\u73fe\u3092\u5b9f\u88c5\u3059\u308b\u4f59\u5730\u3082\u6b8b\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002C++20 \u304b\u3089\u306f 2 \u306e\u88dc\u6570\u306e\u307f\u3092\u8a31\u53ef\u3059\u308b\u3088\u3046\u898f\u683c\u6587\u8a00\u304c\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002 \u8fd1\u5e74\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067 2 \u306e\u88dc\u6570\u4ee5\u5916\u3092\u4f7f\u3046\u4f8b\u306f\u30011 \u306e\u88dc\u6570\u3092\u4f7f\u3046 Unisys 2200 \u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u904e\u53bb\u306b\u306f\u7b26\u53f7\u3068\u7d76\u5bfe\u5024\u3067\u8868\u73fe\u3059\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3082\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306f\u30e2\u30c0\u30f3\u306a C++ \u3092\u958b\u767a\u74b0\u5883\u3068\u3057\u3066\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u898f\u683c\u5909\u66f4\u306b\u3088\u308b\u5f71\u97ff\u306f\u7121\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002","title":"\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u578b\u306e\u8ca0\u6570\u8868\u73fe\u3092 2 \u306e\u88dc\u6570\u3068\u898f\u5b9a (P1236R1)"},{"location":"standardization/cpp20/#8-bit-2","text":"10 \u9032\u8868\u73fe 2 \u306e\u88dc\u6570 1 \u306e\u88dc\u6570 \u7b26\u53f7\u3068\u7d76\u5bfe\u5024 127 01111111 01111111 01111111 126 01111110 01111110 01111110 125 01111101 01111101 01111101 2 00000010 00000010 00000010 1 00000001 00000001 00000001 0 00000000 00000000 00000000 -0 11111111 10000000 -1 11111111 11111110 10000001 -2 11111110 11111101 10000010 -126 10000010 10000001 11111110 -127 10000001 10000000 11111111 -128 10000000","title":"\uff08\u53c2\u8003\uff09\u7b26\u53f7\u4ed8\u304d 8-bit \u6574\u6570\u306e 2 \u9032\u8868\u73fe"},{"location":"standardization/cpp20/#0-no_unique_address-p0840r2","text":"\u30a2\u30ed\u30b1\u30fc\u30bf\u306a\u3069\u3092\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3068\u3057\u3066\u4fdd\u6301\u3059\u308b\u3068\u304d\u3001\u305d\u308c\u304c\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306a\u7a7a\u306e\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u4e00\u610f\u306b\u7528\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u305f\u3081\u3001\u30b5\u30a4\u30ba\u3092 0 \u306b\u3067\u304d\u305a\u30e1\u30e2\u30ea\u6d88\u8cbb\u304c\u7121\u99c4\u306b\u5897\u3048\u3066\u3057\u307e\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u3002 #include <iostream> struct Empty {}; struct X { int i ; Empty e ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 \u3088\u308a\u5927\u304d\u3044 } \u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u300c\u7a7a\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306f\u6700\u9069\u5316\u306b\u3088\u3063\u3066\u30b5\u30a4\u30ba 0 \u306b\u3057\u3066\u3088\u3044\u300d\u3068\u3044\u3046\u4ed5\u69d8\u3092\u5229\u7528\u3057\u305f Empty Base Optimization (EBO) \u3068\u3044\u3046\u30c6\u30af\u30cb\u30c3\u30af\u304c\u3042\u308a\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3082\u3000 std :: unique_ptr \u3084 std :: shared_ptr , std :: vector \u306a\u3069\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 #include <iostream> struct Empty {}; struct X : public Empty { int i ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 } \u3057\u304b\u3057\u3001\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u3067\u7d99\u627f\u306b\u3088\u308b EBO \u3092\u5b9f\u88c5\u3059\u308b\u3068\u30b3\u30fc\u30c9\u304c\u8907\u96d1\u306b\u306a\u308b\u3068\u3044\u3046\u6b20\u70b9\u304c\u3042\u308a\u307e\u3057\u305f\u3002C++20 \u3067\u306f\u30e1\u30f3\u30d0\u306e\u5ba3\u8a00\u306b [ [no_unique_address ] ] \u5c5e\u6027\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u7d99\u627f\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30e9\u304c EBO \u3068\u540c\u3058\u3088\u3046\u306a\u6700\u9069\u5316\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u5f93\u6765\u306e\u7d99\u627f\u306b\u3088\u308b EBO \u3092\u4f7f\u3063\u3066\u3044\u305f\u30b3\u30fc\u30c9\u3092\u3001\u3088\u308a\u5358\u7d14\u306a\u30b3\u30fc\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002 #include <iostream> struct Empty {}; struct X { int i ; [[ no_unique_address ]] Empty e ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 }","title":"\u30e1\u30f3\u30d0\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7a7a\u306e\u30af\u30e9\u30b9\u306e\u5834\u5408\u306b\u30e1\u30e2\u30ea\u6d88\u8cbb\u3092 0 \u306b\u3067\u304d\u308b [[no_unique_address]] \u5c5e\u6027\u3092\u8ffd\u52a0 (P0840R2)"},{"location":"standardization/cpp20/#typename-p0634r3","text":"C++17 \u3067\u4f9d\u5b58\u540d\u304c\u578b\u3067\u3042\u308b\u5834\u5408\u306b typename \u3092\u4ed8\u3051\u306a\u3044\u306e\u306f\u3001\u6d3e\u751f\u30af\u30e9\u30b9\u5b9a\u7fa9\u6642\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a\u3068\u3001\u521d\u671f\u5316\u5b50\u30ea\u30b9\u30c8\u3067\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a\u306e\u307f\u3067\u3057\u305f\uff08\u53b3\u5bc6\u306b\u306f\u3053\u306e 2 \u3064\u306b\u306f typename \u3092\u4ed8\u3051\u3089\u308c\u307e\u305b\u3093\uff09\u3002C++20 \u3067\u306f\u3001\u578b\u540d\u3057\u304b\u4f7f\u3048\u306a\u3044\u3055\u3089\u306b\u3044\u304f\u3064\u304b\u306e\u6587\u8108\u3067 typename \u304c\u7701\u7565\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\u6b21\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u5de6\u53f3\u30bf\u30d6\u3067\u6bd4\u8f03\u3067\u304d\u307e\u3059\u3002 C++17 #include <vector> #include <string> template < class T , class Alloc = typename T :: allocator_type > struct S : T :: value_type // \u6d3e\u751f\u30af\u30e9\u30b9\u5b9a\u7fa9\u6642\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a { using value_type = typename T :: value_type ; S () : T :: value_type () {} // \u521d\u671f\u5316\u5b50\u30ea\u30b9\u30c8\u3067\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a typename T :: size_type max_size () const ; auto data () -> typename T :: pointer ; auto min_size () const { return static_cast < typename T :: size_type > ( 0 ); } }; template < class T > typename T :: size_type MaxSize (); int main () { S < std :: vector < std :: string >> s ; } C++20 #include <vector> #include <string> template < class T , class Alloc = T :: allocator_type > // OK struct S : T :: value_type // \u6d3e\u751f\u30af\u30e9\u30b9\u5b9a\u7fa9\u6642\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a { using value_type = T :: value_type ; // OK S () : T :: value_type () {} // \u521d\u671f\u5316\u5b50\u30ea\u30b9\u30c8\u3067\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u6307\u5b9a T :: size_type max_size () const ; // OK auto data () -> T :: pointer ; // OK auto min_size () const { return static_cast < T :: size_type > ( 0 ); // OK } }; template < class T > T :: size_type MaxSize (); // OK int main () { S < std :: vector < std :: string >> s ; }","title":"\u578b\u540d\u3067\u3042\u308b\u3053\u3068\u304c\u660e\u3089\u304b\u306a\u6587\u8108\u3067 typename \u3092\u7701\u7565\u53ef\u80fd\u306b (P0634R3)"},{"location":"standardization/cpp20/#p1064r0","text":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u5b9a\u53ef\u80fd\u3067\u3042\u308c\u3070\u3001\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3092\u901a\u3057\u305f\u4eee\u60f3\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3092 constexpr \u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 constexpr \u4fee\u98fe\u3055\u308c\u305f\u4eee\u60f3\u95a2\u6570\u3092\u975e constexpr \u95a2\u6570\u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3084\u3001\u305d\u306e\u9006\u3082\u53ef\u80fd\u3067\u3059\u3002 struct Cpp { virtual int version () const = 0 ; }; struct Cpp17 : Cpp { constexpr int version () const override { return 17 ; } }; struct Cpp20 : Cpp { constexpr int version () const override { return 20 ; } }; constexpr int GetVersion ( const Cpp & a ) { return a . version (); } int main () { constexpr Cpp17 cpp17 ; constexpr Cpp20 cpp20 ; static_assert ( GetVersion ( cpp17 ) == 17 ); static_assert ( GetVersion ( cpp20 ) == 20 ); }","title":"\u5b9a\u6570\u5f0f\u3067\u306e\u4eee\u60f3\u95a2\u6570\u547c\u3073\u51fa\u3057\u304c\u53ef\u80fd\u306b (P1064R0)"},{"location":"standardization/cpp20/#type_id-dynamic_cast-constexpr-p1327r1","text":"dynamic_cast \u3068 type_id \u304c\u3001\u4f8b\u5916\u3092\u6295\u3052\u308b\u30b1\u30fc\u30b9\u3092\u9664\u3044\u3066 constexpr \u306b\u306a\u308a\u307e\u3059\u3002 #include <typeinfo> struct Cpp { virtual int version () const = 0 ; }; struct Cpp17 : Cpp { constexpr int version () const override { return 17 ; } }; struct Cpp20 : Cpp { constexpr int version () const override { return 20 ; } }; int main () { constexpr static Cpp17 cpp17 ; constexpr const Cpp * pCpp = & cpp17 ; constexpr auto & cpptype = typeid ( * pCpp ); constexpr const Cpp & refCpp = cpp17 ; constexpr const Cpp17 & redCpp2 = dynamic_cast < const Cpp17 &> ( refCpp ); } \u6b21\u306e\u3088\u3046\u306b\u4f8b\u5916\u3092\u6295\u3052\u308b\u30b1\u30fc\u30b9\u3067\u306f constexpr \u306b\u3067\u304d\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 #include <typeinfo> struct Cpp { virtual int version () const = 0 ; }; struct Cpp17 : Cpp { constexpr int version () const override { return 17 ; } }; struct Cpp20 : Cpp { constexpr int version () const override { return 20 ; } }; int main () { constexpr Cpp * pCpp = nullptr ; constexpr auto & cpptype = typeid ( * pCpp ); //\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc: \u4f8b\u5916 std::bad_typeid \u3092\u6295\u3052\u308b\u305f\u3081 constexpr \u4e0d\u53ef constexpr static Cpp17 cpp17 ; constexpr const Cpp & refCpp = cpp17 ; constexpr const Cpp20 & redCpp2 = dynamic_cast < const Cpp20 &> ( refCpp ); // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc: \u4f8b\u5916 std::bad_cast \u3092\u6295\u3052\u308b\u305f\u3081 constexpr \u4e0d\u53ef }","title":"type_id \u3068 dynamic_cast \u304c constexpr \u306b (P1327R1)"},{"location":"standardization/cpp20/#p1330r0","text":"\u5171\u7528\u4f53\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u3068\u306f\u3001\u6700\u5f8c\u306b\u521d\u671f\u5316\u307e\u305f\u306f\u5024\u3092\u4ee3\u5165\u3057\u305f\u30e1\u30f3\u30d0\u306e\u3053\u3068\u3067\u3059\u3002C++17 \u3067\u306f\u5171\u7528\u4f53\u306e\u521d\u671f\u5316\u3084\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u5b9a\u6570\u5f0f\u3067\u884c\u3048\u307e\u3057\u305f\u304c\u3001\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u306e\u5207\u308a\u66ff\u3048\u306f\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u5b9a\u6570\u5f0f\u3067\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u306e\u5207\u308a\u66ff\u3048\u304c\u53ef\u80fd\u306b\u306a\u308b\u3068\u3001\u5171\u7528\u4f53\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u308b std :: string \u3084 std :: optional \u306a\u3069\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306e constexpr \u5bfe\u5fdc\u3092\u62e1\u5145\u3067\u304d\u307e\u3059\u3002\u975e\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\u672a\u5b9a\u7fa9\u52d5\u4f5c\u306a\u306e\u3067\u3001\u5b9a\u6570\u5f0f\u3067\u884c\u3046\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 #include <cstdint> union Value { float f ; std :: uint32_t i ; }; constexpr Value GetFloat ( float x ) { return Value { x }; // value.f \u304c\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0 } constexpr Value GetUint ( std :: uint32_t x ) { Value value = GetFloat ( 0.0f ); // value.f \u304c\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0 value . i = x ; // value.i \u304c\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u306b return value ; } int main () { static_assert ( GetUint ( 123 ). i == 123 ); }","title":"\u5b9a\u6570\u5f0f\u306b\u304a\u3044\u3066\u5171\u7528\u4f53\u306e\u30a2\u30af\u30c6\u30a3\u30d6\u30e1\u30f3\u30d0\u306e\u5207\u308a\u66ff\u3048\u304c\u53ef\u80fd\u306b (P1330R0)"},{"location":"standardization/cpp20/#try-catch-p1002r1","text":"\u3053\u308c\u307e\u3067 constexpr \u95a2\u6570\u306e\u4e2d\u306b\u306f try - catch \u30d6\u30ed\u30c3\u30af\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3057\u304b\u3057\u3001 std :: vector \u7b49\u306e\u30b3\u30f3\u30c6\u30ca\u3092 constexpr \u5bfe\u5fdc\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u306f\u3001\u3053\u306e\u5236\u9650\u304c\u969c\u58c1\u3068\u306a\u308b\u305f\u3081\u3001C++20 \u3067\u306f constexpr \u95a2\u6570\u306e\u4e2d\u306e try - catch \u306f\u3001\u5b9a\u6570\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3055\u308c\u308b\u3068\u304d\u306b\u306f\u7121\u8996\u3059\u308b\u3088\u3046\u4ed5\u69d8\u304c\u6539\u3081\u3089\u308c\u307e\u3059\u3002\u5b9a\u6570\u5f0f\u306e\u8a55\u4fa1\u4e2d\u306b\u4f8b\u5916\u3092\u6295\u3052\u308b\u3088\u3046\u3067\u3042\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 std :: vector \u306a\u3069\u3092 constexpr \u5bfe\u5fdc\u3055\u305b\u308b\u305f\u3081\u306e\u63aa\u7f6e\u3067\u3042\u308a\u3001\u5c06\u6765\u306e C++ \u306b\u304a\u3051\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u4f8b\u5916\u51e6\u7406\u306e\u5b9f\u73fe\u3092\u5426\u5b9a\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 #include <cstdint> #include <iostream> #include <exception> constexpr std :: uint32_t AddU8 ( std :: uint32_t a , std :: uint32_t b ) { if (( a + b ) >= 256 ) { throw std :: exception {}; } return a + b ; } constexpr std :: uint32_t DoubleU8 ( std :: uint32_t n ) { try { return AddU8 ( n , n ); } catch ( const std :: exception & except ) { return 0 ; } } int main () { static_assert ( DoubleU8 ( 123 ) == 246 ); // OK: \u4f8b\u5916\u3092\u6295\u3052\u305a\u306b\u5b9a\u6570\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u53ef\u80fd //static_assert(DoubleU8(200) > 0); // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc: \u5b9a\u6570\u5f0f\u3068\u3057\u3066\u8a55\u4fa1\u3055\u308c\u308b constexpr \u95a2\u6570\u5185\u3067\u4f8b\u5916\u3092\u6295\u3052\u308b\u305f\u3081 std :: cout << \"result: \" << DoubleU8 ( 200 ) << '\\n' ; // OK: \u5b9f\u884c\u6642\u306b\u8a55\u4fa1\u3055\u308c\u308b\u95a2\u6570\u3067\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b }","title":"\u5b9a\u6570\u5f0f\u306e\u6587\u8108\u3067\u306f try-catch \u3092\u7121\u8996\u3059\u308b\u3088\u3046\u306b (P1002R1)"},{"location":"standardization/cpp20/#deprecated-p1161r3","text":"\u3053\u308c\u307e\u3067 array [ x , y ] \u3068\u3044\u3046\u30b3\u30fc\u30c9\u3067\u306f\u3001\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u306e\u4f5c\u7528\u3067 y \u304c\u6dfb\u5b57\u6f14\u7b97\u306e\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u6319\u52d5\u306f\u7d1b\u3089\u308f\u3057\u304f\u3001\u5c06\u6765\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u591a\u6b21\u5143\u914d\u5217\u30af\u30e9\u30b9\u304c\u5b9f\u88c5\u3055\u308c\u305f\u3068\u304d\u3001\u6dfb\u5b57\u6f14\u7b97\u5b50\u3092\u8907\u6570\u306e\u5f15\u6570\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3088\u3046\u306a\u898f\u683c\u3092\u8ffd\u52a0\u3059\u308b\u3046\u3048\u3067\u306e\u969c\u58c1\u306b\u3082\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001C++20 \u304b\u3089\u3001 array [( x , y )] \u306e\u3088\u3046\u306b\u62ec\u5f27\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3092\u306e\u305e\u304d\u3001\u6dfb\u5b57\u5f0f\u306b\u304b\u304b\u308b\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u306e\u4f7f\u7528\u304c deprecated \u306b\u306a\u308a\u307e\u3059\u3002\u53e4\u3044\u30b3\u30fc\u30c9\u3067 deprecated \u306a\u66f8\u304d\u65b9\u3092\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u524d\u8ff0\u306e\u3088\u3046\u306b () \u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u30b3\u30fc\u30c9\u306e\u6319\u52d5\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u305a\u306b\u79fb\u690d\u304c\u53ef\u80fd\u3067\u3059\u3002 #include <vector> int main () { std :: vector < int > v ( 10 ); int index = 0 ; v [ ++ index , 0 ] = - 1 ; // C++17 \u307e\u3067 OK, C++20 \u304b\u3089 deprecated v [( ++ index , 0 )] = - 1 ; // OK }","title":"\u6dfb\u5b57\u5f0f\u306b\u304b\u304b\u308b\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u306e\u4f7f\u7528\u3092 deprecated \u306b (P1161R3)"},{"location":"standardization/cpp20/#using-p1099r5","text":"\u3053\u308c\u307e\u3067\u306f\u3001enum class \u306e\u30b9\u30b3\u30fc\u30d7\u89e3\u6c7a\u3092\u7701\u7565\u3059\u308b\u65b9\u6cd5\u304c\u7121\u304f\u3001\u6b21\u306e\u3088\u3046\u306a switch \u3067\u3001\u5217\u6319\u578b\u306e\u540d\u524d\u304c\u4f55\u5ea6\u3082\u767b\u5834\u3059\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u3001\u8aad\u307f\u306b\u304f\u304f\u3001\u9577\u3044\u5217\u6319\u578b\u306e\u540d\u524d\u304c\u907f\u3051\u3089\u308c\u308b\u539f\u56e0\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002 #include <iostream> #include <string_view> enum class Terrain { Open , Mountain , River , Ocean }; constexpr std :: string_view ToString ( Terrain terrain ) { using namespace std :: string_view_literals ; switch ( terrain ) { case Terrain :: Open : return \"Open\" sv ; case Terrain :: Mountain : return \"Mountain\" sv ; case Terrain :: River : return \"River\" sv ; case Terrain :: Ocean : return \"Ocean\" sv ; default : return \"\" sv ; } } int main () { std :: cout << ToString ( Terrain :: Mountain ); } C++20 \u3067\u306f using \u5ba3\u8a00\u3092\u62e1\u5f35\u3057\u3001 using Terrain :: Open ; \u3067 Open \u3092\u30a8\u30a4\u30ea\u30a2\u30b9\u3068\u3057\u3066\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f using enum \u5ba3\u8a00\u3068\u3044\u3046\u65b0\u3057\u3044\u4ed5\u7d44\u307f\u306b\u3088\u308a\u3001 using enum Terrain ; \u3067 Terrain \u304c\u30ed\u30fc\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5c0e\u5165\u3055\u308c\u3001\u30b9\u30b3\u30fc\u30d7\u89e3\u6c7a\u6f14\u7b97\u5b50\u3092\u4f7f\u308f\u305a\u306b\u305d\u306e\u5217\u6319\u5b50\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 enum class Terrain { Open , Mountain , River , Ocean }; constexpr std :: string_view ToString ( Terrain terrain ) { using namespace std :: string_view_literals ; switch ( terrain ) { using enum Terrain ; // using enum \u5ba3\u8a00\u3067\u3001\u5217\u6319\u578b\u306e\u540d\u524d Terrain \u3092\u30ed\u30fc\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5c0e\u5165 case Open : return \"Open\" sv ; case Mountain : return \"Mountain\" sv ; case River : return \"River\" sv ; case Ocean : return \"Ocean\" sv ; default : return \"\" sv ; } } int main () { using Terrain :: Mountain ; // using \u5ba3\u8a00\u3067\u3001\u5217\u6319\u5b50 Mountain \u3092\u30ed\u30fc\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5c0e\u5165 std :: cout << ToString ( Mountain ); } \u306a\u304a\u3001\u6b21\u306e\u3088\u3046\u306b\u8907\u6570\u306e using \u5ba3\u8a00\u306b\u3088\u3063\u3066\u540d\u524d\u306e\u885d\u7a81\u304c\u8d77\u3053\u308b\u5834\u5408\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> #include <string_view> enum class Terrain { Open , Mountain , River , Ocean }; enum class State { Open , Closed }; int main () { using enum Terrain ; // OK using enum State ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc: Terrain::Open \u3068 State::Open \u306e\u540d\u524d\u304c\u885d\u7a81 }","title":"\u30b9\u30b3\u30fc\u30d7\u4ed8\u304d\u5217\u6319\u578b\u306b\u5bfe\u3059\u308b using \u5ba3\u8a00\u304c\u3067\u304d\u308b\u3088\u3046\u306b (P1099R5)"},{"location":"standardization/cpp20/#nodiscard-p1771r1","text":"C++17 \u3067 [ [nodiscard ] ] \u304c\u5c0e\u5165\u3055\u308c\u305f\u969b\u3001\u4ed5\u69d8\u3067\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\uff08\u305f\u3060\u3057\u3001GCC \u3067\u306f\u8b66\u544a\u3092\u51fa\u3057\u3064\u3064\u3082\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u4ed8\u3051\u305f [ [nodiscard ] ] \u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3057\u305f\uff09\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u547c\u3073\u51fa\u3057\u306b\u3088\u3063\u3066\u4f5c\u6210\u3055\u308c\u305f\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u610f\u56f3\u305b\u305a\u7121\u8996\u3055\u308c\u305f\u3068\u304d\u306b\u8b66\u544a\u3092\u51fa\u305b\u308b\u3068\u3001\u30e6\u30fc\u30b6\u306e\u9593\u9055\u3044\u3092\u6e1b\u3089\u305b\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3082 [ [nodiscard ] ] \u5c5e\u6027\u3092\u4ed8\u3051\u3089\u308c\u308b\u3088\u3046\u3001C++17 \u5411\u3051\u306e\u898f\u683c\u306b\u3055\u304b\u306e\u307c\u3063\u3066\u4ed5\u69d8\u304c\u4fee\u6b63\u3055\u308c\u3001C++20 \u304a\u3088\u3073\u3001\u3053\u306e\u5909\u66f4\u306b\u5bfe\u5fdc\u3057\u305f C++17 \u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u65b0\u4ed5\u69d8\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u306a\u304a\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u305f\u5834\u5408\u3067\u3082\u8b66\u544a\u306f\u6d88\u3048\u307e\u305b\u3093\u3002 struct Circle { double x , y , r ; Circle () = default ; [[ nodiscard ]] constexpr Circle ( double _x , double _y , double _r ) noexcept : x ( _x ), y ( _y ), r ( _r ) {} void draw () const { /* ... */ } }; int main () { Circle ( 200 , 300 , 50 ); // warning: nodiscard \u5c5e\u6027\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u4f5c\u6210\u3055\u308c\u305f\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7121\u8996 Circle ( 400 , 300 , 50 ). draw (); }","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b [[nodiscard]] \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b (P1771R1)"},{"location":"standardization/cpp20/#_2","text":"","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"standardization/cpp20/#p0457r2","text":"std :: basic_string \u3068 std :: basic_string_view \u306b\u3001 starts_with () \u3068 ends_with () \u30e1\u30f3\u30d0\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002 #include <iostream> #include <string_view> constexpr bool HasPNGExtension ( std :: string_view filePath ) { // \u6587\u5b57\u5217\u304c \".png\" \u3067\u7d42\u308f\u308b\u306a\u3089 true, \u305d\u308c\u4ee5\u5916\u306f false \u3092\u8fd4\u3059 return filePath . ends_with ( \".png\" ); } int main () { std :: cout << std :: boolalpha ; std :: cout << HasPNGExtension ( \"picture.png\" ) << '\\n' ; std :: cout << HasPNGExtension ( \"photo.jpg\" ) << '\\n' ; std :: cout << HasPNGExtension ( \"music.mp3\" ) << '\\n' ; } true false false","title":"\u6587\u5b57\u5217\u306e\u5148\u982d\u3084\u672b\u5c3e\u304c\u3001\u3042\u308b\u6587\u5b57\u5217\u3068\u4e00\u81f4\u3059\u308b\u304b\u5224\u5b9a (P0457R2)"},{"location":"standardization/cpp20/#operatorbasic_istream-chart-chartn-p0487r1","text":"C++17 \u307e\u3067\u306e operator >> ( basic_istream & , charT * ) \u306f\u3001\u95a2\u6570\u306b\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u304c\u6e21\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3078\u306e\u5bfe\u7b56\u304c\u5fc5\u8981\u3067\u3057\u305f\u3002 #include <iostream> #include <iomanip> int main () { char buffer [ 4 ]; // std::cin >> buffer; // \u5371\u967a: \u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u53ef\u80fd\u6027 std :: cin >> std :: setw ( 4 ) >> buffer ; // OK: \u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u5bfe\u7b56 std :: cout << buffer ; } C++20 \u3067\u306f\u5f15\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3001\u95a2\u6570\u304c\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u5bfe\u7b56\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 // C++17 \u307e\u3067 template < class charT , class traits > basic_istream < charT , traits >& operator >> ( basic_istream < charT , traits >& in , charT * s ); // C++20 \u304b\u3089 template < class charT , class traits , size_t N > basic_istream < charT , traits >& operator >> ( basic_istream < charT , traits >& in , charT ( & s )[ N ]); #include <iostream> #include <iomanip> int main () { char buffer [ 4 ]; std :: cin >> buffer ; // OK: C++20 \u3067\u306f\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u9632\u3052\u308b std :: cout << buffer ; } \u3053\u306e\u5909\u66f4\u306b\u4f34\u3044\u3001C++17 \u307e\u3067\u306f\u6709\u52b9\u3060\u3063\u305f\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3001C++20 \u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> #include <iomanip> int main () { char * p = new char [ 100 ]; std :: cin >> std :: setw ( 100 ) >> p ; // C++20 \u304b\u3089\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc std :: cout << p ; }","title":"operator&gt;&gt;(basic_istream&amp;, charT*) \u306e\u7b2c\u4e8c\u5f15\u6570\u3092 charT(&amp;)[N] \u306b\u5909\u66f4\u3057\u3066\u5b89\u5168\u306b (P0487R1)"},{"location":"standardization/cpp20/#nodiscard-p0600r1","text":"C++17 \u3067\u5c0e\u5165\u3055\u308c\u305f [ [nodiscard ] ] \u5c5e\u6027\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u6d3b\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002C++20 \u3067\u306f\u4ed8\u4e0e\u57fa\u6e96\u3092\u300c\u623b\u308a\u5024\u306e\u7121\u8996\u304c\u30c8\u30e9\u30d6\u30eb\u3084\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306a\u3069\u306e\u91cd\u5927\u306a\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059 C++ \u306e\u95a2\u6570\u300d\u3068\u3057\u3001 async () , launder () , allocate () , empty () , operator new () \u304c\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 #include <vector> #include <future> int main () { std :: vector < int > v = { 10 , 20 , 30 }; v . empty (); // C++20 \u3067\u306f\u8b66\u544a std :: async ( std :: launch :: async , [] { return 1 ; }); // C++20 \u3067\u306f\u8b66\u544a } MSVC \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f Visual Studio 2017 15.6 \u4ee5\u964d\u3001\u898f\u683c\u306e\u7bc4\u56f2\u3092\u8d85\u3048\u3066\u3088\u308a\u591a\u304f\u306e\u95a2\u6570\uff08 2,500 \u500b\u4ee5\u4e0a \uff09\u306b [ [nodiscard ] ] \u5c5e\u6027\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001 Chromium \u306e\u30bd\u30fc\u30b9\u306b\u7121\u610f\u5473\u306a std::move() \u304c\u898b\u3064\u304b\u308b \u306a\u3069\u3001\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30d0\u30b0\u306e\u767a\u898b\u306b\u5f79\u7acb\u3063\u3066\u3044\u307e\u3059\u3002","title":"\u623b\u308a\u5024\u306e\u7121\u8996\u304c\u4e0d\u5177\u5408\u3092\u3082\u305f\u3089\u3059\u95a2\u6570\u306b [[nodiscard]] \u3092\u4ed8\u4e0e (P0600R1)"},{"location":"standardization/cpp20/#array-constexpr-p1023r0-p1032r1","text":"C++17 \u306e < array > \u30d8\u30c3\u30c0\u3067\u306f\u3001\u6bd4\u8f03\u6f14\u7b97\u5b50\u3001 swap () , fill () \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u3067\u3057\u305f\u3002C++20 \u3067\u306f\u3055\u3089\u306b\u3001array \u306e\u6bd4\u8f03\u6f14\u7b97\u306e\u5b9f\u88c5\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b std :: equal () \u3068 std :: lexicographical_compare () \u304c constexpr \u306b\u306a\u3063\u305f (P0202R3) \u3053\u3068\u306b\u3068\u3082\u306a\u3044\u3001array \u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092 constexpr \u3068\u3057\u3001\u307e\u305f swap () \u3068 fill () \u306b\u3064\u3044\u3066\u3082 constexpr \u306b\u3059\u308b\u3053\u3068\u3092\u6c7a\u3081\u3001array \u30d8\u30c3\u30c0\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u3067\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002","title":"&lt;array&gt; \u30d8\u30c3\u30c0\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u306b (P1023R0), (P1032R1)"},{"location":"standardization/cpp20/#chrono-zero-min-max-noexcept-p0972r0","text":"std :: chrono :: duration_values , std :: chrono :: duration , std :: chrono :: time_point \u306a\u3069\u306e zero () , min () , max () \u95a2\u6570\u306b noexcept \u304c\u4ed8\u304d\u307e\u3059\u3002","title":"&lt;chrono&gt; \u30d8\u30c3\u30c0\u306e zero(), min(), max() \u95a2\u6570\u304c noexcept \u306b (P0972R0)"},{"location":"standardization/cpp20/#pointer_traits-constexpr-p1006r1","text":"std :: vector \u3092 constexpr \u306b\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u305f\u3081\u3001 std :: pointer_traits :: pointer_to () \u95a2\u6570\u304c constrexpr \u306b\u306a\u308a\u307e\u3059\u3002","title":"pointer_traits \u304c constexpr \u306b (P1006R1)"},{"location":"standardization/cpp20/#assume_aligned-p1007r3","text":"\u30c7\u30fc\u30bf\u306e\u30a2\u30c9\u30ec\u30b9\u304c 16 \u30d0\u30a4\u30c8\u306a\u3069\u306e\u30b5\u30a4\u30ba\u306b\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c SIMD \u3092\u4f7f\u3063\u305f\u6700\u9069\u306a\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3067\u304d\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3042\u308b\u30dd\u30a4\u30f3\u30bf\u306e\u6307\u3059\u30c7\u30fc\u30bf\u304c\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f1d\u3048\u308b\u65b9\u6cd5\u3068\u3057\u3066\u3001GCC \u3084 Clang \u3067\u306f __builtin_assume_aligned () \u3084 __attribute__ (( assume_aligned ( alignment ))) , ICC \u3067\u306f __assume_aligned () \u306a\u3069\u306e\u72ec\u81ea\u62e1\u5f35\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u6a19\u6e96\u5316\u3055\u308c\u305f\u65b9\u6cd5\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002C++20 \u3067\u306f\u3001\u3053\u308c\u3089\u306e\u5dee\u7570\u3092\u5438\u53ce\u3059\u308b\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 template < size_t N , class T > [[ nodiscard ]] constexpr T * assume_aligned ( T * ptr ); \u5b9f\u969b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002 void Multiply ( float * x , size_t size , float factor ) { float * ax = std :: assume_aligned < 64 > ( x ); // x \u304c 64 \u30d0\u30a4\u30c8\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3067\u3042\u308b\u3053\u3068\u3092\u4f1d\u3048\u308b for ( size_t i = 0 ; i < size ; ++ i ) // \u30eb\u30fc\u30d7\u304c\u9069\u5b9c\u6700\u9069\u5316\u3055\u308c\u308b { ax [ i ] *= factor ; } }","title":"\u30dd\u30a4\u30f3\u30bf\u306e\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u6700\u9069\u5316\u30d2\u30f3\u30c8\u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f1d\u3048\u308b assume_aligned() \u95a2\u6570 (P1007R3)"},{"location":"standardization/cpp20/#make-p1020r1","text":"\u5b9f\u884c\u6642\u6027\u80fd\u306e\u305f\u3081\u306b\u3001 float \u3084 unsigned char \u306a\u3069\u7d44\u307f\u8fbc\u307f\u578b\u306e\u914d\u5217\u306e\u5024\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u521d\u671f\u5316\u3055\u305b\u305f\u3044\uff08\u30bc\u30ed\u521d\u671f\u5316\u3057\u306a\u3044\uff09\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001 make_unique \u3084 make_shared , allocate_shared \u3067\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3092\u4f5c\u6210\u3057\u305f\u5834\u5408\u306b\u306f\u5024\u521d\u671f\u5316\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002C++20 \u3067\u306f\u3001\u5024\u521d\u671f\u5316\u3092\u305b\u305a\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u521d\u671f\u5316\u3067\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570 make_unique_default_init , make_shared_default_init , allocate_shared_default_init \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 #include <iostream> #include <memory> // \u672a\u521d\u671f\u5316\u306e\u5909\u6570\u3092\u4f7f\u3046\u5b9f\u9a13\u7684\u306a\u30b3\u30fc\u30c9 int main () { float v [ 4 ]; // \u30c7\u30d5\u30a9\u30eb\u30c8\u521d\u671f\u5316 for ( int i = 0 ; i < 4 ; ++ i ) { std :: cout << v [ i ] << '\\n' ; } auto pv = std :: make_unique < float [] > ( 4 ); // \u5024\u521d\u671f\u5316 (0 \u521d\u671f\u5316) for ( int i = 0 ; i < 4 ; ++ i ) { std :: cout << pv [ i ] << '\\n' ; } auto pd = std :: make_unique_default_init < float [] > ( 4 ); // \u30c7\u30d5\u30a9\u30eb\u30c8\u521d\u671f\u5316 for ( int i = 0 ; i < 4 ; ++ i ) { std :: cout << pd [ i ] << '\\n' ; } } \u51fa\u529b\u4f8b 2 . 20325 e - 38 4 . 11052 e + 32 1 . 3013 e - 45 2 . 48626 e - 38 0 0 0 0 2 . 30415 e - 38 2 . 51341 e - 38 4 . 63281 e + 30 2 . 32703 e + 17","title":"\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306e\u4f5c\u6210\u6642\u306b\u5024\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u521d\u671f\u5316\u3059\u308b make \u95a2\u6570\u3092\u8ffd\u52a0 (P1020R1)"},{"location":"standardization/cpp20/#key_type-p0919r3","text":"C++17 \u307e\u3067\u306e unorderd_map \u3084 unordered_set \u306a\u3069\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u3067\u306f\u3001 find () , count () , equal_range () \u306a\u3069\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u884c\u3046\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u5f15\u6570\u306b key_type \u3092\u3068\u308a\u3001\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067 std :: string \u578b\u306e\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3055\u308c\u3066\u975e\u52b9\u7387\u3067\u3057\u305f\u3002 #include <string> #include <unordered_map> int main () { std :: unordered_map < std :: string , int > table = { /* ... */ }; auto it = table . find ( \"abc\" ); // std::string \u578b\u306e\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3055\u308c\u308b } C++20 \u3067\u306f\u3001\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf Hash \u304c transparent_key_equal \u30bf\u30b0\u3092\u6301\u3064\u3068\u304d\u306b\u3001 key_type \u4ee5\u5916\u306e\u578b\u3092\u5f15\u6570\u306b\u3068\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u4f7f\u7528\u53ef\u80fd\u306b\u306a\u308a\u3001\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u3092\u56de\u907f\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 #include <string> #include <string_view> #include <unordered_map> struct string_hash { using transparent_key_equal = std :: equal_to <> ; // KeyEqual to use using hash_type = std :: hash < std :: string_view > ; // helper local type size_t operator ()( std :: string_view txt ) const { return hash_type {}( txt ); } size_t operator ()( const std :: string & txt ) const { return hash_type {}( txt ); } size_t operator ()( const char * txt ) const { return hash_type {}( txt ); } }; int main () { using namespace std :: literals ; std :: unordered_map < std :: string , int , string_hash > table = { /* ... */ }; auto it1 = table . find ( \"abc\" ); // std::string \u578b\u306e\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f5c\u6210\u3055\u308c\u306a\u3044 auto it2 = table . find ( \"abc\" sv ); // std::string \u578b\u306e\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f5c\u6210\u3055\u308c\u306a\u3044 }","title":"\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u64cd\u4f5c\u3067\u3001key_type \u3068\u6bd4\u8f03\u53ef\u80fd\u306a\u578b\u3092\u5909\u63db\u305b\u305a\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b (P0919R3)"},{"location":"standardization/cpp20/#2-stdmidpoint-p0811r3","text":"2 \u3064\u306e\u5024 a , b \u306e\u4e2d\u70b9\u3092\u8a08\u7b97\u3059\u308b\u969b\u306b\u3001\u5358\u7d14\u306a ( a + b ) / 2 \u3068\u3044\u3046\u5f0f\u3067\u306f\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002C++20 \u3067\u8ffd\u52a0\u3055\u308c\u308b std :: midpoint () \u95a2\u6570\u3067\u306f\u3001\u6574\u6570\u306b\u5bfe\u3057\u3066 constexpr Integer midpoint ( Integer a , Integer b ) noexcept { using U = make_unsigned_t < Integer > ; return a > b ? a - ( U ( a ) - b ) / 2 : a + ( U ( b ) - a ) / 2 ; } \u306e\u3088\u3046\u306a\u5b9f\u88c5\u304c\u4f7f\u308f\u308c\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u56de\u907f\u3067\u304d\u307e\u3059\u3002 ( a + b ) \u304c\u5947\u6570\u306b\u306a\u308b\u30b1\u30fc\u30b9\u306e\u7d50\u679c\u306f a \u306e\u65b9\u5411\u306b\u4e38\u3081\u3089\u308c\u307e\u3059\u3002 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u5bfe\u3057\u3066\u306f\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002 Float midpoint ( Float a , Float b ) { return isnormal ( a ) && isnormal ( b ) ? a / 2 + b / 2 : ( a + b ) / 2 ; } #include <iostream> #include <numeric> int main () { std :: cout << ( 2 ' 000 ' 000 ' 000 + 1 ' 000 ' 000 ' 000 ) / 2 << '\\n' ; // \u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc std :: cout << std :: midpoint ( 2 ' 000 ' 000 ' 000 , 1 ' 000 ' 000 ' 000 ) << '\\n' ; // 1500000000 std :: cout << std :: midpoint ( 1 , 4 ) << '\\n' ; // 2 std :: cout << std :: midpoint ( 4 , 1 ) << '\\n' ; // 3 }","title":"2 \u3064\u306e\u5024\u306e\u4e2d\u70b9\u3092\u8a08\u7b97\u3059\u308b std::midpoint() \u95a2\u6570 (P0811R3)"},{"location":"standardization/cpp20/#2-stdlerp-p0811r3","text":"2 \u70b9 a , b \u306e\u9593\u3092\u30d1\u30e9\u30e1\u30fc\u30bf t \u306b\u3088\u3063\u3066\u7dda\u5f62\u88dc\u9593\u3059\u308b\u95a2\u6570\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\u8a08\u7b97\u7d50\u679c r \u306f a + t * ( b - a ) \u306b\u3088\u3063\u3066\u6c42\u3081\u3089\u308c\u307e\u3059\u304c\u3001\u5b9f\u88c5\u306b\u3088\u308a isfinite ( a ) && isfinite ( b ) \u306e\u3068\u304d lerp ( a , b , 0 ) == a && lerp ( a , b , 1 ) == b 0 <= t && t <= 1 \u306e\u3068\u304d isfinite ( r ) isfinite ( t ) && a == b \u306e\u3068\u304d r == a isfinite ( t ) || ! isnan ( t ) && ( b - a ) != 0 \u306e\u3068\u304d !isnan(r) \u307e\u305f\u3001 cmp ( lerp ( a , b , t2 ), lerp ( a , b , t1 )) * cmp ( t2 , t1 ) * cmp ( b , a ) >= 0 (cmp \u306f -1, 0, 1 \u3092\u8fd4\u3059\u4e09\u65b9\u6bd4\u8f03\u95a2\u6570\u3068\u3059\u308b) \u3067\u3042\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u307e\u3059\u3002 #include <iostream> #include <numeric> int main () { std :: cout << std :: lerp ( 0.0 , 10.0 , 0.0 ) << '\\n' ; // 0 std :: cout << std :: lerp ( 0.0 , 10.0 , 0.3 ) << '\\n' ; // 3 std :: cout << std :: lerp ( 0.0 , 10.0 , 1.0 ) << '\\n' ; // 10 std :: cout << std :: lerp ( 0.0 , 10.0 , 1.2 ) << '\\n' ; // 12 }","title":"2 \u3064\u306e\u5024\u306e\u7dda\u5f62\u88dc\u9593\u3092\u8a08\u7b97\u3059\u308b std::lerp() \u95a2\u6570 (P0811R3)"},{"location":"standardization/cpp20/#version-p0754r2","text":"__cpp_lib_byte , __cpp_lib_void_t \u306e\u3088\u3046\u306a\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u30c6\u30b9\u30c8\u30de\u30af\u30ed\u3001\u305d\u306e\u4ed6\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3084\u5b9f\u88c5\u56fa\u6709\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u308b\u76ee\u7684\u306e < version > \u30d8\u30c3\u30c0\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002 \u4f8b\u3048\u3070 C++20 \u4ee5\u524d\u306e MSVC \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001 < yvals_core . h > \u3068\u3044\u3046\u72ec\u81ea\u30d8\u30c3\u30c0\u306b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u30c6\u30b9\u30c8\u30de\u30af\u30ed\u304c\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001C++20 \u4ee5\u964d\u3067\u306f\u3042\u3089\u3086\u308b\u5b9f\u88c5\u306b\u304a\u3044\u3066\u3001 < version > \u30d8\u30c3\u30c0\u3092\u898b\u308b\u3053\u3068\u3067\u3001\u3053\u3046\u3057\u305f\u5b9f\u88c5\u56fa\u6709\u306e\u60c5\u5831\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u305f\u3081\u5229\u4fbf\u6027\u304c\u9ad8\u307e\u308a\u307e\u3059\u3002","title":"\u5b9f\u88c5\u56fa\u6709\u306e\u60c5\u5831\u3092\u307e\u3068\u3081\u308b &lt;version&gt; \u30d8\u30c3\u30c0\u3092\u8ffd\u52a0 (P0754R2)"},{"location":"standardization/cpp20/#is_nothrow_convertible-p0758r1","text":"\u578b From \u304b\u3089\u578b To \u3078\u306e\u6697\u9ed9\u306e\u5909\u63db\u304c\u53ef\u80fd\u3067\u3042\u308b\u304b\u3092\u8abf\u3079\u308b\u578b\u7279\u6027\u30af\u30e9\u30b9 std :: is_convertible < class From , class To > \u304c C++11 \u304b\u3089\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u5909\u63db\u304c noexcept \u3067\u3082\u3042\u308b\u304b\u3092\u8abf\u3079\u3089\u308c\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u3053\u306e\u3053\u3068\u304c\u539f\u56e0\u3067\u3001 std :: decay_copy \u306e\u63d0\u6848 ( N3255 ) \u306b\u304a\u3044\u3066\u3001\u9069\u5207\u306a noexcept \u4f8b\u5916\u4ed5\u69d8\u3092\u79fb\u690d\u6027\u306e\u3042\u308b\u65b9\u6cd5\u3067\u5b9a\u7fa9\u3067\u304d\u306a\u3044\u554f\u984c ( LWG 2040 ) \u304c\u6307\u6458\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002 template < class T > typename decay < T >:: type decay_copy ( T && v ) noexcept ( ??? /* is_nothrow_convertible<T, T>::value */ ); C++20 \u304b\u3089\u306f\u3001 noexcept \u306a\u6697\u9ed9\u306e\u5909\u63db\u304c\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u8abf\u3079\u308b\u65b0\u3057\u3044\u578b\u7279\u6027\u30af\u30e9\u30b9 std :: is_nothrow_convertible < class From , class To > \u304c\u5b9f\u88c5\u3055\u308c\u308b\u3053\u3068\u3067\u554f\u984c\u3092\u89e3\u6d88\u3067\u304d\u307e\u3059\u3002 \u65e2\u5b58\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u306b\u304a\u3044\u3066\u3082\u3001 std :: basic_string \u306e\u30e1\u30f3\u30d0\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3001\u3088\u308a\u9069\u5207\u306a noexcept \u4f8b\u5916\u4ed5\u69d8\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306b\u6d3b\u7528\u3055\u308c\u307e\u3059\u3002 template < class T > size_type find ( const T & t , size_type pos = 0 ) const noexcept ( is_nothrow_convertible_v < const T & , basic_string_view < CharT , Traits >> );","title":"\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u6697\u9ed9\u306e\u5909\u63db\u304c\u53ef\u80fd\u304b\u8abf\u3079\u308b is_nothrow_convertible (P0758R1)"},{"location":"standardization/cpp20/#stdto_address-p0653r2","text":"\u30dd\u30a4\u30f3\u30bf\u30e9\u30a4\u30af\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5f15\u6570\u306b\u3068\u308a\u3001\u305d\u308c\u304c\u8868\u3059\u306e\u3068\u540c\u3058\u30a2\u30c9\u30ec\u30b9\u3092\u751f\u30dd\u30a4\u30f3\u30bf\u3067\u8fd4\u3059\u95a2\u6570 std :: to_address ( p ) \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30dd\u30a4\u30f3\u30bf\u578b\u306e\u5834\u5408\u306f\u305d\u306e\u5024\u3092\u8fd4\u3057\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u3001 std :: pointer_traits < Ptr > :: to_address ( p ) \u306e\u7279\u6b8a\u5316\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066\u4f7f\u3048\u308c\u3070\u305d\u306e\u623b\u308a\u5024\u3092\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f std :: to_address ( p . operator -> ()) \u306e\u623b\u308a\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002","title":"\u30dd\u30a4\u30f3\u30bf\u30e9\u30a4\u30af\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u5f97\u3059\u308b std::to_address() \u95a2\u6570 (P0653R2)"},{"location":"standardization/cpp20/#complex-constexpr-p0415r1","text":"< complex > \u30d8\u30c3\u30c0\u304c\u63d0\u4f9b\u3059\u308b\u95a2\u6570\u306e\u3046\u3061\u3001\u8907\u7d20\u6570\u306e\u56db\u5247\u6f14\u7b97\u3001\u30ce\u30eb\u30e0\u306e\u53d6\u5f97\u3001\u5171\u5f79\u8907\u7d20\u6570\u306e\u53d6\u5f97\u306a\u3069\u3001 constexpr \u975e\u5bfe\u5fdc\u306e\u6570\u5b66\u95a2\u6570 (sqrt \u306a\u3069) \u3092\u4f7f\u308f\u305a\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3082\u306e\u304c constexpr \u5316\u3055\u308c\u307e\u3059\u3002","title":"&lt;complex&gt; \u30d8\u30c3\u30c0\u306e\u95a2\u6570\u306e constexpr \u5bfe\u5fdc\u3092\u5f37\u5316 (P0415R1)"},{"location":"standardization/cpp20/#stdis_constant_evaluated-p0595r2","text":"C++17 \u307e\u3067\u306f\u3001\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9\u3092\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a55\u4fa1\u304b\u5b9f\u884c\u6642\u8a55\u4fa1\u304b\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u308b\u65b9\u6cd5\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002C++20 \u3067\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a55\u4fa1\u3055\u308c\u3066\u3044\u308b\u6587\u8108\u3067\u306f true \u3092\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u3067\u306f false \u3092\u8fd4\u3059 std :: is_constant_evaluated () \u95a2\u6570\u304c < type_traits > \u30d8\u30c3\u30c0\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u4f8b\u3048\u3070\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067 constexpr \u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u6570\u5b66\u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\u969b\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a55\u4fa1\u3067\u306f constexpr \u7248\u306e\u5b9f\u88c5\u3092\u3001\u5b9f\u884c\u6642\u306b\u306f\u975e constexpr \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b9f\u88c5\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u9078\u629e\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u306a\u304a\u3001 std :: is_constant_evaluated () \u3092 if constexpr \u306e ( ) \u5185\u3084 static_assert \u5185\u3067\u4f7f\u3046\u3068\u5e38\u306b true \u306b\u8a55\u4fa1\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u57fa\u672c\u7684\u306b\u306f if ( std :: is_constant_evaluated ()) \u3068\u66f8\u304d\u307e\u3059\u3002 #include <cmath> #include <type_traits> #include <iostream> #include <iomanip> constexpr float Sin_impl ( float x2 , int i , int k , float xn , long long nf ) { return ( i > 10 ) ? 0.0f : ( k * xn / nf + Sin_impl ( x2 , i + 2 , - k , xn * x2 , nf * ( i + 1 ) * ( i + 2 ))); } constexpr float Sin ( float x ) { if ( std :: is_constant_evaluated ()) { return Sin_impl ( x * x , 1 , 1 , x , 1 ); } else { return std :: sin ( x ); } } int main () { constexpr float Pi = 3.14159265f ; constexpr float theta = Pi / 4.0 ; constexpr float x1 = Sin ( theta ); // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a08\u7b97 float x2 = Sin ( theta ); // \u5b9f\u884c\u6642\u8a08\u7b97 std :: cout << std :: setprecision ( 16 ); std :: cout << x1 << '\\n' ; std :: cout << x2 << '\\n' ; } 0 . 7071068286895752 0 . 7071067690849304","title":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a55\u4fa1\u306e\u6587\u8108\u304b\u5b9f\u884c\u6642\u8a55\u4fa1\u306e\u6587\u8108\u304b\u3092\u5224\u5225\u3067\u304d\u308b std::is_constant_evaluated() \u95a2\u6570 (P0595R2)"},{"location":"standardization/cpp20/#p0020r6","text":"std :: atomic < T > \u306e float , double , long double \u578b\u306e\u7279\u6b8a\u5316\u306b\u3001\u30e1\u30f3\u30d0\u95a2\u6570 fetch_add () , fetch_sub () , operator += () , operator -= () \u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002","title":"\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b\u306e\u30a2\u30c8\u30df\u30c3\u30af\u64cd\u4f5c\u3092\u62e1\u5f35 (P0020R6)"},{"location":"standardization/cpp20/#stdmemory_order-enum-class-p0439r0","text":"C++17 \u307e\u3067 enum \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u305f std :: memory_order \u3092\u3001\u30e2\u30c0\u30f3\u306a C++ \u6587\u6cd5\u3068\u578b\u5b89\u5168\u306e\u305f\u3081\u306b\u3001 enum class \u3067\u5b9a\u7fa9\u3059\u308b\u4ed5\u69d8\u306b\u5909\u66f4\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u307e\u3067\u306e\u8868\u8a18\u306f\u5b9a\u6570\u3067\u63d0\u4f9b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u305f\u3081\u3001\u65e2\u5b58\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u5f71\u97ff\u3092\u53d7\u3051\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u30d0\u30a4\u30ca\u30ea\u4e92\u63db\u6027\u306e\u305f\u3081\u306b\u3001 enum class \u306e\u57fa\u5e95\u578b\u306e\u9078\u629e\u306f\u5b9f\u88c5\u306b\u4efb\u305b\u3089\u308c\u3066\u3044\u307e\u3059\u3002 C++17 namespace std { typedef enum memory_order { memory_order_relaxed , memory_order_consume , memory_order_acquire , memory_order_release , memory_order_acq_rel , memory_order_seq_cst } memory_order ; } C++20 namespace std { enum class memory_order /* : unspecified */ { relaxed , consume , acquire , release , acq_rel , seq_cst }; inline constexpr memory_order memory_order_relaxed = memory_order :: relaxed ; inline constexpr memory_order memory_order_consume = memory_order :: consume ; inline constexpr memory_order memory_order_acquire = memory_order :: acquire ; inline constexpr memory_order memory_order_release = memory_order :: release ; inline constexpr memory_order memory_order_acq_rel = memory_order :: acq_rel ; inline constexpr memory_order memory_order_seq_cst = memory_order :: seq_cst ; }","title":"std::memory_order \u3092 enum class \u306b\u5909\u66f4 (P0439R0)"},{"location":"standardization/cpp20/#hash-p0809r0","text":"C++17 \u307e\u3067\u306f\u3001\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u306e operator == , operator != \u306b\u3064\u3044\u3066\u3001\u300c\u4e21\u8005\u306e Hash \u3068 Pred \u304c\u305d\u308c\u305e\u308c\u540c\u4e00\u306e\u6319\u52d5\u3092\u3057\u306a\u3044\u5834\u5408\u306f\u672a\u5b9a\u7fa9\u52d5\u4f5c\u300d\u3068\u898f\u683c\u306b\u8a18\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u30bd\u30eb\u30c8\u3092\u4f7f\u3046\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u6301\u3064\u30b3\u30f3\u30c6\u30ca\u540c\u58eb\u306e\u6bd4\u8f03\u3082\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3068\u3057\u3066\u60f3\u5b9a\u3055\u308c\u3001\u307e\u305f\u3001\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306e\u5b9f\u88c5\u3082\u96e3\u3057\u304f\u306a\u304b\u3063\u305f\u3053\u3068\u304b\u3089\u3001C++20 \u304b\u3089\u306f\u3053\u306e\u3046\u3061 Hash \u306b\u95a2\u3059\u308b\u8a18\u8ff0\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002 #include <iostream> #include <unordered_map> #include <random> #include <string> template < class Type > struct RandomizedHash { size_t rnd ; RandomizedHash () { std :: random_device rd ; rnd = std :: uniform_int_distribution < size_t > {}( rd ); } size_t operator ()( const Type & s ) const { return ( std :: hash < Type > {}( s ) ^ rnd ); } }; int main () { std :: unordered_map < std :: string , int , RandomizedHash < std :: string >> u1 = { { \"One\" , 1 }, { \"Two\" , 2 }, { \"Three\" , 3 }, }; std :: unordered_map < std :: string , int , RandomizedHash < std :: string >> u2 = { { \"One\" , 1 }, { \"Two\" , 2 }, { \"Three\" , 3 }, }; // \u305d\u308c\u305e\u308c\u7570\u306a\u308b\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u8fd4\u3059 const std :: string s = \"abcde\" ; std :: cout << \"u1: \" << u1 . hash_function ()( s ) << '\\n' ; std :: cout << \"u2: \" << u2 . hash_function ()( s ) << '\\n' ; std :: cout << std :: boolalpha ; // C++17 \u307e\u3067\u306f\u672a\u5b9a\u7fa9\u52d5\u4f5c\u3001C++20 \u304b\u3089 OK std :: cout << ( u1 == u2 ) << '\\n' ; }","title":"Hash \u304c\u540c\u4e00\u306e\u6319\u52d5\u3092\u3057\u306a\u3044\u975e\u9806\u5e8f\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u3069\u3046\u3057\u306e\u6bd4\u8f03\u304c\u53ef\u80fd\u306b (P0809R0)"},{"location":"standardization/cpp20/#p0463r1","text":"\u3053\u308c\u307e\u3067\u306e C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u3092\u5224\u5225\u3059\u308b\u969b\u306b\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002C++20 \u304b\u3089\u306f\u3001\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3092\u8868\u3059 endian :: little , \u30d3\u30c3\u30b0\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3092\u8868\u3059 endian :: big , \u5b9f\u884c\u74b0\u5883\u306e\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3092\u8868\u3059 endian :: native \u306e 3 \u3064\u306e endian \u578b\u306e\u5217\u6319\u5b9a\u6570\uff08\u5024\u306f\u5b9f\u88c5\u306b\u4f9d\u5b58\uff09\u304c < type_traits > \u306b\u5b9a\u7fa9\u3055\u308c\u3001 endian :: native \u3092\u305d\u308c\u4ee5\u5916\u306e\u5024\u3068\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3067\u3001\u5b9f\u884c\u74b0\u5883\u306e\u30d0\u30a4\u30c8\u30aa\u30fc\u30c0\u3092\u5224\u5225\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u73fe\u5728\u306e C++ \u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3001\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3067\u3082\u30d3\u30c3\u30b0\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3067\u3082\u306a\u3044\u30df\u30c9\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\uff08PDP \u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306a\u3069\uff09\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30df\u30c9\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306e\u74b0\u5883\u306b\u304a\u3044\u3066\u306f\u3001 endian :: native \u306f endian :: big \u3067\u3082 endian :: little \u3067\u3082\u306a\u3044\u5024\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 #include <iostream> #include <type_traits> int main () { if constexpr ( std :: endian :: native == std :: endian :: little ) { std :: cout << \"Little-endian \\n \" ; } else if constexpr ( std :: endian :: native == std :: endian :: big ) { std :: cout << \"Big-endian \\n \" ; } else { std :: cout << \"Middle-endian \\n \" ; } }","title":"\u5b9f\u884c\u74b0\u5883\u306e\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3092\u5224\u5225\u3059\u308b\u305f\u3081\u306e\u5217\u6319\u5b9a\u6570\u3092\u8ffd\u52a0 (P0463R1)"},{"location":"standardization/cpp20/#cv-stdremove_cvref-trait-p0550r2","text":"\u578b\u304b\u3089 const \u3084 volatile \u306e\u4fee\u98fe\u304a\u3088\u3073\u53c2\u7167\u3092\u9664\u53bb\u3057\u305f\u3044\u3060\u3051\u3067\u3001\u914d\u5217\u304b\u3089\u30dd\u30a4\u30f3\u30bf\u3001\u95a2\u6570\u578b\u304b\u3089\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u5909\u63db\u306b\u3064\u3044\u3066\u306f\u4e0d\u8981\u3067\u3042\u3063\u3066\u3082\u3001C++17 \u3067\u306f std :: remove_cv_t < std :: remove_reference_t < T >> \u3068\u66f8\u304f\u3068\u9577\u304f\u306a\u308b\u305f\u3081 std :: decay \u3092\u4f7f\u3046\u3068\u3044\u3046\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3057\u305f\u3002C++20 \u304b\u3089\u306f std :: remove_cv_t < std :: remove_reference_t < T >> \u3068\u540c\u3058\u52b9\u679c\u3092\u6301\u3064 std :: remove_cvref trait \u3068\u3001\u305d\u306e\u30d8\u30eb\u30d1\u30fc\u578b std :: remove_cvref_t \u304c\u8ffd\u52a0\u3055\u308c\u3001\u77ed\u304f\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 std :: remove_reference_t < std :: remove_cv_t < T >> \u306e\u3088\u3046\u306a\u9806\u756a\u306e\u9593\u9055\u3044\u3092\u9632\u3050\u3053\u3068\u306b\u3082\u3064\u306a\u304c\u308a\u307e\u3059\u3002","title":"\u578b\u304b\u3089 cv \u4fee\u98fe\u3068\u53c2\u7167\u3092\u9664\u53bb\u3059\u308b std::remove_cvref trait (P0550R2)"},{"location":"standardization/cpp20/#stddecay-p0777r1","text":"C++17 \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u898f\u683c\u3067\u306f std :: decay_t \u304c\u304a\u3088\u305d 40 \u7b87\u6240\u3067\u4f7f\u308f\u308c\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u3046\u3061 cv \u4fee\u98fe\u306e\u9664\u53bb\u3084\u53c2\u7167\u306e\u9664\u53bb\u3060\u3051\u3067\u5341\u5206\u306a\u7b87\u6240\u306b\u3064\u3044\u3066\u3001\u5b9f\u88c5\u306e\u610f\u56f3\u3092\u3088\u308a\u660e\u78ba\u306b\u3059\u308b\u305f\u3081 std :: remove_reference_t \u3084\u3001C++20 \u304b\u3089\u5c0e\u5165\u3055\u308c\u308b std :: remove_cvref_t \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001 std :: apply \u3084\u3001 std :: optional , std :: variant \u306e\u4e00\u90e8\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306a\u3069\u3067\u7f6e\u304d\u63db\u3048\u304c\u767a\u751f\u3057\u307e\u3059\u3002","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306e\u4e0d\u5fc5\u8981\u306a std::decay \u306e\u4f7f\u7528\u3092\u56de\u907f (P0777R1)"},{"location":"standardization/cpp20/#numbers-p0631r8","text":"\u3053\u308c\u307e\u3067 C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u6570\u5b66\u5b9a\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\uff08 M_PI \u306a\u3069\u306f\u62e1\u5f35\uff09\u3002C++20 \u304b\u3089\u306f\u6570\u5b66\u5b9a\u6570\u3092\u307e\u3068\u3081\u305f < numbers > \u30d8\u30c3\u30c0\u304c\u8ffd\u52a0\u3055\u308c\u300113 \u7a2e\u985e\u306e\u6570\u5b66\u5b9a\u6570\u306e\u5909\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5ba3\u8a00\u3068\u3001\u305d\u308c\u3089\u306e double \u578b\u3078\u306e\u7279\u6b8a\u5316\u306e\u5b9a\u7fa9\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 \u5909\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30b3\u30f3\u30bb\u30d7\u30c8 floating_point \u3092\u4f7f\u3063\u3066\u3001 std :: numbers \u540d\u524d\u7a7a\u9593\u306b\u6b21\u306e\u3088\u3046\u306b\u5ba3\u8a00\u3055\u308c\u307e\u3059\u3002 template < floating_point T > inline constexpr T pi_v < T > = 3.141592653589793238462643383279502884 L ; \u5408\u308f\u305b\u3066 double \u578b\u3078\u306e\u7279\u6b8a\u5316\u306e\u5b9a\u7fa9\u304c\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u3067\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002 inline constexpr double pi = pi_v < double > ; C++20 \u3067\u8ffd\u52a0\u3055\u308c\u308b\u6570\u5b66\u5b9a\u6570\u306e\u4e00\u89a7\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 \u5b9a\u6570\u540d \u8aac\u660e binary128 \u306b\u5145\u5206\u306a\u7cbe\u5ea6\u3092\u6301\u3064\u5024 e_v e 2.718281828459045235360287471352662498L log2e_v 2 \u3092\u5e95\u3068\u3059\u308b e \u306e\u5bfe\u6570 1.442695040888963407359924681001892137L log10e_v 10 \u3092\u5e95\u3068\u3059\u308b e \u306e\u5bfe\u6570 0.434294481903251827651128918916605082L pi_v \u5186\u5468\u7387 (\u03c0) 3.141592653589793238462643383279502884L inv_pi_v 1/\u03c0 0.318309886183790671537767526745028724L inv_sqrtpi_v 1/\u221a\u03c0 0.564189583547756286948079451560772586L ln2_v 2 \u306e\u81ea\u7136\u5bfe\u6570 0.693147180559945309417232121458176568L ln10_v 10 \u306e\u81ea\u7136\u5bfe\u6570 2.302585092994045684017991454684364208L sqrt2_v \u221a2 1.414213562373095048801688724209698078L sqrt3_v \u221a3 1.732050807568877293527446341505872366L inv_sqrt3_v 1/\u221a3 0.577350269189625764509148780501957456L egamma_v \u30aa\u30a4\u30e9\u30fc\u306e\u5b9a\u6570 0.577215664901532860606512090082402431L phi_v \u9ec4\u91d1\u6570 (\u03c6) 1.618033988749894848204586834365638117L \u30b3\u30fc\u30c9\u3067\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001 using \u5ba3\u8a00\u306b\u3088\u3063\u3066\u8a18\u8ff0\u3092\u77ed\u304f\u3067\u304d\u307e\u3059\u3002 #include <iostream> #include <numbers> int main () { using std :: numbers :: pi ; using std :: numbers :: pi_v ; std :: cout << 2.0 * pi << '\\n' ; std :: cout << pi_v < float > << '\\n' ; }","title":"\u6570\u5b66\u5b9a\u6570\u3092\u63d0\u4f9b\u3059\u308b &lt;numbers&gt; \u30d8\u30c3\u30c0 (P0631R8)"},{"location":"standardization/cppx/","text":"C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848 \u8b70\u8ad6\u304c\u9032\u884c\u4e2d\u306e\u304a\u3082\u306a\u63d0\u6848\u3067\u3059\u3002\u6a19\u6e96\u5316\u4f1a\u8b70\u306b\u3088\u3063\u3066\u898f\u683c\u5316\u304c\u59a5\u5f53\u3067\u306a\u3044\u3068\u5224\u65ad\u3055\u308c\u305f\u5834\u5408\u306f\u63a1\u629e\u3055\u308c\u307e\u305b\u3093\u3002 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u30e2\u30b8\u30e5\u30fc\u30eb Standard Library Modules (P0581) < iostream > \u3084 < vector > \u306a\u3069\u3001\u3059\u3079\u3066\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30d8\u30c3\u30c0\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u63d0\u4f9b\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u8a00\u8a9e\u6a5f\u80fd\u3068\u3057\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f C++20 \u306b\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3078\u306e\u5c0e\u5165\u306f\u8b70\u8ad6\u304c\u9593\u306b\u5408\u308f\u305a\u3001C++23 \u306b\u5148\u9001\u308a\u3055\u308c\u307e\u3057\u305f\u3002\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u306e\u79fb\u884c\u306b\u5408\u308f\u305b\u3066\u3001 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u518d\u7de8\u6210\u3059\u308b\u63d0\u6848 \u3082\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002 operator [] \u306b\u8907\u6570\u306e\u5f15\u6570 Subscripts On Parade (P1277) m [ i , j , k ] \u306e\u3088\u3046\u306b\u3001 operator [] \u306e\u5f15\u6570\u306b\u8907\u6570\u306e\u5024\u3092\u6e21\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u591a\u6b21\u5143\u914d\u5217\u306e\u8981\u7d20\u306b\u7c21\u6f54\u306a\u5f0f\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u66f8\u304d\u65b9\u306f\u3001C++17 \u898f\u683c\u3067\u306f\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u3068\u89e3\u91c8\u3055\u308c\u3066 m [ k ] \u306b\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u307e\u305a\u306f \u73fe\u884c\u306e\u6587\u6cd5\u3092 deprecated \u306b\u3059\u308b\u63d0\u6848 \u304c\u63d0\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002 std :: span \u306e\u591a\u6b21\u5143\u7248\u3067\u3042\u308b std :: mdspan \u306e\u63d0\u6848 \u3067\u306e\u6d3b\u7528\u3082\u671f\u5f85\u3055\u308c\u307e\u3059\u3002 \u4f4e\u30ec\u30d9\u30eb \u30aa\u30fc\u30c7\u30a3\u30aa API A Standard Audio API for C++: Motivation, Scope, and Basic Design (P1386) \u97f3\u58f0\u518d\u751f\u30fb\u9332\u97f3\u3092\u884c\u3046\u4f4e\u30ec\u30d9\u30eb API std :: audio \u3092\u8ffd\u52a0\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u4ee5\u524d\u9813\u632b\u3057\u305f 2D Graphics API \u306e\u6a19\u6e96\u5316\u306b\u6bd4\u3079\u308c\u3070\u3001\u67af\u308c\u3066\u3044\u308b\u6280\u8853\u306a\u306e\u3067\u5b9f\u73fe\u53ef\u80fd\u6027\u306f\u4f4e\u304f\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30d0\u30a4\u30b9\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u3053\u3068\u304c\u4e3b\u8981\u306a\u5f79\u5272\u3067\u3001\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3084\u30d5\u30a3\u30eb\u30bf\u306a\u3069\u306e\u6a5f\u80fd\u306f\u63d0\u4f9b\u3057\u307e\u305b\u3093\u3002 \u5b9f\u9a13\u7684\u306a\u5b9f\u88c5\u3092\u516c\u958b \u3057\u3066\u3001\u8a2d\u8a08\u306b\u95a2\u3059\u308b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u96c6\u3081\u3066\u3044\u308b\u6bb5\u968e\u3067\u3059\u3002 \u30cd\u30c3\u30c8\u30ef\u30fc\u30af Working Draft, C++ Extensions for Networking (N4734) \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u6a5f\u80fd\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5c0e\u5165\u3059\u308b\u63d0\u6848\u3067\u3059\u3002 Boost.Asio \u3092\u30d9\u30fc\u30b9\u306b\u3001\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3001\u540d\u524d\u89e3\u6c7a\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u30bf\u30a4\u30de\u30fc\u3001\u30d0\u30c3\u30d5\u30a1\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u305f\u3081\u306e\u5404\u7a2e\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002 \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3 Working Draft, C++ Extensions for Re\ufb02ection (N4818) C++ \u306b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u5c0e\u5165\u3059\u308b\u63d0\u6848\u3067\u3059\u3002C# \u306e\u3088\u3046\u306a\u52d5\u7684\u306a\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u9759\u7684\u306a\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002 #include <experimental/reflect> using namespace std :: experimental :: reflect ; constexpr void f ( int arg1 , int arg2 ); using f_mobj = reflexpr ( f ( 0 , 1 )); auto name = get_name_v < get_element_t < 0 , get_parameters_t < f_mobj >>> ; // \"arg1\" auto is_constexpr_function = is_constexpr < f_mobj >:: value ; // true \u3053\u306e\u6a5f\u80fd\u3092\u524d\u63d0\u3068\u3057\u305f \u30e1\u30bf\u30af\u30e9\u30b9\u306e\u63d0\u6848 \u3082\u8b70\u8ad6\u304c\u9032\u3093\u3067\u3044\u307e\u3059\u3002 Executors","title":"C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848"},{"location":"standardization/cppx/#c23","text":"\u8b70\u8ad6\u304c\u9032\u884c\u4e2d\u306e\u304a\u3082\u306a\u63d0\u6848\u3067\u3059\u3002\u6a19\u6e96\u5316\u4f1a\u8b70\u306b\u3088\u3063\u3066\u898f\u683c\u5316\u304c\u59a5\u5f53\u3067\u306a\u3044\u3068\u5224\u65ad\u3055\u308c\u305f\u5834\u5408\u306f\u63a1\u629e\u3055\u308c\u307e\u305b\u3093\u3002","title":"C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848"},{"location":"standardization/cppx/#_1","text":"Standard Library Modules (P0581) < iostream > \u3084 < vector > \u306a\u3069\u3001\u3059\u3079\u3066\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30d8\u30c3\u30c0\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u63d0\u4f9b\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u8a00\u8a9e\u6a5f\u80fd\u3068\u3057\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f C++20 \u306b\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3078\u306e\u5c0e\u5165\u306f\u8b70\u8ad6\u304c\u9593\u306b\u5408\u308f\u305a\u3001C++23 \u306b\u5148\u9001\u308a\u3055\u308c\u307e\u3057\u305f\u3002\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u306e\u79fb\u884c\u306b\u5408\u308f\u305b\u3066\u3001 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u518d\u7de8\u6210\u3059\u308b\u63d0\u6848 \u3082\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u30e2\u30b8\u30e5\u30fc\u30eb"},{"location":"standardization/cppx/#operator","text":"Subscripts On Parade (P1277) m [ i , j , k ] \u306e\u3088\u3046\u306b\u3001 operator [] \u306e\u5f15\u6570\u306b\u8907\u6570\u306e\u5024\u3092\u6e21\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u591a\u6b21\u5143\u914d\u5217\u306e\u8981\u7d20\u306b\u7c21\u6f54\u306a\u5f0f\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u66f8\u304d\u65b9\u306f\u3001C++17 \u898f\u683c\u3067\u306f\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u3068\u89e3\u91c8\u3055\u308c\u3066 m [ k ] \u306b\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u307e\u305a\u306f \u73fe\u884c\u306e\u6587\u6cd5\u3092 deprecated \u306b\u3059\u308b\u63d0\u6848 \u304c\u63d0\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002 std :: span \u306e\u591a\u6b21\u5143\u7248\u3067\u3042\u308b std :: mdspan \u306e\u63d0\u6848 \u3067\u306e\u6d3b\u7528\u3082\u671f\u5f85\u3055\u308c\u307e\u3059\u3002","title":"operator[] \u306b\u8907\u6570\u306e\u5f15\u6570"},{"location":"standardization/cppx/#api","text":"A Standard Audio API for C++: Motivation, Scope, and Basic Design (P1386) \u97f3\u58f0\u518d\u751f\u30fb\u9332\u97f3\u3092\u884c\u3046\u4f4e\u30ec\u30d9\u30eb API std :: audio \u3092\u8ffd\u52a0\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u4ee5\u524d\u9813\u632b\u3057\u305f 2D Graphics API \u306e\u6a19\u6e96\u5316\u306b\u6bd4\u3079\u308c\u3070\u3001\u67af\u308c\u3066\u3044\u308b\u6280\u8853\u306a\u306e\u3067\u5b9f\u73fe\u53ef\u80fd\u6027\u306f\u4f4e\u304f\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30d0\u30a4\u30b9\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u3053\u3068\u304c\u4e3b\u8981\u306a\u5f79\u5272\u3067\u3001\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3084\u30d5\u30a3\u30eb\u30bf\u306a\u3069\u306e\u6a5f\u80fd\u306f\u63d0\u4f9b\u3057\u307e\u305b\u3093\u3002 \u5b9f\u9a13\u7684\u306a\u5b9f\u88c5\u3092\u516c\u958b \u3057\u3066\u3001\u8a2d\u8a08\u306b\u95a2\u3059\u308b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u96c6\u3081\u3066\u3044\u308b\u6bb5\u968e\u3067\u3059\u3002","title":"\u4f4e\u30ec\u30d9\u30eb \u30aa\u30fc\u30c7\u30a3\u30aa API"},{"location":"standardization/cppx/#_2","text":"Working Draft, C++ Extensions for Networking (N4734) \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u6a5f\u80fd\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5c0e\u5165\u3059\u308b\u63d0\u6848\u3067\u3059\u3002 Boost.Asio \u3092\u30d9\u30fc\u30b9\u306b\u3001\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3001\u540d\u524d\u89e3\u6c7a\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u30bf\u30a4\u30de\u30fc\u3001\u30d0\u30c3\u30d5\u30a1\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u305f\u3081\u306e\u5404\u7a2e\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002","title":"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af"},{"location":"standardization/cppx/#_3","text":"Working Draft, C++ Extensions for Re\ufb02ection (N4818) C++ \u306b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u5c0e\u5165\u3059\u308b\u63d0\u6848\u3067\u3059\u3002C# \u306e\u3088\u3046\u306a\u52d5\u7684\u306a\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u9759\u7684\u306a\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002 #include <experimental/reflect> using namespace std :: experimental :: reflect ; constexpr void f ( int arg1 , int arg2 ); using f_mobj = reflexpr ( f ( 0 , 1 )); auto name = get_name_v < get_element_t < 0 , get_parameters_t < f_mobj >>> ; // \"arg1\" auto is_constexpr_function = is_constexpr < f_mobj >:: value ; // true \u3053\u306e\u6a5f\u80fd\u3092\u524d\u63d0\u3068\u3057\u305f \u30e1\u30bf\u30af\u30e9\u30b9\u306e\u63d0\u6848 \u3082\u8b70\u8ad6\u304c\u9032\u3093\u3067\u3044\u307e\u3059\u3002","title":"\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3"},{"location":"standardization/cppx/#executors","text":"","title":"Executors"},{"location":"standardization/header/","text":"C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u30d8\u30c3\u30c0 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u5b9f\u88c5 \u30d0\u30fc\u30b8\u30e7\u30f3 <algorithm> en / jp / cpprefjp libstdc++ / libc++ / MSVC <any> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <array> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <atomic> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <barrier> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <bit> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <bitset> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cassert> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cctype> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cerrno> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cfenv> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <cfloat> en / jp / cpprefjp libstdc++ / libc++ / MSVC <charconv> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <chrono> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <cinttypes> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <climits> en / jp / cpprefjp libstdc++ / libc++ / MSVC <clocale> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cmath> en / jp / cpprefjp libstdc++ / libc++ / MSVC <compare> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <complex> en / jp / cpprefjp libstdc++ / libc++ / MSVC <concepts> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <condition_variable> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <coroutine> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <csetjmp> en / jp / cpprefjp libstdc++ / libc++ / MSVC <csignal> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cstdarg> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cstddef> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cstdint> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <cstdio> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cstdlib> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cstring> en / jp / cpprefjp libstdc++ / libc++ / MSVC <ctime> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cuchar> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <cwchar> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cwctype> en / jp / cpprefjp libstdc++ / libc++ / MSVC <deque> en / jp / cpprefjp libstdc++ / libc++ / MSVC <exception> en / jp / cpprefjp libstdc++ / libc++ / MSVC <execution> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <filesystem> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <format> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <forward_list> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <fstream> en / jp / cpprefjp libstdc++ / libc++ / MSVC <functional> en / jp / cpprefjp libstdc++ / libc++ / MSVC <future> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <initializer_list> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <iomanip> en / jp / cpprefjp libstdc++ / libc++ / MSVC <ios> en / jp / cpprefjp libstdc++ / libc++ / MSVC <iosfwd> en / jp / cpprefjp libstdc++ / libc++ / MSVC <iostream> en / jp / cpprefjp libstdc++ / libc++ / MSVC <istream> en / jp / cpprefjp libstdc++ / libc++ / MSVC <iterator> en / jp / cpprefjp libstdc++ / libc++ / MSVC <latch> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <limits> en / jp / cpprefjp libstdc++ / libc++ / MSVC <list> en / jp / cpprefjp libstdc++ / libc++ / MSVC <locale> en / jp / cpprefjp libstdc++ / libc++ / MSVC <map> en / jp / cpprefjp libstdc++ / libc++ / MSVC <memory> en / jp / cpprefjp libstdc++ / libc++ / MSVC <memory_resource> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <mutex> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <new> en / jp / cpprefjp libstdc++ / libc++ / MSVC <numbers> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <numeric> en / jp / cpprefjp libstdc++ / libc++ / MSVC <optional> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <ostream> en / jp / cpprefjp libstdc++ / libc++ / MSVC <queue> en / jp / cpprefjp libstdc++ / libc++ / MSVC <random> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <ranges> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <ratio> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <regex> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <scoped_allocator> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <semaphore> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <set> en / jp / cpprefjp libstdc++ / libc++ / MSVC <shared_mutex> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++14 <source_location> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <span> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <sstream> en / jp / cpprefjp libstdc++ / libc++ / MSVC <stack> en / jp / cpprefjp libstdc++ / libc++ / MSVC <stdexcept> en / jp / cpprefjp libstdc++ / libc++ / MSVC <stop_token> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <streambuf> en / jp / cpprefjp libstdc++ / libc++ / MSVC <string> en / jp / cpprefjp libstdc++ / libc++ / MSVC <string_view> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <syncstream> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <system_error> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <thread> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <tuple> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <type_traits> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <typeindex> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <typeinfo> en / jp / cpprefjp libstdc++ / libc++ / MSVC <unordered_map> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <unordered_set> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <utility> en / jp / cpprefjp libstdc++ / libc++ / MSVC <valarray> en / jp / cpprefjp libstdc++ / libc++ / MSVC <variant> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <vector> en / jp / cpprefjp libstdc++ / libc++ / MSVC <version> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 \u975e\u63a8\u5968\u307e\u305f\u306f\u524a\u9664 \u30d8\u30c3\u30c0 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u5b9f\u88c5 \u30d0\u30fc\u30b8\u30e7\u30f3 <ccomplex> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11, deprecated in C++17, removed in C++20 <ciso646> en / jp / cpprefjp libstdc++ / libc++ / MSVC removed in C++20 <codecvt> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11, deprecated in C++17 <cstdalign> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11, deprecated in C++17, removed in C++20 <cstdbool> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11, deprecated in C++17, removed in C++20 <ctgmath> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11, deprecated in C++17, removed in C++20 <strstream> en / jp / cpprefjp libstdc++ / libc++ / MSVC deprecated in C++98","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"standardization/header/#c","text":"\u30d8\u30c3\u30c0 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u5b9f\u88c5 \u30d0\u30fc\u30b8\u30e7\u30f3 <algorithm> en / jp / cpprefjp libstdc++ / libc++ / MSVC <any> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <array> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <atomic> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <barrier> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <bit> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <bitset> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cassert> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cctype> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cerrno> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cfenv> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <cfloat> en / jp / cpprefjp libstdc++ / libc++ / MSVC <charconv> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <chrono> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <cinttypes> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <climits> en / jp / cpprefjp libstdc++ / libc++ / MSVC <clocale> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cmath> en / jp / cpprefjp libstdc++ / libc++ / MSVC <compare> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <complex> en / jp / cpprefjp libstdc++ / libc++ / MSVC <concepts> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <condition_variable> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <coroutine> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <csetjmp> en / jp / cpprefjp libstdc++ / libc++ / MSVC <csignal> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cstdarg> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cstddef> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cstdint> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <cstdio> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cstdlib> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cstring> en / jp / cpprefjp libstdc++ / libc++ / MSVC <ctime> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cuchar> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <cwchar> en / jp / cpprefjp libstdc++ / libc++ / MSVC <cwctype> en / jp / cpprefjp libstdc++ / libc++ / MSVC <deque> en / jp / cpprefjp libstdc++ / libc++ / MSVC <exception> en / jp / cpprefjp libstdc++ / libc++ / MSVC <execution> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <filesystem> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <format> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <forward_list> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <fstream> en / jp / cpprefjp libstdc++ / libc++ / MSVC <functional> en / jp / cpprefjp libstdc++ / libc++ / MSVC <future> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <initializer_list> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <iomanip> en / jp / cpprefjp libstdc++ / libc++ / MSVC <ios> en / jp / cpprefjp libstdc++ / libc++ / MSVC <iosfwd> en / jp / cpprefjp libstdc++ / libc++ / MSVC <iostream> en / jp / cpprefjp libstdc++ / libc++ / MSVC <istream> en / jp / cpprefjp libstdc++ / libc++ / MSVC <iterator> en / jp / cpprefjp libstdc++ / libc++ / MSVC <latch> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <limits> en / jp / cpprefjp libstdc++ / libc++ / MSVC <list> en / jp / cpprefjp libstdc++ / libc++ / MSVC <locale> en / jp / cpprefjp libstdc++ / libc++ / MSVC <map> en / jp / cpprefjp libstdc++ / libc++ / MSVC <memory> en / jp / cpprefjp libstdc++ / libc++ / MSVC <memory_resource> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <mutex> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <new> en / jp / cpprefjp libstdc++ / libc++ / MSVC <numbers> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <numeric> en / jp / cpprefjp libstdc++ / libc++ / MSVC <optional> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <ostream> en / jp / cpprefjp libstdc++ / libc++ / MSVC <queue> en / jp / cpprefjp libstdc++ / libc++ / MSVC <random> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <ranges> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <ratio> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <regex> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <scoped_allocator> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <semaphore> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <set> en / jp / cpprefjp libstdc++ / libc++ / MSVC <shared_mutex> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++14 <source_location> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <span> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <sstream> en / jp / cpprefjp libstdc++ / libc++ / MSVC <stack> en / jp / cpprefjp libstdc++ / libc++ / MSVC <stdexcept> en / jp / cpprefjp libstdc++ / libc++ / MSVC <stop_token> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <streambuf> en / jp / cpprefjp libstdc++ / libc++ / MSVC <string> en / jp / cpprefjp libstdc++ / libc++ / MSVC <string_view> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <syncstream> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20 <system_error> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <thread> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <tuple> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <type_traits> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <typeindex> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <typeinfo> en / jp / cpprefjp libstdc++ / libc++ / MSVC <unordered_map> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <unordered_set> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11 <utility> en / jp / cpprefjp libstdc++ / libc++ / MSVC <valarray> en / jp / cpprefjp libstdc++ / libc++ / MSVC <variant> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++17 <vector> en / jp / cpprefjp libstdc++ / libc++ / MSVC <version> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++20","title":"C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"standardization/header/#_1","text":"\u30d8\u30c3\u30c0 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u5b9f\u88c5 \u30d0\u30fc\u30b8\u30e7\u30f3 <ccomplex> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11, deprecated in C++17, removed in C++20 <ciso646> en / jp / cpprefjp libstdc++ / libc++ / MSVC removed in C++20 <codecvt> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11, deprecated in C++17 <cstdalign> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11, deprecated in C++17, removed in C++20 <cstdbool> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11, deprecated in C++17, removed in C++20 <ctgmath> en / jp / cpprefjp libstdc++ / libc++ / MSVC since C++11, deprecated in C++17, removed in C++20 <strstream> en / jp / cpprefjp libstdc++ / libc++ / MSVC deprecated in C++98","title":"\u975e\u63a8\u5968\u307e\u305f\u306f\u524a\u9664"},{"location":"standardization/meetings/","text":"\u6a19\u6e96\u5316\u4f1a\u8b70 C++ \u306e\u898f\u683c\u3092\u8b70\u8ad6\u3059\u308b C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u4e3b\u8981\u4f1a\u8b70\u306e\u958b\u50ac\u60c5\u5831\u3067\u3059\u3002 2022 Portland \u5834\u6240 2022-02-07 to 12 / \u30dd\u30fc\u30c8\u30e9\u30f3\u30c9, \u30aa\u30ec\u30b4\u30f3\u5dde, \u7c73\u56fd 2021 \u672a\u5b9a \u5834\u6240 2021 \u79cb / \u672a\u5b9a 2021 Montreal \u5834\u6240 2021 \u590f / \u30e2\u30f3\u30c8\u30ea\u30aa\u30fc\u30eb, \u30ab\u30ca\u30c0 2021 Kona \u5834\u6240 2021-02-22 to 27 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd 2020 New York (\u4e88\u5b9a) \u5834\u6240 2020-11 / \u30cb\u30e5\u30fc\u30e8\u30fc\u30af, \u30cb\u30e5\u30fc\u30e8\u30fc\u30af\u5dde, \u7c73\u56fd 2020 Varna \u5834\u6240 2020-06-01 to 06 / \u30f4\u30a1\u30eb\u30ca, \u30d6\u30eb\u30ac\u30ea\u30a2 2020 Prague \u5834\u6240 2020-02-10 to 15 / \u30d7\u30e9\u30cf, \u30c1\u30a7\u30b3 2019 Belfast \u5834\u6240 / \u63d0\u6848 2019-11-04 to 09 / \u30d9\u30eb\u30d5\u30a1\u30b9\u30c8, \u5317\u30a2\u30a4\u30eb\u30e9\u30f3\u30c9, \u82f1\u56fd JTC1/SC22/WG21 - Papers 2019 mailing2019-10 pre-Belfast 2019 Cologne \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2019-07-15 to 20 / \u30b1\u30eb\u30f3, \u30c9\u30a4\u30c4 JTC1/SC22/WG21 - Papers 2019 mailing2019-06 pre-Cologne JTC1/SC22/WG21 - Papers 2019 mailing2019-08 post-Cologne \u53c2\u52a0\u5831\u544a 2019-07 Cologne ISO C++ Committee Trip Report by Bryce Lelbach and others Trip report: Summer ISO C++ standards meeting (Cologne) by Herb Sutter Trip Report: C++ Standards Meeting in Cologne, July 2019 by Botond Ballo The German tour: Cologne trip report by Guy Davidson Trip report: July 2019 ISO C++ committee meeting, Cologne, Germany by Timur Doumler Trip Report: ISO C++ Meeting Cologne (2019) by Matthias Gehre \u89e3\u8aac std :: format \u3084 constexpr vector , using enum , constinit \u306a\u3069\u3001\u524d\u56de\u306e\u4f1a\u8b70\u307e\u3067\u306b\u304a\u304a\u3088\u305d\u5b8c\u6210\u3057\u3066\u3044\u305f\u591a\u6570\u306e\u63d0\u6848\u304c C++20 \u30c9\u30e9\u30d5\u30c8\u5165\u308a\u3057\u307e\u3057\u305f\u3002\u4e00\u65b9\u3067\u30012018 \u5e74\u306b\u30c9\u30e9\u30d5\u30c8\u5165\u308a\u3057\u3066\u3044\u305f Contracts \u306f\u5927\u5e45\u306a\u8a2d\u8a08\u306e\u898b\u76f4\u3057\u304c\u767a\u751f\u3057\u3001C++20 \u3067\u306e\u5c0e\u5165\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u3066 Study Group \u3067\u8b70\u8ad6\u3092\u7d9a\u3051\u308b\u3053\u3068\u304c\u6c7a\u307e\u308a\u307e\u3057\u305f\u3002 \u3053\u306e\u4f1a\u8b70\u3092\u3082\u3063\u3066 C++20 \u898f\u683c\u30c9\u30e9\u30d5\u30c8\u3078\u306e\u65b0\u6a5f\u80fd\u306e\u8ffd\u52a0\u306f\u7de0\u3081\u5207\u308a (Feature Freeze) \u3067\u3059\u3002\u4ee5\u964d\u306f C++20 \u898f\u683c\u5b8c\u6210\u306b\u5411\u3051\u305f\u6587\u9762\u306e\u4fee\u6b63\u3068\u3001C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u8b70\u8ad6\u304c\u9032\u3081\u3089\u308c\u307e\u3059\u3002 2019 Kona \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2019-02-18 to 23 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2019 mailing2019-01 pre-Kona JTC1/SC22/WG21 - Papers 2019 mailing2019-03 post-Kona \u53c2\u52a0\u5831\u544a 2019-02 Kona ISO C++ Committee Trip Report by Bryce Lelbach and others Trip report: Winter ISO C++ standards meeting (Kona) by Herb Sutter Kona: A trip report by Corentin Trip report: February 2019 ISO C++ committee meeting, Kona, Hawai\u2019i by Timur Doumler Telescopes and matrices and audio: Kona trip report by Guy Davidson Trip Report: Freestanding (and Modules) in Kona by Bryce Lelbach Trip Report: C++ Standards Meeting in Kona, February 2019 by Botond Ballo \u89e3\u8aac \u30b3\u30eb\u30fc\u30c1\u30f3\u3068\u3001C++23 \u4ee5\u964d\u3078\u306e\u5148\u9001\u308a\u304c\u898b\u8fbc\u307e\u308c\u3066\u3044\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e C++20 \u5165\u308a\u304c\u627f\u8a8d\u3055\u308c\u3001C++20 \u306f C++11 \u4ee5\u6765\u306e\u5927\u578b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u306a\u308b\u3053\u3068\u304c\u6c7a\u307e\u308a\u307e\u3057\u305f\u3002 C++20 \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb \u3067\u306f\u3001\u3053\u306e\u4f1a\u8b70\u3092\u3082\u3063\u3066 Feature Freeze \u306b\u306a\u308a\u307e\u3059\u3002\u4ed5\u69d8\u6587\u8a00\u306e\u30ec\u30d3\u30e5\u30fc\u304c\u672a\u5b8c\u4e86\u306e\u5c0f\u898f\u6a21\u306a\u63d0\u6848\u3092\u6b21\u56de\u306e Colonge \u4f1a\u8b70\u3067\u627f\u8a8d\u3057\u3001C++20 \u306e\u5168\u5bb9\u304c\u8f09\u3063\u305f\u898f\u683c\u30c9\u30e9\u30d5\u30c8\u304c\u3067\u304d\u3042\u304c\u308a\u307e\u3059\u3002 2018 San Diego \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2018-11-05 to 10 / \u30b5\u30f3\u30c7\u30a3\u30a8\u30b4, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2018 mailing2018-10 pre-San Diego JTC1/SC22/WG21 - Papers 2018 mailing2018-11 post-San Diego \u53c2\u52a0\u5831\u544a 2018 San Diego ISO C++ Committee Trip Report by Bryce Lelbach and others Trip report: Fall ISO C++ standards meeting (San Diego) by Herb Sutter Fall 2018 ISO WG21 C++ Standards Committee meeting trip report \u89e3\u8aac Range \u30e9\u30a4\u30d6\u30e9\u30ea\u306e C++20 \u5165\u308a\u304c\u6c7a\u307e\u3063\u305f\u307b\u304b\u3001\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u77ed\u7e2e\u69cb\u6587\u3001 coneteval \u306e\u8ffd\u52a0\u3084 constexpr \u306e\u5236\u9650\u7de9\u548c\u306a\u3069\u5b9a\u6570\u5f0f\u306e\u5f37\u5316\u3001\u7b26\u53f7\u4ed8\u6574\u6570\u578b\u304c 2 \u306e\u88dc\u6570\u3067\u3042\u308b\u3053\u3068\u306e\u898f\u5b9a\u3001 char8_t \u578b\u306e\u8ffd\u52a0\u306a\u3069\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2018 Rapperswil \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2018-06-04 to 09 / \u30e9\u30c3\u30d1\u30fc\u30b9\u30f4\u30a3\u30fc\u30eb, \u30b9\u30a4\u30b9 JTC1/SC22/WG21 - Papers 2018 mailing2018-05 pre-Rapperswil JTC1/SC22/WG21 - Papers 2018 mailing2018-06 post-Rapperswil \u53c2\u52a0\u5831\u544a 2018 Rapperswil ISO C++ Committee Trip Report (Contracts for C++20; Parallelism TS v2 published; Draft Reflection TS) by Bryce Lelbach and others Trip report: Summer ISO C++ standards meeting (Rapperswil) by Herb Sutter \u89e3\u8aac \u5c5e\u6027\u69cb\u6587\u306b\u3088\u308b Contracts (\u5951\u7d04\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) \u306e C++20 \u5165\u308a\u304c\u6c7a\u307e\u3063\u305f\u307b\u304b\u3001STL \u3078\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8ffd\u52a0\u3001\u4efb\u610f\u306e\u30af\u30e9\u30b9\u578b\u306e\u975e\u578b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u306e\u5229\u7528\u3001\u5b9a\u6570\u5f0f\u3067\u306e\u4eee\u60f3\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u8a31\u53ef\u3001 explicit ( bool ) \u306a\u3069\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2018 Jacksonville \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2018-03-12 to 17 / \u30b8\u30e3\u30af\u30bd\u30f3\u30d3\u30eb, \u30d5\u30ed\u30ea\u30c0\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2018 mailing2018-02 pre-Jacksonville JTC1/SC22/WG21 - Papers 2018 mailing2018-04 post-Jacksonville \u53c2\u52a0\u5831\u544a 2018 Jacksonville ISO C++ Committee Reddit Trip Report by Bryce Lelbach and others Trip report: Winter ISO C++ standards meeting (Jacksonville) by Herb Sutter \u89e3\u8aac < chrono > \u3078\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8ffd\u52a0\u3001 < span > , no_unique_address \u3084 likely / unlikely \u5c5e\u6027\u69cb\u6587\u306e\u8ffd\u52a0\u306a\u3069\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2017 Albuquerque \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2017-11-06 to 11 / \u30a2\u30eb\u30d0\u30ab\u30fc\u30ad, \u30cb\u30e5\u30fc\u30e1\u30ad\u30b7\u30b3\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2017 mailing2017-10 pre-Albuquerque JTC1/SC22/WG21 - Papers 2017 mailing2017-11 post-Albuquerque \u53c2\u52a0\u5831\u544a 2018 Jacksonville ISO C++ Committee Reddit Trip Report by Bryce Lelbach and others Trip report: Fall ISO C++ standards meeting (Albuquerque) by Herb Sutter \u89e3\u8aac \u4e09\u65b9\u6bd4\u8f03\u6f14\u7b97\u5b50 <=> \u3068\u305d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30b5\u30dd\u30fc\u30c8\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u306e\u3055\u3089\u306a\u308b constexpr \u5bfe\u5fdc\u3001\u521d\u671f\u5316\u5f0f\u3092\u3068\u3082\u306a\u3046\u7bc4\u56f2 for \u6587\u306a\u3069\u306e C++20 \u5165\u308a\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2017 Toronto \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2017-07-10 to 15 / \u30c8\u30ed\u30f3\u30c8, \u30ab\u30ca\u30c0 JTC1/SC22/WG21 - Papers 2017 mailing2017-06 pre-Toronto JTC1/SC22/WG21 - Papers 2017 mailing2017-07 post-Toronto \u53c2\u52a0\u5831\u544a 2017 Toronto ISO C++ Committee Discussion Thread (Concepts in C++20; Coroutines, Ranges and Networking TSes published) by Bryce Lelbach and others Trip report: Summer ISO C++ standards meeting (Toronto) by Herb Sutter Trip Report: C++ Standards Meeting in Toronto, July 2017 \u89e3\u8aac C++20 \u306b\u95a2\u3059\u308b\u6700\u521d\u306e\u4f1a\u8b70\u3067\u3059\u3002\u30b3\u30f3\u30bb\u30d7\u30c8\u3001Designated Initialization, \u30e9\u30e0\u30c0\u5f0f\u306b\u304a\u3051\u308b this \u306e\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u8a31\u53ef\u306a\u3069\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2017 Kona \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2017-02-27 to 03-04 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2017 mailing2017-02 pre-Kona JTC1/SC22/WG21 - Papers 2017 mailing2017-03 post-Kona \u53c2\u52a0\u5831\u544a Trip report: Winter ISO C++ standards meeting (Kona), C++17 is complete by Herb Sutter Red Hat at the ISO C++ Standards Meeting (April 2017, Kona): Core Language by Jason Merrill \u89e3\u8aac C++17 \u306b\u3064\u3044\u3066\u8b70\u8ad6\u3059\u308b\u6700\u5f8c\u306e\u4f1a\u8b70\u3067\u3001\u3053\u306e\u4f1a\u8b70\u306b\u3088\u3063\u3066 C++17 \u898f\u683c\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002 std :: byte \u578b\u306e\u5c0e\u5165\u304c\u8ffd\u52a0\u3067\u627f\u8a8d\u3055\u308c\u305f\u307b\u304b\u306f\u3001\u5404\u56fd\u59d4\u54e1\u4f1a\u304b\u3089\u306e\u30b3\u30e1\u30f3\u30c8\u3078\u306e\u5bfe\u5fdc\u304c\u4e3b\u3067\u3059\u3002 2017 \u5e74\u4ee5\u524d\u306e\u4f1a\u8b70 2016 Issaquah \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2016-11-07 to 12 / \u30a4\u30b5\u30af\u30a2, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2016 mailing2016-10 pre-Issaquah JTC1/SC22/WG21 - Papers 2016 mailing2016-11 post-Issaquah \u53c2\u52a0\u5831\u544a Trip report: Fall ISO C++ standards meeting (Issaquah) by Herb Sutter 2016 Issaquah ISO C++ Committee Meeting Live Thread The view from Nov 2016 C++ Standard Meeting Issaquah by Michael Wong \u89e3\u8aac using \u5ba3\u8a00\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30d1\u30c3\u30af\u5c55\u958b\u3001\u53e4\u3044\u4f8b\u5916\u4ed5\u69d8 throw () \u306e\u524a\u9664\u3001 < charconv > \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 \u3053\u306e\u4f1a\u8b70\u3092\u3082\u3063\u3066 C++17 \u306f Feature Freeze \u306b\u306a\u308a\u307e\u3057\u305f\u3002 2016 Oulu \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2016-06-20 to 25 / \u30aa\u30a6\u30eb, \u30d5\u30a3\u30f3\u30e9\u30f3\u30c9 JTC1/SC22/WG21 - Papers 2016 mailing2016-06 pre-Oulu JTC1/SC22/WG21 - Papers 2016 mailing2016-07 post-Oulu \u53c2\u52a0\u5831\u544a Trip report: Summer ISO C++ standards meeting (Oulu) by Herb Sutter Red Hat at the ISO C++ Standards Meeting (June 2016, Oulu): Library by Jonathan Wakely C++17, All Final Features from Oulu in a Few Slides by Michael Wong \u89e3\u8aac \u30b3\u30a2\u8a00\u8a9e\u6a5f\u80fd\u3068\u3057\u3066\u3001\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u63a8\u8ad6\uff08deduction guide\uff09\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u5909\u6570\u3001 constexpr if , \u69cb\u9020\u5316\u675f\u7e1b\u3001if \u6587\u3084 switch \u6587\u3067\u306e\u521d\u671f\u5316\u5f0f\u3068\u6761\u4ef6\u5f0f\u306e\u5206\u96e2\u3001\u30b3\u30d4\u30fc\u7701\u7565\u4fdd\u8a3c\u3001\u5f0f\u306e\u8a55\u4fa1\u9806\u5e8f\u306e\u53b3\u5bc6\u5316\u3001 std :: launder \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u3068\u3057\u3066\u306f\u3001 std :: variant , variant , optional , any \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u7d71\u4e00\u3001\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u306e splice \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2016 Jacksonville \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2016-02-29 to 03-05 / \u30b8\u30e3\u30af\u30bd\u30f3\u30d3\u30eb, \u30d5\u30ed\u30ea\u30c0\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2016 mailing2016-02 pre-Jacksonville JTC1/SC22/WG21 - Papers 2016 mailing2016-03 post-Jacksonville \u53c2\u52a0\u5831\u544a Trip report: Winter ISO C++ standards meeting by Herb Sutter Trip Report: C++ Standards Meeting in Jacksonville, February 2016 by Botond Ballo Trip report: C++ meeting at Jacksonville by J. Daniel Garcia \u89e3\u8aac 16 \u9032\u6d6e\u52d5\u5c0f\u6570\u70b9\u30ea\u30c6\u30e9\u30eb\u3001constexpr \u30e9\u30e0\u30c0\u3001\u5c5e\u6027\u69cb\u6587 [ [fallthrough ] ] , [ [nodiscard ] ] , [ [maybe_unused ] ] \u306e\u307b\u304b\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b std :: any , std :: optional , std :: string_view , < filesystem > , < memory_resource > , \u4e26\u5217\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u6570\u5b66\u306e\u7279\u6b8a\u95a2\u6570\u7b49\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2015 Kona \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2015-10-19 to 24 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2015 mailing2015-09 pre-Kona JTC1/SC22/WG21 - Papers 2015 mailing2015-11 post-Kona \u53c2\u52a0\u5831\u544a Trip report: Fall 2015 ISO C++ standards meeting by Herb Sutter Trip Report: C++ Standards Meeting in Kona, October 2015 by J. Daniel Garcia C++17 progress update! (Oct 2015) \u89e3\u8aac register \u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u524a\u9664\u3001 __has_include () \u30de\u30af\u30ed\u3001 std :: conunction \u3001 std :: disjunction \u3001 std :: negation \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2015 Lenexa \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2015-05-04 to 09 / \u30ec\u30cd\u30c3\u30af\u30b5, \u30ab\u30f3\u30b6\u30b9\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2015 mailing2015-04 pre-Lenexa JTC1/SC22/WG21 - Papers 2015 mailing2015-05 post-Lenexa \u53c2\u52a0\u5831\u544a Trip report: Spring ISO C++ meeting by Herb Sutter Trip Report: C++ Standards Meeting in Lenexa, May 2015 by J. Daniel Garcia Lenexa C++ Meeting Report (Core Language) by Jason Merrill C++17 progress update! \u89e3\u8aac std :: bool_constant , std :: vector , std :: list , std :: forward_list \u306e\u4e0d\u5b8c\u5168\u578b\u30b5\u30dd\u30fc\u30c8\u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2015 Cologne 2015-02-23 to 27 / \u30b1\u30eb\u30f3, \u30c9\u30a4\u30c4 2015 Skillman 2015-01-26 to 28 / \u30b9\u30ad\u30eb\u30de\u30f3, \u30cb\u30e5\u30fc\u30b8\u30e3\u30fc\u30b8\u30fc\u5dde, \u7c73\u56fd 2014 Urbana-Champaign \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2014-11-03 to 08 / \u30a2\u30fc\u30d0\u30ca\u30fb\u30b7\u30e3\u30f3\u30da\u30fc\u30f3, \u30a4\u30ea\u30ce\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2014 mailing2014-10 pre-Urbana JTC1/SC22/WG21 - Papers 2014 mailing2014-11 post-Urbana \u53c2\u52a0\u5831\u544a Trip Report: Fall ISO C++ Meeting by Herb Sutter Trip Report: C++ Standards Meeting in Urbana-Champaign, November 2014 by J. Daniel Garcia Red Hat at the ISO C++ Standards Meeting (November 2014): Library by Jason Merrill \u89e3\u8aac C++14 \u898f\u683c\u5b8c\u6210\u5f8c\u306e\u6700\u521d\u306e\u4f1a\u8b70\u3067\u3059\u3002 \u7573\u307f\u8fbc\u307f\u5f0f\u3001\u5165\u308c\u5b50\u540d\u524d\u7a7a\u9593\u5b9a\u7fa9\u306e\u7c21\u7565\u5316\u3001 u8 \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3001\u975e\u578b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30dd\u30a4\u30f3\u30bf\u5236\u9650\u7de9\u548c\u3001 void_t , std :: uncaught_exceptions \u7b49\u306e C++17 \u5165\u308a\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2014 Rapperswil \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2014-06-16 to 21 / \u30e9\u30c3\u30d1\u30fc\u30b9\u30f4\u30a3\u30fc\u30eb, \u30b9\u30a4\u30b9 JTC1/SC22/WG21 - Papers 2014 mailing2014-05 pre-Rapperswil JTC1/SC22/WG21 - Papers 2014 mailing2014-07 post-Rapperswil \u53c2\u52a0\u5831\u544a Trip Report: C++ Standards Meeting in Urbana-Champaign, November 2014 by J. Daniel Garcia Red Hat at the ISO C++ Standards Meeting (November 2014): Library by Jonathan Wakely, Jason Merrill, Matt Newsome \u89e3\u8aac C++14 \u306b\u3064\u3044\u3066\u8b70\u8ad6\u3059\u308b\u6700\u5f8c\u306e\u4f1a\u8b70\u3067\u3001\u3053\u306e\u4f1a\u8b70\u306b\u3088\u3063\u3066 C++14 \u898f\u683c\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002 C++14 \u3078\u306e\u6a5f\u80fd\u8ffd\u52a0\u306f\u306a\u304f\u3001C++17 \u306b\u5bfe\u3057\u3066\u306f\u3001\u30c8\u30e9\u30a4\u30b0\u30e9\u30d5\u306e\u524a\u9664\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e typename \u4f7f\u7528\u306e\u8a31\u53ef\u3001\u7701\u7565\u7248\u306e static_assert \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2014 Issaquah \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2014-02-10 to 15 / \u30a4\u30b5\u30af\u30a2, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2014 mailing2014-01 pre-Issaquah JTC1/SC22/WG21 - Papers 2014 mailing2014-03 post-Issaquah \u53c2\u52a0\u5831\u544a Trip report: Winter ISO C++ meeting by Herb Sutter Trip Report: C++ Standards Committee Meeting in Issaquah, February 2014 by J. Daniel Garcia Red Hat at the ISO C++ Standards Meeting (February 2014) by Matt Newsome \u89e3\u8aac C++14 \u306e\u6700\u7d42\u4f5c\u696d\u3068 C++17 \u306b\u5411\u3051\u305f\u4e00\u90e8\u306e\u4f5c\u696d\u304c\u884c\u308f\u308c\u307e\u3057\u305f\u3002 \u3069\u3061\u3089\u306b\u5bfe\u3057\u3066\u3082\u6a5f\u80fd\u306e\u8ffd\u52a0\u306f\u306a\u304f\u3001C++14 \u306b\u5bfe\u3057\u3066\u306f\u5404\u56fd\u59d4\u54e1\u4f1a\u304b\u3089\u306e\u30b3\u30e1\u30f3\u30c8\u3084\u65e2\u5b58\u306e Issue \u3078\u306e\u5bfe\u5fdc\u304c\u4e3b\u3067\u3059\u3002 2013 Chicago \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2013-09-23 to 28 / \u30b7\u30ab\u30b4, \u30a4\u30ea\u30ce\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2013 mailing2013-09-pre-Chicago JTC1/SC22/WG21 - Papers 2013 mailing2013-10-post-Chicago \u53c2\u52a0\u5831\u544a Trip report: Fall ISO C++ meeting by Herb Sutter \u89e3\u8aac \u6570\u5024\u30ea\u30c6\u30e9\u30eb\u306e\u533a\u5207\u308a\u6587\u5b57\u3001 [ [deprecated ] ] \u5c5e\u6027\u3001\u5f15\u6570\u3068\u3057\u3066\u30b5\u30a4\u30ba\u3092\u3068\u308b\u30b0\u30ed\u30fc\u30d0\u30eb delete \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u8a31\u53ef\u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 \u307e\u305f\u3001\u524d\u56de\u4f1a\u8b70\u3067\u627f\u8a8d\u3055\u308c\u3066\u3044\u305f\u52d5\u7684\u914d\u5217\u306e\u30b5\u30dd\u30fc\u30c8\u304a\u3088\u3073 std :: dynarray < T > \u3068 std :: optional < T > \u306f C++14 \u304b\u3089\u53d6\u308a\u9664\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002 2013 Bristol \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2013-04-15 to 20 / \u30d6\u30ea\u30b9\u30c8\u30eb, \u30a4\u30f3\u30b0\u30e9\u30f3\u30c9, \u82f1\u56fd JTC1/SC22/WG21 - Papers 2013 mailing2013-03-pre-Bristol JTC1/SC22/WG21 - Papers 2013 mailing2013-05-post-Bristol \u53c2\u52a0\u5831\u544a Trip Report: ISO C++ Spring 2013 Meeting by Herb Sutter The view from C++ Standard meeting April 2013 Part 1 by Michael Wong A look at C++14: Papers Part I by Jens Weller A look at C++14: Papers Part 2 by Jens Weller A look at C++14 and beyond: Papers Part 3 by Jens Weller A look at C++14 and beyond: Papers Part 4 by Jens Weller \u89e3\u8aac \u30b3\u30a2\u8a00\u8a9e\u6a5f\u80fd\u3068\u3057\u3066\u3001 constexpr \u306e\u5236\u9650\u7de9\u548c\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30e9\u30e0\u30c0\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u521d\u671f\u5316\u30ad\u30e3\u30d7\u30c1\u30e3\u3001\u5909\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3001\u95a2\u6570\u306e\u623b\u308a\u5024\u578b\u63a8\u8ad6\u3001\u52d5\u7684\u914d\u5217\u306e\u30b5\u30dd\u30fc\u30c8\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u3068\u3057\u3066\u3001 std :: make_unique () , \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3078\u306e\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u30ea\u30c6\u30e9\u30eb\u5c0e\u5165\u3001 std :: optional < T > , std :: dynarray < T > \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 C++14 \u306e\u307b\u3068\u3093\u3069\u306e\u6a5f\u80fd\u304c\u3053\u306e\u4f1a\u8b70\u3067\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002 2012 Portland \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2012-10-15 to 19 / \u30dd\u30fc\u30c8\u30e9\u30f3\u30c9, \u30aa\u30ec\u30b4\u30f3\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2012 mailing2012-09-pre-Portland JTC1/SC22/WG21 - Papers 2012 mailing2012-11-post-Portland \u89e3\u8aac Issue \u5bfe\u5fdc\u304c\u4e3b\u3067\u5927\u304d\u306a\u6a5f\u80fd\u306e\u8ffd\u52a0\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u3068\u3057\u3066\u3001 std :: complex , std :: chrono , std :: array , std :: initilizer_list , std :: tuple , std :: pair \u7b49\u306e constexpr \u5bfe\u5fdc\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 2012 Kona \u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c 2012-02-06 to 10 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2012 mailing2012-01-pre-Portland JTC1/SC22/WG21 - Papers 2012 mailing2012-02-post-Portland \u89e3\u8aac C++14 \u306b\u3064\u3044\u3066\u8b70\u8ad6\u3059\u308b\u6700\u521d\u306e\u4f1a\u8b70\u3067\u3059\u3002 \u6a5f\u80fd\u306e\u8ffd\u52a0\u306f\u7121\u304f\u3001C++11 \u306b\u5bfe\u3059\u308b Issue \u3078\u306e\u5bfe\u5fdc\u304c\u4e3b\u3067\u3059\u3002 2011 Bloomington 2011-08-15 to 19 / \u30d6\u30eb\u30fc\u30df\u30f3\u30c8\u30f3, \u30a4\u30f3\u30c7\u30a3\u30a2\u30ca\u5dde, \u7c73\u56fd 2011 Madrid 2011-03-21 to 26 / \u30de\u30c9\u30ea\u30fc\u30c9, \u30b9\u30da\u30a4\u30f3 2010 Batavia 2010-11-08 to 13 / \u30d0\u30bf\u30f4\u30a3\u30a2, \u30a4\u30ea\u30ce\u30a4\u5dde, \u7c73\u56fd 2010 Rapperswil 2010-08-02 to 07 / \u30e9\u30c3\u30d1\u30fc\u30b9\u30f4\u30a3\u30fc\u30eb, \u30b9\u30a4\u30b9 2010 Pittsburgh 2010-03-08 to 13 / \u30d4\u30c3\u30c4\u30d0\u30fc\u30b0, \u30da\u30f3\u30b7\u30eb\u30d9\u30cb\u30a2\u5dde, \u7c73\u56fd 2009 Santa Cruz 2009-10-19 to 24 / \u30b5\u30f3\u30bf\u30af\u30eb\u30fc\u30ba, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd 2009 Frankfurt 2009-07-13 to 18 / \u30d5\u30e9\u30f3\u30af\u30d5\u30eb\u30c8, \u30c9\u30a4\u30c4 2009 Summit 2009-03-02 to 06 / \u30b5\u30df\u30c3\u30c8, \u30cb\u30e5\u30fc\u30b8\u30e3\u30fc\u30b8\u30fc\u5dde, \u7c73\u56fd 2008 San Francisco 2008-09-14 to 20 / \u30b5\u30f3\u30d5\u30e9\u30f3\u30b7\u30b9\u30b3, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd 2008 Sophia Antipolis 2008-06-08 to 13 / \u30bd\u30d5\u30a3\u30a2\u30fb\u30a2\u30f3\u30c6\u30a3\u30dd\u30ea\u30b9, \u30d5\u30e9\u30f3\u30b9 2008 Bellevue 2008-02-24 to 29 / \u30d9\u30eb\u30d3\u30e5\u30fc, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd 2007 Kona 2007-09-30 to 10-06 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd 2007 Toronto 2007-07-15 to 20 / \u30c8\u30ed\u30f3\u30c8, \u30ab\u30ca\u30c0 2007 Oxford 2007-04-15 to 20 / \u30aa\u30c3\u30af\u30b9\u30d5\u30a9\u30fc\u30c9, \u30a4\u30f3\u30b0\u30e9\u30f3\u30c9, \u82f1\u56fd 2006 Portland 2006-10-15 to 20 / \u30dd\u30fc\u30c8\u30e9\u30f3\u30c9, \u30aa\u30ec\u30b4\u30f3\u5dde, \u7c73\u56fd 2006 Berlin 2006-04-02 to 07 / \u30d9\u30eb\u30ea\u30f3, \u30c9\u30a4\u30c4 2005 Mt. Tremblant 2005-10-02 to 08 / \u30e2\u30f3\u30c8\u30e9\u30f3\u30d6\u30e9\u30f3, \u30ab\u30ca\u30c0 2005 Lillehammer 2005-04-10 to 15 / \u30ea\u30ec\u30cf\u30f3\u30e1\u30eb, \u30ce\u30eb\u30a6\u30a7\u30fc 2004 Redmond 2004-10-17 to 22 / \u30ec\u30c9\u30e2\u30f3\u30c9, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd 2004 Sydney 2004-03-21 to 26 / \u30b7\u30c9\u30cb\u30fc, \u30aa\u30fc\u30b9\u30c8\u30e9\u30ea\u30a2 2003 Kona 2003-10-26 to 31 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd 2003 Oxford 2003-04-06 to 11 / \u30aa\u30c3\u30af\u30b9\u30d5\u30a9\u30fc\u30c9, \u30a4\u30f3\u30b0\u30e9\u30f3\u30c9, \u82f1\u56fd 2002 Santa Cruz 2002-10-22 to 27 / \u30b5\u30f3\u30bf\u30af\u30eb\u30fc\u30ba, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd 2002 Curacao 2002-04-21 to 26 / \u30ad\u30e5\u30e9\u30bd\u30fc, \u30aa\u30e9\u30f3\u30c0\u9818\u30a2\u30f3\u30c6\u30a3\u30eb, \u30aa\u30e9\u30f3\u30c0 2001 Redmond 2001-10-21 to 26 / \u30ec\u30c9\u30e2\u30f3\u30c9, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd 2001 Copenhagen 2001-04-30 to 05-04 / \u30b3\u30da\u30f3\u30cf\u30fc\u30b2\u30f3, \u30c7\u30f3\u30de\u30fc\u30af 2000 Toronto 2000-10-23 to 27 / \u30c8\u30ed\u30f3\u30c8, \u30ab\u30ca\u30c0 2000 Tokyo 2000-04-17 to 21 / \u6771\u4eac, \u65e5\u672c 1999 Kona 1999-10-20 to 26 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd 1999 Dublin 1999-04-11 to 16 / \u30c0\u30d6\u30ea\u30f3, \u30a2\u30a4\u30eb\u30e9\u30f3\u30c9 1998 Santa Cruz 1998-10-06 to 09 / \u30b5\u30f3\u30bf\u30af\u30eb\u30fc\u30ba, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd 1998 Sophia Antipolis 1998-03-08 to 13 / \u30bd\u30d5\u30a3\u30a2\u30fb\u30a2\u30f3\u30c6\u30a3\u30dd\u30ea\u30b9, \u30d5\u30e9\u30f3\u30b9 1997 Morristown 1997-11-09 to 14 / \u30e2\u30ea\u30b9\u30bf\u30a6\u30f3, \u30cb\u30e5\u30fc\u30b8\u30e3\u30fc\u30b8\u30fc\u5dde, \u7c73\u56fd 1997 Cambridge 1997-07-13 to 18 / \u30b1\u30f3\u30d6\u30ea\u30c3\u30b8, \u30a4\u30f3\u30b0\u30e9\u30f3\u30c9, \u82f1\u56fd 1997 Nashua 1997-03-09 to 14 / \u30ca\u30b7\u30e5\u30a2, \u30cb\u30e5\u30fc\u30cf\u30f3\u30d7\u30b7\u30e3\u30fc\u5dde, \u7c73\u56fd 1996 Kona 1996-11-15 to 19 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd 1996 Stockholm 1996-07-07 to 12 / \u30b9\u30c8\u30c3\u30af\u30db\u30eb\u30e0, \u30b9\u30a6\u30a7\u30fc\u30c7\u30f3 1996 Santa Cruz 1996-03-10 to 15 / \u30b5\u30f3\u30bf\u30af\u30eb\u30fc\u30ba, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd 1995 Tokyo 1995-11-05 to 10 / \u6771\u4eac, \u65e5\u672c 1995 Monterey 1995-07-09 to 14 / \u30e2\u30f3\u30c8\u30ec\u30fc, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd 1995 Austin 1995-03 / \u30aa\u30fc\u30b9\u30c6\u30a3\u30f3, \u30c6\u30ad\u30b5\u30b9\u5dde, \u7c73\u56fd 1994 Valley Forge 1994-11 / \u30d0\u30ec\u30fc\u30d5\u30a9\u30fc\u30b8, \u30da\u30f3\u30b7\u30eb\u30d9\u30cb\u30a2\u5dde, \u7c73\u56fd 1994 Waterloo 1994-07 / \u30a6\u30a9\u30fc\u30bf\u30fc\u30eb\u30fc, \u30ab\u30ca\u30c0 1994 San Diego 1994-03 / \u30b5\u30f3\u30c7\u30a3\u30a8\u30b4, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd 1993 San Jose 1993-11 / \u30b5\u30f3\u30ce\u30bc, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd 1993 Munich 1993-07 / \u30df\u30e5\u30f3\u30d8\u30f3, \u30c9\u30a4\u30c4 1993 Portland 1993-03 / \u30dd\u30fc\u30c8\u30e9\u30f3\u30c9, \u30aa\u30ec\u30b4\u30f3\u5dde, \u7c73\u56fd 1992 Boston 1992-11 / \u30dc\u30b9\u30c8\u30f3, \u30de\u30b5\u30c1\u30e5\u30fc\u30bb\u30c3\u30c4\u5dde, \u7c73\u56fd 1992 Toronto 1992-07 / \u30c8\u30ed\u30f3\u30c8, \u30ab\u30ca\u30c0 1992 London 1992-03 / \u30ed\u30f3\u30c9\u30f3, \u30a4\u30f3\u30b0\u30e9\u30f3\u30c9, \u82f1\u56fd 1991 Dallas 1991-11 / \u30c0\u30e9\u30b9, \u30c6\u30ad\u30b5\u30b9\u5dde, \u7c73\u56fd 1991 Lund 1991-06 / \u30eb\u30f3\u30c9, \u30b9\u30a6\u30a7\u30fc\u30c7\u30f3 1991 Nashua 1991-03 / \u30ca\u30b7\u30e5\u30a2, \u30cb\u30e5\u30fc\u30b8\u30e3\u30fc\u30b8\u30fc\u5dde, \u7c73\u56fd 1990 Palo Alto 1990-11 / \u30d1\u30ed\u30a2\u30eb\u30c8, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd 1990 Seattle 1990-07 / \u30b7\u30a2\u30c8\u30eb, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd 1990 Somerset 1990-03 / \u30b5\u30de\u30bb\u30c3\u30c8, \u30cb\u30e5\u30fc\u30b8\u30e3\u30fc\u30b8\u30fc\u5dde, \u7c73\u56fd 1989 Washington, DC 1989-12 / \u30ef\u30b7\u30f3\u30c8\u30f3D.C., \u7c73\u56fd \u53c2\u8003\u6587\u732e Upcoming Meetings, Past Meetings https://isocpp.org/std/meetings-and-participation/upcoming-meetings C++ - Meetings http://www.open-std.org/jtc1/sc22/wg21/docs/meetings","title":"\u6a19\u6e96\u5316\u4f1a\u8b70"},{"location":"standardization/meetings/#_1","text":"C++ \u306e\u898f\u683c\u3092\u8b70\u8ad6\u3059\u308b C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u4e3b\u8981\u4f1a\u8b70\u306e\u958b\u50ac\u60c5\u5831\u3067\u3059\u3002","title":"\u6a19\u6e96\u5316\u4f1a\u8b70"},{"location":"standardization/meetings/#2022-portland","text":"","title":"2022 Portland"},{"location":"standardization/meetings/#_2","text":"2022-02-07 to 12 / \u30dd\u30fc\u30c8\u30e9\u30f3\u30c9, \u30aa\u30ec\u30b4\u30f3\u5dde, \u7c73\u56fd","title":"\u5834\u6240"},{"location":"standardization/meetings/#2021","text":"","title":"2021 \u672a\u5b9a"},{"location":"standardization/meetings/#_3","text":"2021 \u79cb / \u672a\u5b9a","title":"\u5834\u6240"},{"location":"standardization/meetings/#2021-montreal","text":"","title":"2021 Montreal"},{"location":"standardization/meetings/#_4","text":"2021 \u590f / \u30e2\u30f3\u30c8\u30ea\u30aa\u30fc\u30eb, \u30ab\u30ca\u30c0","title":"\u5834\u6240"},{"location":"standardization/meetings/#2021-kona","text":"","title":"2021 Kona"},{"location":"standardization/meetings/#_5","text":"2021-02-22 to 27 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd","title":"\u5834\u6240"},{"location":"standardization/meetings/#2020-new-york","text":"","title":"2020 New York (\u4e88\u5b9a)"},{"location":"standardization/meetings/#_6","text":"2020-11 / \u30cb\u30e5\u30fc\u30e8\u30fc\u30af, \u30cb\u30e5\u30fc\u30e8\u30fc\u30af\u5dde, \u7c73\u56fd","title":"\u5834\u6240"},{"location":"standardization/meetings/#2020-varna","text":"","title":"2020 Varna"},{"location":"standardization/meetings/#_7","text":"2020-06-01 to 06 / \u30f4\u30a1\u30eb\u30ca, \u30d6\u30eb\u30ac\u30ea\u30a2","title":"\u5834\u6240"},{"location":"standardization/meetings/#2020-prague","text":"","title":"2020 Prague"},{"location":"standardization/meetings/#_8","text":"2020-02-10 to 15 / \u30d7\u30e9\u30cf, \u30c1\u30a7\u30b3","title":"\u5834\u6240"},{"location":"standardization/meetings/#2019-belfast","text":"","title":"2019 Belfast"},{"location":"standardization/meetings/#_9","text":"2019-11-04 to 09 / \u30d9\u30eb\u30d5\u30a1\u30b9\u30c8, \u5317\u30a2\u30a4\u30eb\u30e9\u30f3\u30c9, \u82f1\u56fd JTC1/SC22/WG21 - Papers 2019 mailing2019-10 pre-Belfast","title":"\u5834\u6240 / \u63d0\u6848"},{"location":"standardization/meetings/#2019-cologne","text":"","title":"2019 Cologne"},{"location":"standardization/meetings/#_10","text":"2019-07-15 to 20 / \u30b1\u30eb\u30f3, \u30c9\u30a4\u30c4 JTC1/SC22/WG21 - Papers 2019 mailing2019-06 pre-Cologne JTC1/SC22/WG21 - Papers 2019 mailing2019-08 post-Cologne","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_11","text":"2019-07 Cologne ISO C++ Committee Trip Report by Bryce Lelbach and others Trip report: Summer ISO C++ standards meeting (Cologne) by Herb Sutter Trip Report: C++ Standards Meeting in Cologne, July 2019 by Botond Ballo The German tour: Cologne trip report by Guy Davidson Trip report: July 2019 ISO C++ committee meeting, Cologne, Germany by Timur Doumler Trip Report: ISO C++ Meeting Cologne (2019) by Matthias Gehre","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_12","text":"std :: format \u3084 constexpr vector , using enum , constinit \u306a\u3069\u3001\u524d\u56de\u306e\u4f1a\u8b70\u307e\u3067\u306b\u304a\u304a\u3088\u305d\u5b8c\u6210\u3057\u3066\u3044\u305f\u591a\u6570\u306e\u63d0\u6848\u304c C++20 \u30c9\u30e9\u30d5\u30c8\u5165\u308a\u3057\u307e\u3057\u305f\u3002\u4e00\u65b9\u3067\u30012018 \u5e74\u306b\u30c9\u30e9\u30d5\u30c8\u5165\u308a\u3057\u3066\u3044\u305f Contracts \u306f\u5927\u5e45\u306a\u8a2d\u8a08\u306e\u898b\u76f4\u3057\u304c\u767a\u751f\u3057\u3001C++20 \u3067\u306e\u5c0e\u5165\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u3066 Study Group \u3067\u8b70\u8ad6\u3092\u7d9a\u3051\u308b\u3053\u3068\u304c\u6c7a\u307e\u308a\u307e\u3057\u305f\u3002 \u3053\u306e\u4f1a\u8b70\u3092\u3082\u3063\u3066 C++20 \u898f\u683c\u30c9\u30e9\u30d5\u30c8\u3078\u306e\u65b0\u6a5f\u80fd\u306e\u8ffd\u52a0\u306f\u7de0\u3081\u5207\u308a (Feature Freeze) \u3067\u3059\u3002\u4ee5\u964d\u306f C++20 \u898f\u683c\u5b8c\u6210\u306b\u5411\u3051\u305f\u6587\u9762\u306e\u4fee\u6b63\u3068\u3001C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u8b70\u8ad6\u304c\u9032\u3081\u3089\u308c\u307e\u3059\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2019-kona","text":"","title":"2019 Kona"},{"location":"standardization/meetings/#_13","text":"2019-02-18 to 23 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2019 mailing2019-01 pre-Kona JTC1/SC22/WG21 - Papers 2019 mailing2019-03 post-Kona","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_14","text":"2019-02 Kona ISO C++ Committee Trip Report by Bryce Lelbach and others Trip report: Winter ISO C++ standards meeting (Kona) by Herb Sutter Kona: A trip report by Corentin Trip report: February 2019 ISO C++ committee meeting, Kona, Hawai\u2019i by Timur Doumler Telescopes and matrices and audio: Kona trip report by Guy Davidson Trip Report: Freestanding (and Modules) in Kona by Bryce Lelbach Trip Report: C++ Standards Meeting in Kona, February 2019 by Botond Ballo","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_15","text":"\u30b3\u30eb\u30fc\u30c1\u30f3\u3068\u3001C++23 \u4ee5\u964d\u3078\u306e\u5148\u9001\u308a\u304c\u898b\u8fbc\u307e\u308c\u3066\u3044\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e C++20 \u5165\u308a\u304c\u627f\u8a8d\u3055\u308c\u3001C++20 \u306f C++11 \u4ee5\u6765\u306e\u5927\u578b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u306a\u308b\u3053\u3068\u304c\u6c7a\u307e\u308a\u307e\u3057\u305f\u3002 C++20 \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb \u3067\u306f\u3001\u3053\u306e\u4f1a\u8b70\u3092\u3082\u3063\u3066 Feature Freeze \u306b\u306a\u308a\u307e\u3059\u3002\u4ed5\u69d8\u6587\u8a00\u306e\u30ec\u30d3\u30e5\u30fc\u304c\u672a\u5b8c\u4e86\u306e\u5c0f\u898f\u6a21\u306a\u63d0\u6848\u3092\u6b21\u56de\u306e Colonge \u4f1a\u8b70\u3067\u627f\u8a8d\u3057\u3001C++20 \u306e\u5168\u5bb9\u304c\u8f09\u3063\u305f\u898f\u683c\u30c9\u30e9\u30d5\u30c8\u304c\u3067\u304d\u3042\u304c\u308a\u307e\u3059\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2018-san-diego","text":"","title":"2018 San Diego"},{"location":"standardization/meetings/#_16","text":"2018-11-05 to 10 / \u30b5\u30f3\u30c7\u30a3\u30a8\u30b4, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2018 mailing2018-10 pre-San Diego JTC1/SC22/WG21 - Papers 2018 mailing2018-11 post-San Diego","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_17","text":"2018 San Diego ISO C++ Committee Trip Report by Bryce Lelbach and others Trip report: Fall ISO C++ standards meeting (San Diego) by Herb Sutter Fall 2018 ISO WG21 C++ Standards Committee meeting trip report","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_18","text":"Range \u30e9\u30a4\u30d6\u30e9\u30ea\u306e C++20 \u5165\u308a\u304c\u6c7a\u307e\u3063\u305f\u307b\u304b\u3001\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u77ed\u7e2e\u69cb\u6587\u3001 coneteval \u306e\u8ffd\u52a0\u3084 constexpr \u306e\u5236\u9650\u7de9\u548c\u306a\u3069\u5b9a\u6570\u5f0f\u306e\u5f37\u5316\u3001\u7b26\u53f7\u4ed8\u6574\u6570\u578b\u304c 2 \u306e\u88dc\u6570\u3067\u3042\u308b\u3053\u3068\u306e\u898f\u5b9a\u3001 char8_t \u578b\u306e\u8ffd\u52a0\u306a\u3069\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2018-rapperswil","text":"","title":"2018 Rapperswil"},{"location":"standardization/meetings/#_19","text":"2018-06-04 to 09 / \u30e9\u30c3\u30d1\u30fc\u30b9\u30f4\u30a3\u30fc\u30eb, \u30b9\u30a4\u30b9 JTC1/SC22/WG21 - Papers 2018 mailing2018-05 pre-Rapperswil JTC1/SC22/WG21 - Papers 2018 mailing2018-06 post-Rapperswil","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_20","text":"2018 Rapperswil ISO C++ Committee Trip Report (Contracts for C++20; Parallelism TS v2 published; Draft Reflection TS) by Bryce Lelbach and others Trip report: Summer ISO C++ standards meeting (Rapperswil) by Herb Sutter","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_21","text":"\u5c5e\u6027\u69cb\u6587\u306b\u3088\u308b Contracts (\u5951\u7d04\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) \u306e C++20 \u5165\u308a\u304c\u6c7a\u307e\u3063\u305f\u307b\u304b\u3001STL \u3078\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8ffd\u52a0\u3001\u4efb\u610f\u306e\u30af\u30e9\u30b9\u578b\u306e\u975e\u578b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u306e\u5229\u7528\u3001\u5b9a\u6570\u5f0f\u3067\u306e\u4eee\u60f3\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u8a31\u53ef\u3001 explicit ( bool ) \u306a\u3069\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2018-jacksonville","text":"","title":"2018 Jacksonville"},{"location":"standardization/meetings/#_22","text":"2018-03-12 to 17 / \u30b8\u30e3\u30af\u30bd\u30f3\u30d3\u30eb, \u30d5\u30ed\u30ea\u30c0\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2018 mailing2018-02 pre-Jacksonville JTC1/SC22/WG21 - Papers 2018 mailing2018-04 post-Jacksonville","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_23","text":"2018 Jacksonville ISO C++ Committee Reddit Trip Report by Bryce Lelbach and others Trip report: Winter ISO C++ standards meeting (Jacksonville) by Herb Sutter","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_24","text":"< chrono > \u3078\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8ffd\u52a0\u3001 < span > , no_unique_address \u3084 likely / unlikely \u5c5e\u6027\u69cb\u6587\u306e\u8ffd\u52a0\u306a\u3069\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2017-albuquerque","text":"","title":"2017 Albuquerque"},{"location":"standardization/meetings/#_25","text":"2017-11-06 to 11 / \u30a2\u30eb\u30d0\u30ab\u30fc\u30ad, \u30cb\u30e5\u30fc\u30e1\u30ad\u30b7\u30b3\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2017 mailing2017-10 pre-Albuquerque JTC1/SC22/WG21 - Papers 2017 mailing2017-11 post-Albuquerque","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_26","text":"2018 Jacksonville ISO C++ Committee Reddit Trip Report by Bryce Lelbach and others Trip report: Fall ISO C++ standards meeting (Albuquerque) by Herb Sutter","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_27","text":"\u4e09\u65b9\u6bd4\u8f03\u6f14\u7b97\u5b50 <=> \u3068\u305d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30b5\u30dd\u30fc\u30c8\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u306e\u3055\u3089\u306a\u308b constexpr \u5bfe\u5fdc\u3001\u521d\u671f\u5316\u5f0f\u3092\u3068\u3082\u306a\u3046\u7bc4\u56f2 for \u6587\u306a\u3069\u306e C++20 \u5165\u308a\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2017-toronto","text":"","title":"2017 Toronto"},{"location":"standardization/meetings/#_28","text":"2017-07-10 to 15 / \u30c8\u30ed\u30f3\u30c8, \u30ab\u30ca\u30c0 JTC1/SC22/WG21 - Papers 2017 mailing2017-06 pre-Toronto JTC1/SC22/WG21 - Papers 2017 mailing2017-07 post-Toronto","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_29","text":"2017 Toronto ISO C++ Committee Discussion Thread (Concepts in C++20; Coroutines, Ranges and Networking TSes published) by Bryce Lelbach and others Trip report: Summer ISO C++ standards meeting (Toronto) by Herb Sutter Trip Report: C++ Standards Meeting in Toronto, July 2017","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_30","text":"C++20 \u306b\u95a2\u3059\u308b\u6700\u521d\u306e\u4f1a\u8b70\u3067\u3059\u3002\u30b3\u30f3\u30bb\u30d7\u30c8\u3001Designated Initialization, \u30e9\u30e0\u30c0\u5f0f\u306b\u304a\u3051\u308b this \u306e\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u8a31\u53ef\u306a\u3069\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2017-kona","text":"","title":"2017 Kona"},{"location":"standardization/meetings/#_31","text":"2017-02-27 to 03-04 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2017 mailing2017-02 pre-Kona JTC1/SC22/WG21 - Papers 2017 mailing2017-03 post-Kona","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_32","text":"Trip report: Winter ISO C++ standards meeting (Kona), C++17 is complete by Herb Sutter Red Hat at the ISO C++ Standards Meeting (April 2017, Kona): Core Language by Jason Merrill","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_33","text":"C++17 \u306b\u3064\u3044\u3066\u8b70\u8ad6\u3059\u308b\u6700\u5f8c\u306e\u4f1a\u8b70\u3067\u3001\u3053\u306e\u4f1a\u8b70\u306b\u3088\u3063\u3066 C++17 \u898f\u683c\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002 std :: byte \u578b\u306e\u5c0e\u5165\u304c\u8ffd\u52a0\u3067\u627f\u8a8d\u3055\u308c\u305f\u307b\u304b\u306f\u3001\u5404\u56fd\u59d4\u54e1\u4f1a\u304b\u3089\u306e\u30b3\u30e1\u30f3\u30c8\u3078\u306e\u5bfe\u5fdc\u304c\u4e3b\u3067\u3059\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2017","text":"","title":"2017 \u5e74\u4ee5\u524d\u306e\u4f1a\u8b70"},{"location":"standardization/meetings/#2016-issaquah","text":"","title":"2016 Issaquah"},{"location":"standardization/meetings/#_34","text":"2016-11-07 to 12 / \u30a4\u30b5\u30af\u30a2, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2016 mailing2016-10 pre-Issaquah JTC1/SC22/WG21 - Papers 2016 mailing2016-11 post-Issaquah","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_35","text":"Trip report: Fall ISO C++ standards meeting (Issaquah) by Herb Sutter 2016 Issaquah ISO C++ Committee Meeting Live Thread The view from Nov 2016 C++ Standard Meeting Issaquah by Michael Wong","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_36","text":"using \u5ba3\u8a00\u3067\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30d1\u30c3\u30af\u5c55\u958b\u3001\u53e4\u3044\u4f8b\u5916\u4ed5\u69d8 throw () \u306e\u524a\u9664\u3001 < charconv > \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 \u3053\u306e\u4f1a\u8b70\u3092\u3082\u3063\u3066 C++17 \u306f Feature Freeze \u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2016-oulu","text":"","title":"2016 Oulu"},{"location":"standardization/meetings/#_37","text":"2016-06-20 to 25 / \u30aa\u30a6\u30eb, \u30d5\u30a3\u30f3\u30e9\u30f3\u30c9 JTC1/SC22/WG21 - Papers 2016 mailing2016-06 pre-Oulu JTC1/SC22/WG21 - Papers 2016 mailing2016-07 post-Oulu","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_38","text":"Trip report: Summer ISO C++ standards meeting (Oulu) by Herb Sutter Red Hat at the ISO C++ Standards Meeting (June 2016, Oulu): Library by Jonathan Wakely C++17, All Final Features from Oulu in a Few Slides by Michael Wong","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_39","text":"\u30b3\u30a2\u8a00\u8a9e\u6a5f\u80fd\u3068\u3057\u3066\u3001\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u63a8\u8ad6\uff08deduction guide\uff09\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u5909\u6570\u3001 constexpr if , \u69cb\u9020\u5316\u675f\u7e1b\u3001if \u6587\u3084 switch \u6587\u3067\u306e\u521d\u671f\u5316\u5f0f\u3068\u6761\u4ef6\u5f0f\u306e\u5206\u96e2\u3001\u30b3\u30d4\u30fc\u7701\u7565\u4fdd\u8a3c\u3001\u5f0f\u306e\u8a55\u4fa1\u9806\u5e8f\u306e\u53b3\u5bc6\u5316\u3001 std :: launder \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u3068\u3057\u3066\u306f\u3001 std :: variant , variant , optional , any \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u7d71\u4e00\u3001\u9023\u60f3\u30b3\u30f3\u30c6\u30ca\u306e splice \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2016-jacksonville","text":"","title":"2016 Jacksonville"},{"location":"standardization/meetings/#_40","text":"2016-02-29 to 03-05 / \u30b8\u30e3\u30af\u30bd\u30f3\u30d3\u30eb, \u30d5\u30ed\u30ea\u30c0\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2016 mailing2016-02 pre-Jacksonville JTC1/SC22/WG21 - Papers 2016 mailing2016-03 post-Jacksonville","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_41","text":"Trip report: Winter ISO C++ standards meeting by Herb Sutter Trip Report: C++ Standards Meeting in Jacksonville, February 2016 by Botond Ballo Trip report: C++ meeting at Jacksonville by J. Daniel Garcia","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_42","text":"16 \u9032\u6d6e\u52d5\u5c0f\u6570\u70b9\u30ea\u30c6\u30e9\u30eb\u3001constexpr \u30e9\u30e0\u30c0\u3001\u5c5e\u6027\u69cb\u6587 [ [fallthrough ] ] , [ [nodiscard ] ] , [ [maybe_unused ] ] \u306e\u307b\u304b\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b std :: any , std :: optional , std :: string_view , < filesystem > , < memory_resource > , \u4e26\u5217\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u6570\u5b66\u306e\u7279\u6b8a\u95a2\u6570\u7b49\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2015-kona","text":"","title":"2015 Kona"},{"location":"standardization/meetings/#_43","text":"2015-10-19 to 24 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2015 mailing2015-09 pre-Kona JTC1/SC22/WG21 - Papers 2015 mailing2015-11 post-Kona","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_44","text":"Trip report: Fall 2015 ISO C++ standards meeting by Herb Sutter Trip Report: C++ Standards Meeting in Kona, October 2015 by J. Daniel Garcia C++17 progress update! (Oct 2015)","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_45","text":"register \u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u524a\u9664\u3001 __has_include () \u30de\u30af\u30ed\u3001 std :: conunction \u3001 std :: disjunction \u3001 std :: negation \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2015-lenexa","text":"","title":"2015 Lenexa"},{"location":"standardization/meetings/#_46","text":"2015-05-04 to 09 / \u30ec\u30cd\u30c3\u30af\u30b5, \u30ab\u30f3\u30b6\u30b9\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2015 mailing2015-04 pre-Lenexa JTC1/SC22/WG21 - Papers 2015 mailing2015-05 post-Lenexa","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_47","text":"Trip report: Spring ISO C++ meeting by Herb Sutter Trip Report: C++ Standards Meeting in Lenexa, May 2015 by J. Daniel Garcia Lenexa C++ Meeting Report (Core Language) by Jason Merrill C++17 progress update!","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_48","text":"std :: bool_constant , std :: vector , std :: list , std :: forward_list \u306e\u4e0d\u5b8c\u5168\u578b\u30b5\u30dd\u30fc\u30c8\u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2015-cologne","text":"2015-02-23 to 27 / \u30b1\u30eb\u30f3, \u30c9\u30a4\u30c4","title":"2015 Cologne"},{"location":"standardization/meetings/#2015-skillman","text":"2015-01-26 to 28 / \u30b9\u30ad\u30eb\u30de\u30f3, \u30cb\u30e5\u30fc\u30b8\u30e3\u30fc\u30b8\u30fc\u5dde, \u7c73\u56fd","title":"2015 Skillman"},{"location":"standardization/meetings/#2014-urbana-champaign","text":"","title":"2014 Urbana-Champaign"},{"location":"standardization/meetings/#_49","text":"2014-11-03 to 08 / \u30a2\u30fc\u30d0\u30ca\u30fb\u30b7\u30e3\u30f3\u30da\u30fc\u30f3, \u30a4\u30ea\u30ce\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2014 mailing2014-10 pre-Urbana JTC1/SC22/WG21 - Papers 2014 mailing2014-11 post-Urbana","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_50","text":"Trip Report: Fall ISO C++ Meeting by Herb Sutter Trip Report: C++ Standards Meeting in Urbana-Champaign, November 2014 by J. Daniel Garcia Red Hat at the ISO C++ Standards Meeting (November 2014): Library by Jason Merrill","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_51","text":"C++14 \u898f\u683c\u5b8c\u6210\u5f8c\u306e\u6700\u521d\u306e\u4f1a\u8b70\u3067\u3059\u3002 \u7573\u307f\u8fbc\u307f\u5f0f\u3001\u5165\u308c\u5b50\u540d\u524d\u7a7a\u9593\u5b9a\u7fa9\u306e\u7c21\u7565\u5316\u3001 u8 \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3001\u975e\u578b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30dd\u30a4\u30f3\u30bf\u5236\u9650\u7de9\u548c\u3001 void_t , std :: uncaught_exceptions \u7b49\u306e C++17 \u5165\u308a\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2014-rapperswil","text":"","title":"2014 Rapperswil"},{"location":"standardization/meetings/#_52","text":"2014-06-16 to 21 / \u30e9\u30c3\u30d1\u30fc\u30b9\u30f4\u30a3\u30fc\u30eb, \u30b9\u30a4\u30b9 JTC1/SC22/WG21 - Papers 2014 mailing2014-05 pre-Rapperswil JTC1/SC22/WG21 - Papers 2014 mailing2014-07 post-Rapperswil","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_53","text":"Trip Report: C++ Standards Meeting in Urbana-Champaign, November 2014 by J. Daniel Garcia Red Hat at the ISO C++ Standards Meeting (November 2014): Library by Jonathan Wakely, Jason Merrill, Matt Newsome","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_54","text":"C++14 \u306b\u3064\u3044\u3066\u8b70\u8ad6\u3059\u308b\u6700\u5f8c\u306e\u4f1a\u8b70\u3067\u3001\u3053\u306e\u4f1a\u8b70\u306b\u3088\u3063\u3066 C++14 \u898f\u683c\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\u3002 C++14 \u3078\u306e\u6a5f\u80fd\u8ffd\u52a0\u306f\u306a\u304f\u3001C++17 \u306b\u5bfe\u3057\u3066\u306f\u3001\u30c8\u30e9\u30a4\u30b0\u30e9\u30d5\u306e\u524a\u9664\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e typename \u4f7f\u7528\u306e\u8a31\u53ef\u3001\u7701\u7565\u7248\u306e static_assert \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2014-issaquah","text":"","title":"2014 Issaquah"},{"location":"standardization/meetings/#_55","text":"2014-02-10 to 15 / \u30a4\u30b5\u30af\u30a2, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2014 mailing2014-01 pre-Issaquah JTC1/SC22/WG21 - Papers 2014 mailing2014-03 post-Issaquah","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_56","text":"Trip report: Winter ISO C++ meeting by Herb Sutter Trip Report: C++ Standards Committee Meeting in Issaquah, February 2014 by J. Daniel Garcia Red Hat at the ISO C++ Standards Meeting (February 2014) by Matt Newsome","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_57","text":"C++14 \u306e\u6700\u7d42\u4f5c\u696d\u3068 C++17 \u306b\u5411\u3051\u305f\u4e00\u90e8\u306e\u4f5c\u696d\u304c\u884c\u308f\u308c\u307e\u3057\u305f\u3002 \u3069\u3061\u3089\u306b\u5bfe\u3057\u3066\u3082\u6a5f\u80fd\u306e\u8ffd\u52a0\u306f\u306a\u304f\u3001C++14 \u306b\u5bfe\u3057\u3066\u306f\u5404\u56fd\u59d4\u54e1\u4f1a\u304b\u3089\u306e\u30b3\u30e1\u30f3\u30c8\u3084\u65e2\u5b58\u306e Issue \u3078\u306e\u5bfe\u5fdc\u304c\u4e3b\u3067\u3059\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2013-chicago","text":"","title":"2013 Chicago"},{"location":"standardization/meetings/#_58","text":"2013-09-23 to 28 / \u30b7\u30ab\u30b4, \u30a4\u30ea\u30ce\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2013 mailing2013-09-pre-Chicago JTC1/SC22/WG21 - Papers 2013 mailing2013-10-post-Chicago","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_59","text":"Trip report: Fall ISO C++ meeting by Herb Sutter","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_60","text":"\u6570\u5024\u30ea\u30c6\u30e9\u30eb\u306e\u533a\u5207\u308a\u6587\u5b57\u3001 [ [deprecated ] ] \u5c5e\u6027\u3001\u5f15\u6570\u3068\u3057\u3066\u30b5\u30a4\u30ba\u3092\u3068\u308b\u30b0\u30ed\u30fc\u30d0\u30eb delete \u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u8a31\u53ef\u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 \u307e\u305f\u3001\u524d\u56de\u4f1a\u8b70\u3067\u627f\u8a8d\u3055\u308c\u3066\u3044\u305f\u52d5\u7684\u914d\u5217\u306e\u30b5\u30dd\u30fc\u30c8\u304a\u3088\u3073 std :: dynarray < T > \u3068 std :: optional < T > \u306f C++14 \u304b\u3089\u53d6\u308a\u9664\u304b\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2013-bristol","text":"","title":"2013 Bristol"},{"location":"standardization/meetings/#_61","text":"2013-04-15 to 20 / \u30d6\u30ea\u30b9\u30c8\u30eb, \u30a4\u30f3\u30b0\u30e9\u30f3\u30c9, \u82f1\u56fd JTC1/SC22/WG21 - Papers 2013 mailing2013-03-pre-Bristol JTC1/SC22/WG21 - Papers 2013 mailing2013-05-post-Bristol","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_62","text":"Trip Report: ISO C++ Spring 2013 Meeting by Herb Sutter The view from C++ Standard meeting April 2013 Part 1 by Michael Wong A look at C++14: Papers Part I by Jens Weller A look at C++14: Papers Part 2 by Jens Weller A look at C++14 and beyond: Papers Part 3 by Jens Weller A look at C++14 and beyond: Papers Part 4 by Jens Weller","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#_63","text":"\u30b3\u30a2\u8a00\u8a9e\u6a5f\u80fd\u3068\u3057\u3066\u3001 constexpr \u306e\u5236\u9650\u7de9\u548c\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30e9\u30e0\u30c0\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u521d\u671f\u5316\u30ad\u30e3\u30d7\u30c1\u30e3\u3001\u5909\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3001\u95a2\u6570\u306e\u623b\u308a\u5024\u578b\u63a8\u8ad6\u3001\u52d5\u7684\u914d\u5217\u306e\u30b5\u30dd\u30fc\u30c8\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u3068\u3057\u3066\u3001 std :: make_unique () , \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3078\u306e\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u30ea\u30c6\u30e9\u30eb\u5c0e\u5165\u3001 std :: optional < T > , std :: dynarray < T > \u7b49\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002 C++14 \u306e\u307b\u3068\u3093\u3069\u306e\u6a5f\u80fd\u304c\u3053\u306e\u4f1a\u8b70\u3067\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2012-portland","text":"","title":"2012 Portland"},{"location":"standardization/meetings/#_64","text":"2012-10-15 to 19 / \u30dd\u30fc\u30c8\u30e9\u30f3\u30c9, \u30aa\u30ec\u30b4\u30f3\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2012 mailing2012-09-pre-Portland JTC1/SC22/WG21 - Papers 2012 mailing2012-11-post-Portland","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_65","text":"Issue \u5bfe\u5fdc\u304c\u4e3b\u3067\u5927\u304d\u306a\u6a5f\u80fd\u306e\u8ffd\u52a0\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u3068\u3057\u3066\u3001 std :: complex , std :: chrono , std :: array , std :: initilizer_list , std :: tuple , std :: pair \u7b49\u306e constexpr \u5bfe\u5fdc\u304c\u627f\u8a8d\u3055\u308c\u307e\u3057\u305f\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2012-kona","text":"","title":"2012 Kona"},{"location":"standardization/meetings/#_66","text":"2012-02-06 to 10 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd JTC1/SC22/WG21 - Papers 2012 mailing2012-01-pre-Portland JTC1/SC22/WG21 - Papers 2012 mailing2012-02-post-Portland","title":"\u5834\u6240 / \u63d0\u6848 / \u4f1a\u8b70\u306e\u7d50\u679c"},{"location":"standardization/meetings/#_67","text":"C++14 \u306b\u3064\u3044\u3066\u8b70\u8ad6\u3059\u308b\u6700\u521d\u306e\u4f1a\u8b70\u3067\u3059\u3002 \u6a5f\u80fd\u306e\u8ffd\u52a0\u306f\u7121\u304f\u3001C++11 \u306b\u5bfe\u3059\u308b Issue \u3078\u306e\u5bfe\u5fdc\u304c\u4e3b\u3067\u3059\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#2011-bloomington","text":"2011-08-15 to 19 / \u30d6\u30eb\u30fc\u30df\u30f3\u30c8\u30f3, \u30a4\u30f3\u30c7\u30a3\u30a2\u30ca\u5dde, \u7c73\u56fd","title":"2011 Bloomington"},{"location":"standardization/meetings/#2011-madrid","text":"2011-03-21 to 26 / \u30de\u30c9\u30ea\u30fc\u30c9, \u30b9\u30da\u30a4\u30f3","title":"2011 Madrid"},{"location":"standardization/meetings/#2010-batavia","text":"2010-11-08 to 13 / \u30d0\u30bf\u30f4\u30a3\u30a2, \u30a4\u30ea\u30ce\u30a4\u5dde, \u7c73\u56fd","title":"2010 Batavia"},{"location":"standardization/meetings/#2010-rapperswil","text":"2010-08-02 to 07 / \u30e9\u30c3\u30d1\u30fc\u30b9\u30f4\u30a3\u30fc\u30eb, \u30b9\u30a4\u30b9","title":"2010 Rapperswil"},{"location":"standardization/meetings/#2010-pittsburgh","text":"2010-03-08 to 13 / \u30d4\u30c3\u30c4\u30d0\u30fc\u30b0, \u30da\u30f3\u30b7\u30eb\u30d9\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"2010 Pittsburgh"},{"location":"standardization/meetings/#2009-santa-cruz","text":"2009-10-19 to 24 / \u30b5\u30f3\u30bf\u30af\u30eb\u30fc\u30ba, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"2009 Santa Cruz"},{"location":"standardization/meetings/#2009-frankfurt","text":"2009-07-13 to 18 / \u30d5\u30e9\u30f3\u30af\u30d5\u30eb\u30c8, \u30c9\u30a4\u30c4","title":"2009 Frankfurt"},{"location":"standardization/meetings/#2009-summit","text":"2009-03-02 to 06 / \u30b5\u30df\u30c3\u30c8, \u30cb\u30e5\u30fc\u30b8\u30e3\u30fc\u30b8\u30fc\u5dde, \u7c73\u56fd","title":"2009 Summit"},{"location":"standardization/meetings/#2008-san-francisco","text":"2008-09-14 to 20 / \u30b5\u30f3\u30d5\u30e9\u30f3\u30b7\u30b9\u30b3, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"2008 San Francisco"},{"location":"standardization/meetings/#2008-sophia-antipolis","text":"2008-06-08 to 13 / \u30bd\u30d5\u30a3\u30a2\u30fb\u30a2\u30f3\u30c6\u30a3\u30dd\u30ea\u30b9, \u30d5\u30e9\u30f3\u30b9","title":"2008 Sophia Antipolis"},{"location":"standardization/meetings/#2008-bellevue","text":"2008-02-24 to 29 / \u30d9\u30eb\u30d3\u30e5\u30fc, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd","title":"2008 Bellevue"},{"location":"standardization/meetings/#2007-kona","text":"2007-09-30 to 10-06 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd","title":"2007 Kona"},{"location":"standardization/meetings/#2007-toronto","text":"2007-07-15 to 20 / \u30c8\u30ed\u30f3\u30c8, \u30ab\u30ca\u30c0","title":"2007 Toronto"},{"location":"standardization/meetings/#2007-oxford","text":"2007-04-15 to 20 / \u30aa\u30c3\u30af\u30b9\u30d5\u30a9\u30fc\u30c9, \u30a4\u30f3\u30b0\u30e9\u30f3\u30c9, \u82f1\u56fd","title":"2007 Oxford"},{"location":"standardization/meetings/#2006-portland","text":"2006-10-15 to 20 / \u30dd\u30fc\u30c8\u30e9\u30f3\u30c9, \u30aa\u30ec\u30b4\u30f3\u5dde, \u7c73\u56fd","title":"2006 Portland"},{"location":"standardization/meetings/#2006-berlin","text":"2006-04-02 to 07 / \u30d9\u30eb\u30ea\u30f3, \u30c9\u30a4\u30c4","title":"2006 Berlin"},{"location":"standardization/meetings/#2005-mt-tremblant","text":"2005-10-02 to 08 / \u30e2\u30f3\u30c8\u30e9\u30f3\u30d6\u30e9\u30f3, \u30ab\u30ca\u30c0","title":"2005 Mt. Tremblant"},{"location":"standardization/meetings/#2005-lillehammer","text":"2005-04-10 to 15 / \u30ea\u30ec\u30cf\u30f3\u30e1\u30eb, \u30ce\u30eb\u30a6\u30a7\u30fc","title":"2005 Lillehammer"},{"location":"standardization/meetings/#2004-redmond","text":"2004-10-17 to 22 / \u30ec\u30c9\u30e2\u30f3\u30c9, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd","title":"2004 Redmond"},{"location":"standardization/meetings/#2004-sydney","text":"2004-03-21 to 26 / \u30b7\u30c9\u30cb\u30fc, \u30aa\u30fc\u30b9\u30c8\u30e9\u30ea\u30a2","title":"2004 Sydney"},{"location":"standardization/meetings/#2003-kona","text":"2003-10-26 to 31 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd","title":"2003 Kona"},{"location":"standardization/meetings/#2003-oxford","text":"2003-04-06 to 11 / \u30aa\u30c3\u30af\u30b9\u30d5\u30a9\u30fc\u30c9, \u30a4\u30f3\u30b0\u30e9\u30f3\u30c9, \u82f1\u56fd","title":"2003 Oxford"},{"location":"standardization/meetings/#2002-santa-cruz","text":"2002-10-22 to 27 / \u30b5\u30f3\u30bf\u30af\u30eb\u30fc\u30ba, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"2002 Santa Cruz"},{"location":"standardization/meetings/#2002-curacao","text":"2002-04-21 to 26 / \u30ad\u30e5\u30e9\u30bd\u30fc, \u30aa\u30e9\u30f3\u30c0\u9818\u30a2\u30f3\u30c6\u30a3\u30eb, \u30aa\u30e9\u30f3\u30c0","title":"2002 Curacao"},{"location":"standardization/meetings/#2001-redmond","text":"2001-10-21 to 26 / \u30ec\u30c9\u30e2\u30f3\u30c9, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd","title":"2001 Redmond"},{"location":"standardization/meetings/#2001-copenhagen","text":"2001-04-30 to 05-04 / \u30b3\u30da\u30f3\u30cf\u30fc\u30b2\u30f3, \u30c7\u30f3\u30de\u30fc\u30af","title":"2001 Copenhagen"},{"location":"standardization/meetings/#2000-toronto","text":"2000-10-23 to 27 / \u30c8\u30ed\u30f3\u30c8, \u30ab\u30ca\u30c0","title":"2000 Toronto"},{"location":"standardization/meetings/#2000-tokyo","text":"2000-04-17 to 21 / \u6771\u4eac, \u65e5\u672c","title":"2000 Tokyo"},{"location":"standardization/meetings/#1999-kona","text":"1999-10-20 to 26 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd","title":"1999 Kona"},{"location":"standardization/meetings/#1999-dublin","text":"1999-04-11 to 16 / \u30c0\u30d6\u30ea\u30f3, \u30a2\u30a4\u30eb\u30e9\u30f3\u30c9","title":"1999 Dublin"},{"location":"standardization/meetings/#1998-santa-cruz","text":"1998-10-06 to 09 / \u30b5\u30f3\u30bf\u30af\u30eb\u30fc\u30ba, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"1998 Santa Cruz"},{"location":"standardization/meetings/#1998-sophia-antipolis","text":"1998-03-08 to 13 / \u30bd\u30d5\u30a3\u30a2\u30fb\u30a2\u30f3\u30c6\u30a3\u30dd\u30ea\u30b9, \u30d5\u30e9\u30f3\u30b9","title":"1998 Sophia Antipolis"},{"location":"standardization/meetings/#1997-morristown","text":"1997-11-09 to 14 / \u30e2\u30ea\u30b9\u30bf\u30a6\u30f3, \u30cb\u30e5\u30fc\u30b8\u30e3\u30fc\u30b8\u30fc\u5dde, \u7c73\u56fd","title":"1997 Morristown"},{"location":"standardization/meetings/#1997-cambridge","text":"1997-07-13 to 18 / \u30b1\u30f3\u30d6\u30ea\u30c3\u30b8, \u30a4\u30f3\u30b0\u30e9\u30f3\u30c9, \u82f1\u56fd","title":"1997 Cambridge"},{"location":"standardization/meetings/#1997-nashua","text":"1997-03-09 to 14 / \u30ca\u30b7\u30e5\u30a2, \u30cb\u30e5\u30fc\u30cf\u30f3\u30d7\u30b7\u30e3\u30fc\u5dde, \u7c73\u56fd","title":"1997 Nashua"},{"location":"standardization/meetings/#1996-kona","text":"1996-11-15 to 19 / \u30b3\u30ca, \u30cf\u30ef\u30a4\u5dde, \u7c73\u56fd","title":"1996 Kona"},{"location":"standardization/meetings/#1996-stockholm","text":"1996-07-07 to 12 / \u30b9\u30c8\u30c3\u30af\u30db\u30eb\u30e0, \u30b9\u30a6\u30a7\u30fc\u30c7\u30f3","title":"1996 Stockholm"},{"location":"standardization/meetings/#1996-santa-cruz","text":"1996-03-10 to 15 / \u30b5\u30f3\u30bf\u30af\u30eb\u30fc\u30ba, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"1996 Santa Cruz"},{"location":"standardization/meetings/#1995-tokyo","text":"1995-11-05 to 10 / \u6771\u4eac, \u65e5\u672c","title":"1995 Tokyo"},{"location":"standardization/meetings/#1995-monterey","text":"1995-07-09 to 14 / \u30e2\u30f3\u30c8\u30ec\u30fc, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"1995 Monterey"},{"location":"standardization/meetings/#1995-austin","text":"1995-03 / \u30aa\u30fc\u30b9\u30c6\u30a3\u30f3, \u30c6\u30ad\u30b5\u30b9\u5dde, \u7c73\u56fd","title":"1995 Austin"},{"location":"standardization/meetings/#1994-valley-forge","text":"1994-11 / \u30d0\u30ec\u30fc\u30d5\u30a9\u30fc\u30b8, \u30da\u30f3\u30b7\u30eb\u30d9\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"1994 Valley Forge"},{"location":"standardization/meetings/#1994-waterloo","text":"1994-07 / \u30a6\u30a9\u30fc\u30bf\u30fc\u30eb\u30fc, \u30ab\u30ca\u30c0","title":"1994 Waterloo"},{"location":"standardization/meetings/#1994-san-diego","text":"1994-03 / \u30b5\u30f3\u30c7\u30a3\u30a8\u30b4, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"1994 San Diego"},{"location":"standardization/meetings/#1993-san-jose","text":"1993-11 / \u30b5\u30f3\u30ce\u30bc, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"1993 San Jose"},{"location":"standardization/meetings/#1993-munich","text":"1993-07 / \u30df\u30e5\u30f3\u30d8\u30f3, \u30c9\u30a4\u30c4","title":"1993 Munich"},{"location":"standardization/meetings/#1993-portland","text":"1993-03 / \u30dd\u30fc\u30c8\u30e9\u30f3\u30c9, \u30aa\u30ec\u30b4\u30f3\u5dde, \u7c73\u56fd","title":"1993 Portland"},{"location":"standardization/meetings/#1992-boston","text":"1992-11 / \u30dc\u30b9\u30c8\u30f3, \u30de\u30b5\u30c1\u30e5\u30fc\u30bb\u30c3\u30c4\u5dde, \u7c73\u56fd","title":"1992 Boston"},{"location":"standardization/meetings/#1992-toronto","text":"1992-07 / \u30c8\u30ed\u30f3\u30c8, \u30ab\u30ca\u30c0","title":"1992 Toronto"},{"location":"standardization/meetings/#1992-london","text":"1992-03 / \u30ed\u30f3\u30c9\u30f3, \u30a4\u30f3\u30b0\u30e9\u30f3\u30c9, \u82f1\u56fd","title":"1992 London"},{"location":"standardization/meetings/#1991-dallas","text":"1991-11 / \u30c0\u30e9\u30b9, \u30c6\u30ad\u30b5\u30b9\u5dde, \u7c73\u56fd","title":"1991 Dallas"},{"location":"standardization/meetings/#1991-lund","text":"1991-06 / \u30eb\u30f3\u30c9, \u30b9\u30a6\u30a7\u30fc\u30c7\u30f3","title":"1991 Lund"},{"location":"standardization/meetings/#1991-nashua","text":"1991-03 / \u30ca\u30b7\u30e5\u30a2, \u30cb\u30e5\u30fc\u30b8\u30e3\u30fc\u30b8\u30fc\u5dde, \u7c73\u56fd","title":"1991 Nashua"},{"location":"standardization/meetings/#1990-palo-alto","text":"1990-11 / \u30d1\u30ed\u30a2\u30eb\u30c8, \u30ab\u30ea\u30d5\u30a9\u30eb\u30cb\u30a2\u5dde, \u7c73\u56fd","title":"1990 Palo Alto"},{"location":"standardization/meetings/#1990-seattle","text":"1990-07 / \u30b7\u30a2\u30c8\u30eb, \u30ef\u30b7\u30f3\u30c8\u30f3\u5dde, \u7c73\u56fd","title":"1990 Seattle"},{"location":"standardization/meetings/#1990-somerset","text":"1990-03 / \u30b5\u30de\u30bb\u30c3\u30c8, \u30cb\u30e5\u30fc\u30b8\u30e3\u30fc\u30b8\u30fc\u5dde, \u7c73\u56fd","title":"1990 Somerset"},{"location":"standardization/meetings/#1989-washington-dc","text":"1989-12 / \u30ef\u30b7\u30f3\u30c8\u30f3D.C., \u7c73\u56fd","title":"1989 Washington, DC"},{"location":"standardization/meetings/#_68","text":"Upcoming Meetings, Past Meetings https://isocpp.org/std/meetings-and-participation/upcoming-meetings C++ - Meetings http://www.open-std.org/jtc1/sc22/wg21/docs/meetings","title":"\u53c2\u8003\u6587\u732e"},{"location":"standardization/status/","text":"\u51e6\u7406\u7cfb\u306e\u5bfe\u5fdc\u72b6\u6cc1 \u51e6\u7406\u7cfb\u306e\u6bd4\u8f03\u8868 C++ compiler support C++20 GCC: C++2a Support in GCC libstdc++: C++ 202a Clang: C++2a implementation status libc++: libc++ C++2a Status Microsoft Visaul C++: Visual C++ Language Conformance C++17 GCC: C++17 Support in GCC libstdc++: C++ 2017 Clang: C++17 implementation status libc++: libc++ C++17 Status Microsoft Visaul C++: Visual C++ Language Conformance C++14 GCC: C++14 Support in GCC libstdc++: C++ 2014 Clang: C++14 implementation status libc++: libc++ C++14 Status Microsoft Visaul C++: Visual C++ Language Conformance","title":"\u51e6\u7406\u7cfb\u306e\u5bfe\u5fdc\u72b6\u6cc1"},{"location":"standardization/status/#_1","text":"","title":"\u51e6\u7406\u7cfb\u306e\u5bfe\u5fdc\u72b6\u6cc1"},{"location":"standardization/status/#_2","text":"C++ compiler support","title":"\u51e6\u7406\u7cfb\u306e\u6bd4\u8f03\u8868"},{"location":"standardization/status/#c20","text":"GCC: C++2a Support in GCC libstdc++: C++ 202a Clang: C++2a implementation status libc++: libc++ C++2a Status Microsoft Visaul C++: Visual C++ Language Conformance","title":"C++20"},{"location":"standardization/status/#c17","text":"GCC: C++17 Support in GCC libstdc++: C++ 2017 Clang: C++17 implementation status libc++: libc++ C++17 Status Microsoft Visaul C++: Visual C++ Language Conformance","title":"C++17"},{"location":"standardization/status/#c14","text":"GCC: C++14 Support in GCC libstdc++: C++ 2014 Clang: C++14 implementation status libc++: libc++ C++14 Status Microsoft Visaul C++: Visual C++ Language Conformance","title":"C++14"},{"location":"standardization/working-drafts/","text":"C++ \u898f\u683c C++11 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N3337) | HTML \u7248 C++14 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4140) | HTML \u7248 C++17 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4659) | HTML \u7248 \u6700\u65b0\u306e C++20 \u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4835) | HTML \u7248","title":"\u898f\u683c\u30c9\u30e9\u30d5\u30c8"},{"location":"standardization/working-drafts/#c","text":"C++11 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N3337) | HTML \u7248 C++14 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4140) | HTML \u7248 C++17 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4659) | HTML \u7248 \u6700\u65b0\u306e C++20 \u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4835) | HTML \u7248","title":"C++ \u898f\u683c"},{"location":"tools/onlinecompilers/","text":"\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9 \u4e3b\u8981\u306a\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9 C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3001\u5b9f\u884c\u3001\u5171\u6709\u304c\u3067\u304d\u308b Web \u30b5\u30a4\u30c8\u3067\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9 \u65e5\u672c\u8a9e\u5165\u51fa\u529b \u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6 \u8907\u6570\u30d5\u30a1\u30a4\u30eb Wandbox GCC 4.4.7 - 10.0.0* Clang 3.1 - 10.0.0* Compiler Explorer (Execution \u30e2\u30fc\u30c9) GCC 4.7.3 - 10.0.0* Clang 3.3 - 10.0.0* ICC 16.0.3 - 19.0.1 Ideone GCC 8.3.0 GDB Online GCC 7.4.0 repl.it Clang 7.0.0 paiza.io Clang 7.0.0 C++ Shell GCC 4.9.2 * \u5370\u306f trunk \u305d\u306e\u4ed6\u306e\u30c4\u30fc\u30eb Compiler Explorer Compiler Explorer \u306f\u3001C, C++, Rust, Swift \u306a\u3069\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u8868\u793a\u3059\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002\u8907\u6570\u30bf\u30d6\u3092\u4f7f\u3063\u3066\u3001GCC, Clang, MSVC, ICC \u306a\u3069\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3084\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5909\u3048\u305f\u3068\u304d\u306e\u7d50\u679c\u3092\u6bd4\u8f03\u3067\u304d\u307e\u3059\u3002 \u5165\u529b\u4f8b int square ( int num ) { return num * num ; } \u51fa\u529b square ( int ): push rbp mov rbp , rsp mov DWORD PTR [ rbp-4 ], edi mov eax , DWORD PTR [ rbp-4 ] imul eax , DWORD PTR [ rbp-4 ] pop rbp ret Compiler Explorer \u306b\u306f\u3001Web \u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092 # include \" URL \" \u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u308b\u72ec\u81ea\u62e1\u5f35\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001GitHub \u306a\u3069\u306b\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30b7\u30f3\u30b0\u30eb\u30d8\u30c3\u30c0\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e2d\u3067\u7c21\u5358\u306b\u4f7f\u3048\u307e\u3059\uff08\u4f8b: https://godbolt.org/z/OV-vGQ \uff09 Quick C++ Benchmark Quick C++ Benchmark \u306f\u3001 google/benchmark \u306b\u3088\u308b\u5b9f\u884c\u6642\u9593\u306e\u8a08\u6e2c\u3068\u3001\u305d\u306e\u7d50\u679c\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u304c\u3067\u304d\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002\u68d2\u30b0\u30e9\u30d5\u306b\u3088\u308b\u6bd4\u8f03\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u8868\u793a\u3001\u30b0\u30e9\u30d5\u753b\u50cf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001URL \u306b\u3088\u308b\u7d50\u679c\u306e\u30b7\u30a7\u30a2\u306a\u3069\u306e\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002 \u4f8b: http://quick-bench.com/O1QdfCc73docKGKjaYBxWG6a9AU C++ Insights C++ Insights \u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u3001range-based for, \u69cb\u9020\u5316\u675f\u7e1b\u306a\u3069\u3067\u4f55\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u306e\u304b\u3092\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5358\u7d14\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u5206\u89e3\u3059\u308b\u3053\u3068\u3067\u53ef\u8996\u5316\u3059\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u306e\u30c4\u30fc\u30eb\u3067\u3059\u3002 \u5165\u529b\u4f8b #include <cstdio> int main () { const char arr [ 10 ]{ 2 , 4 , 6 , 8 }; for ( const char & c : arr ) { printf ( \"c=%c \\n \" , c ); } } \u51fa\u529b #include <cstdio> int main () { const char arr [ 10 ] = { 2 , 4 , 6 , 8 , '\\0' , '\\0' , '\\0' , '\\0' , '\\0' , '\\0' }; { char const ( & __range1 )[ 10 ] = arr ; const char * __begin1 = __range1 ; const char * __end1 = __range1 + 10l ; for ( ; __begin1 != __end1 ; ++ __begin1 ) { const char & c = * __begin1 ; printf ( \"c=%c \\n \" , static_cast < int > ( c )); } } } Stensal Stensal \u306f\u3001C, C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3001\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u9055\u53cd\u306a\u3069\u30e1\u30e2\u30ea\u306b\u95a2\u3059\u308b\u554f\u984c\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306b\u3001\u305d\u306e\u7b87\u6240\u3068\u539f\u56e0\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u8868\u793a\u3059\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30e9\u30f3\u3001Null \u30dd\u30a4\u30f3\u30bf\u306e\u53c2\u7167\u5916\u3057\u3001\u672a\u521d\u671f\u5316\u5909\u6570\u306e\u5229\u7528\u306a\u3069\u306e\u554f\u984c\u3092\u660e\u3089\u304b\u306b\u3057\u307e\u3059\u3002\u5b9f\u88c5\u306b\u306f Wandbox \u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u5165\u529b\u4f8b #include <iostream> int main () { const char s [] = { 'A' , 'B' , 'C' }; std :: cout << s << '\\n' ; } \u51fa\u529b\u4f8b =========== Start of #0 stensal runtime message =========== Runtime error : ** [ out - of - bounds read ] ** Continuing execution can cause undefined behavior , abort ! ``` stensal - diagnostic - info - - Reading 4 bytes from 0 x937c414 will read undefined values . - - The memory - space - to - be - read ( start : 0 x937c414 , size : 3 bytes ) is bound to ' s ' at - file : / prog . cc :: 5 , 0 - - 0 x937c414 0 x937c416 - +------------------------------+ - | the memory - space - to - be - read | ...... - +------------------------------+ - ^~~~~~~~~~ - the read starts at the memory begin . - - Stack trace ( most recent call first ) of the read . - [ 1 ] file : / musl - 1 . 1 . 10 / src / string / strlen . c :: 91 , 3 - [ 2 ] @[ unknown_id 291 ] - [ 3 ] file : / prog . cc :: 7 , 2 - [ 4 ] [ libc - start - main ] - ``` error code ( 56 , 213 ) ============ End of #0 stensal runtime message ============","title":"\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9"},{"location":"tools/onlinecompilers/#_1","text":"","title":"\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9"},{"location":"tools/onlinecompilers/#_2","text":"C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3001\u5b9f\u884c\u3001\u5171\u6709\u304c\u3067\u304d\u308b Web \u30b5\u30a4\u30c8\u3067\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9 \u65e5\u672c\u8a9e\u5165\u51fa\u529b \u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6 \u8907\u6570\u30d5\u30a1\u30a4\u30eb Wandbox GCC 4.4.7 - 10.0.0* Clang 3.1 - 10.0.0* Compiler Explorer (Execution \u30e2\u30fc\u30c9) GCC 4.7.3 - 10.0.0* Clang 3.3 - 10.0.0* ICC 16.0.3 - 19.0.1 Ideone GCC 8.3.0 GDB Online GCC 7.4.0 repl.it Clang 7.0.0 paiza.io Clang 7.0.0 C++ Shell GCC 4.9.2 * \u5370\u306f trunk","title":"\u4e3b\u8981\u306a\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9"},{"location":"tools/onlinecompilers/#_3","text":"","title":"\u305d\u306e\u4ed6\u306e\u30c4\u30fc\u30eb"},{"location":"tools/onlinecompilers/#compiler-explorer","text":"Compiler Explorer \u306f\u3001C, C++, Rust, Swift \u306a\u3069\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u8868\u793a\u3059\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002\u8907\u6570\u30bf\u30d6\u3092\u4f7f\u3063\u3066\u3001GCC, Clang, MSVC, ICC \u306a\u3069\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3084\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5909\u3048\u305f\u3068\u304d\u306e\u7d50\u679c\u3092\u6bd4\u8f03\u3067\u304d\u307e\u3059\u3002 \u5165\u529b\u4f8b int square ( int num ) { return num * num ; } \u51fa\u529b square ( int ): push rbp mov rbp , rsp mov DWORD PTR [ rbp-4 ], edi mov eax , DWORD PTR [ rbp-4 ] imul eax , DWORD PTR [ rbp-4 ] pop rbp ret Compiler Explorer \u306b\u306f\u3001Web \u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092 # include \" URL \" \u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u308b\u72ec\u81ea\u62e1\u5f35\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001GitHub \u306a\u3069\u306b\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30b7\u30f3\u30b0\u30eb\u30d8\u30c3\u30c0\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e2d\u3067\u7c21\u5358\u306b\u4f7f\u3048\u307e\u3059\uff08\u4f8b: https://godbolt.org/z/OV-vGQ \uff09","title":"Compiler Explorer"},{"location":"tools/onlinecompilers/#quick-c-benchmark","text":"Quick C++ Benchmark \u306f\u3001 google/benchmark \u306b\u3088\u308b\u5b9f\u884c\u6642\u9593\u306e\u8a08\u6e2c\u3068\u3001\u305d\u306e\u7d50\u679c\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u304c\u3067\u304d\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002\u68d2\u30b0\u30e9\u30d5\u306b\u3088\u308b\u6bd4\u8f03\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u8868\u793a\u3001\u30b0\u30e9\u30d5\u753b\u50cf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3001URL \u306b\u3088\u308b\u7d50\u679c\u306e\u30b7\u30a7\u30a2\u306a\u3069\u306e\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002 \u4f8b: http://quick-bench.com/O1QdfCc73docKGKjaYBxWG6a9AU","title":"Quick C++ Benchmark"},{"location":"tools/onlinecompilers/#c-insights","text":"C++ Insights \u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u3001range-based for, \u69cb\u9020\u5316\u675f\u7e1b\u306a\u3069\u3067\u4f55\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u306e\u304b\u3092\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5358\u7d14\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u5206\u89e3\u3059\u308b\u3053\u3068\u3067\u53ef\u8996\u5316\u3059\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u306e\u30c4\u30fc\u30eb\u3067\u3059\u3002 \u5165\u529b\u4f8b #include <cstdio> int main () { const char arr [ 10 ]{ 2 , 4 , 6 , 8 }; for ( const char & c : arr ) { printf ( \"c=%c \\n \" , c ); } } \u51fa\u529b #include <cstdio> int main () { const char arr [ 10 ] = { 2 , 4 , 6 , 8 , '\\0' , '\\0' , '\\0' , '\\0' , '\\0' , '\\0' }; { char const ( & __range1 )[ 10 ] = arr ; const char * __begin1 = __range1 ; const char * __end1 = __range1 + 10l ; for ( ; __begin1 != __end1 ; ++ __begin1 ) { const char & c = * __begin1 ; printf ( \"c=%c \\n \" , static_cast < int > ( c )); } } }","title":"C++ Insights"},{"location":"tools/onlinecompilers/#stensal","text":"Stensal \u306f\u3001C, C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3066\u3001\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u9055\u53cd\u306a\u3069\u30e1\u30e2\u30ea\u306b\u95a2\u3059\u308b\u554f\u984c\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306b\u3001\u305d\u306e\u7b87\u6240\u3068\u539f\u56e0\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u8868\u793a\u3059\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30e9\u30f3\u3001Null \u30dd\u30a4\u30f3\u30bf\u306e\u53c2\u7167\u5916\u3057\u3001\u672a\u521d\u671f\u5316\u5909\u6570\u306e\u5229\u7528\u306a\u3069\u306e\u554f\u984c\u3092\u660e\u3089\u304b\u306b\u3057\u307e\u3059\u3002\u5b9f\u88c5\u306b\u306f Wandbox \u304c\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u5165\u529b\u4f8b #include <iostream> int main () { const char s [] = { 'A' , 'B' , 'C' }; std :: cout << s << '\\n' ; } \u51fa\u529b\u4f8b =========== Start of #0 stensal runtime message =========== Runtime error : ** [ out - of - bounds read ] ** Continuing execution can cause undefined behavior , abort ! ``` stensal - diagnostic - info - - Reading 4 bytes from 0 x937c414 will read undefined values . - - The memory - space - to - be - read ( start : 0 x937c414 , size : 3 bytes ) is bound to ' s ' at - file : / prog . cc :: 5 , 0 - - 0 x937c414 0 x937c416 - +------------------------------+ - | the memory - space - to - be - read | ...... - +------------------------------+ - ^~~~~~~~~~ - the read starts at the memory begin . - - Stack trace ( most recent call first ) of the read . - [ 1 ] file : / musl - 1 . 1 . 10 / src / string / strlen . c :: 91 , 3 - [ 2 ] @[ unknown_id 291 ] - [ 3 ] file : / prog . cc :: 7 , 2 - [ 4 ] [ libc - start - main ] - ``` error code ( 56 , 213 ) ============ End of #0 stensal runtime message ============","title":"Stensal"},{"location":"tools/package-manager/","text":"\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3 \u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u6bd4\u8f03 \u5bfe\u5fdc\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0 Vcpkg Windows, macOS, Linux Conan Windows, macOS, Linux Hunter Windows, macOS, Linux Buckaroo Windows, macOS, Linux poac macOS, Linux","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3"},{"location":"tools/package-manager/#_1","text":"","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3"},{"location":"tools/package-manager/#_2","text":"\u5bfe\u5fdc\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0 Vcpkg Windows, macOS, Linux Conan Windows, macOS, Linux Hunter Windows, macOS, Linux Buckaroo Windows, macOS, Linux poac macOS, Linux","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u6bd4\u8f03"}]}