{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C++ \u306e\u6b69\u304d\u65b9 | CppMap #include <iostream> int main () { std :: cout << \"Hello, CppMap! \\n \" ; } \u3053\u306e\u30b5\u30a4\u30c8\u306b\u3064\u3044\u3066 C++17, C++20, C++23, C++26 \u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u8abf\u67fb\u30fb\u63d0\u4f9b\u3057\u307e\u3059\u3002 \u30e9\u30a4\u30bb\u30f3\u30b9 \u672c\u30b5\u30a4\u30c8\u306e\u8a18\u4e8b\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30d1\u30d6\u30ea\u30c3\u30af\u30c9\u30e1\u30a4\u30f3\u3067\u3059\u3002 \u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u8457\u4f5c\u6a29\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u6240\u6709\u8005\u306b\u5e30\u5c5e\u3057\u307e\u3059\u3002","title":"Home"},{"location":"#c-cppmap","text":"#include <iostream> int main () { std :: cout << \"Hello, CppMap! \\n \" ; }","title":"C++ \u306e\u6b69\u304d\u65b9 | CppMap"},{"location":"#_1","text":"C++17, C++20, C++23, C++26 \u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u8abf\u67fb\u30fb\u63d0\u4f9b\u3057\u307e\u3059\u3002","title":"\u3053\u306e\u30b5\u30a4\u30c8\u306b\u3064\u3044\u3066"},{"location":"#_2","text":"\u672c\u30b5\u30a4\u30c8\u306e\u8a18\u4e8b\u3068\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30d1\u30d6\u30ea\u30c3\u30af\u30c9\u30e1\u30a4\u30f3\u3067\u3059\u3002 \u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u30fc\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u8457\u4f5c\u6a29\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u6240\u6709\u8005\u306b\u5e30\u5c5e\u3057\u307e\u3059\u3002","title":"\u30e9\u30a4\u30bb\u30f3\u30b9"},{"location":"articles/comment-tricks/","text":"\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u30c8\u30ea\u30c3\u30af \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f7f\u3048\u308b\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u30c8\u30ea\u30c3\u30af\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u958b\u767a\u4e2d\u306e\u3061\u3087\u3063\u3068\u3057\u305f\u30c7\u30d0\u30c3\u30b0\u3084\u3001\u30df\u30b9\u306e\u9632\u6b62\u306b\u6d3b\u7528\u3067\u304d\u307e\u3059\u3002 \u7bc4\u56f2\u306e ON\u30fbOFF \u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u7bc4\u56f2\u30b3\u30e1\u30f3\u30c8\u306e\u6709\u52b9\u30fb\u7121\u52b9\u3092\u5207\u308a\u66ff\u3048\u307e\u3059\u3002 \u7121\u52b9 #include <iostream> int main () { /**/ int x ; std :: cin >> x ; std :: cout << x * x ; /**/ } \u6709\u52b9 #include <iostream> int main () { /** int x; std::cin >> x; std::cout << x * x; /**/ } \u5024\u306e\u5207\u308a\u66ff\u3048 \u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u5de6\u53f3\u3069\u3061\u3089\u304b\u306e\u5024\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u5de6 #include <iostream> int main () { constexpr int N = /**/ 100 /*/ 200 /**/ ; std :: cout << N << '\\n' ; } \u53f3 #include <iostream> int main () { constexpr int N = /** 100 /*/ 200 /**/ ; std :: cout << N << '\\n' ; } \u7bc4\u56f2\u306e\u5207\u308a\u66ff\u3048 \u5024\u306e\u5207\u308a\u66ff\u3048\u306e\u7bc4\u56f2\u7248\u3067\u3059\u3002 \u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u524d\u534a\u3001\u5f8c\u534a\u3069\u3061\u3089\u304b\u306e\u7bc4\u56f2\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u524d\u534a #include <iostream> int main () { /**/ int x ; std :: cin >> x ; std :: cout << x * x ; /*/ int x, y; std::cin >> x >> y; std::cout << x + y; /**/ } \u5f8c\u534a #include <iostream> int main () { /** int x; std::cin >> x; std::cout << x * x; /*/ int x , y ; std :: cin >> x >> y ; std :: cout << x + y ; /**/ } \u884c\u306e\u5165\u308c\u66ff\u3048\u306e\u9632\u6b62 \u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u6642\u306b\u3001\u30b3\u30d4\u30fc\uff06\u30da\u30fc\u30b9\u30c8\u3067\u884c\u306e\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u3066\u3057\u307e\u3046\u3053\u3068\u3092\u9632\u304e\u307e\u3059\u3002 \u57fa\u672c\u306e\u30b3\u30fc\u30c9 void First () {} void Second () {} int main () { First (); /* */ Second (); } \u5165\u308c\u66ff\u3048\u308b\u3068\u30a8\u30e9\u30fc void First () {} void Second () {} int main () { */ Second (); First (); /* }","title":"\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u30c8\u30ea\u30c3\u30af"},{"location":"articles/comment-tricks/#_1","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f7f\u3048\u308b\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u30c8\u30ea\u30c3\u30af\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u958b\u767a\u4e2d\u306e\u3061\u3087\u3063\u3068\u3057\u305f\u30c7\u30d0\u30c3\u30b0\u3084\u3001\u30df\u30b9\u306e\u9632\u6b62\u306b\u6d3b\u7528\u3067\u304d\u307e\u3059\u3002","title":"\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u30c8\u30ea\u30c3\u30af"},{"location":"articles/comment-tricks/#onoff","text":"\u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u7bc4\u56f2\u30b3\u30e1\u30f3\u30c8\u306e\u6709\u52b9\u30fb\u7121\u52b9\u3092\u5207\u308a\u66ff\u3048\u307e\u3059\u3002 \u7121\u52b9 #include <iostream> int main () { /**/ int x ; std :: cin >> x ; std :: cout << x * x ; /**/ } \u6709\u52b9 #include <iostream> int main () { /** int x; std::cin >> x; std::cout << x * x; /**/ }","title":"\u7bc4\u56f2\u306e ON\u30fbOFF"},{"location":"articles/comment-tricks/#_2","text":"\u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u5de6\u53f3\u3069\u3061\u3089\u304b\u306e\u5024\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u5de6 #include <iostream> int main () { constexpr int N = /**/ 100 /*/ 200 /**/ ; std :: cout << N << '\\n' ; } \u53f3 #include <iostream> int main () { constexpr int N = /** 100 /*/ 200 /**/ ; std :: cout << N << '\\n' ; }","title":"\u5024\u306e\u5207\u308a\u66ff\u3048"},{"location":"articles/comment-tricks/#_3","text":"\u5024\u306e\u5207\u308a\u66ff\u3048\u306e\u7bc4\u56f2\u7248\u3067\u3059\u3002 \u30b9\u30e9\u30c3\u30b7\u30e5 / \u306e\u6709\u7121\u306b\u5fdc\u3058\u3066\u3001\u524d\u534a\u3001\u5f8c\u534a\u3069\u3061\u3089\u304b\u306e\u7bc4\u56f2\u3092\u9078\u629e\u3057\u307e\u3059\u3002 \u524d\u534a #include <iostream> int main () { /**/ int x ; std :: cin >> x ; std :: cout << x * x ; /*/ int x, y; std::cin >> x >> y; std::cout << x + y; /**/ } \u5f8c\u534a #include <iostream> int main () { /** int x; std::cin >> x; std::cout << x * x; /*/ int x , y ; std :: cin >> x >> y ; std :: cout << x + y ; /**/ }","title":"\u7bc4\u56f2\u306e\u5207\u308a\u66ff\u3048"},{"location":"articles/comment-tricks/#_4","text":"\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u6642\u306b\u3001\u30b3\u30d4\u30fc\uff06\u30da\u30fc\u30b9\u30c8\u3067\u884c\u306e\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u3066\u3057\u307e\u3046\u3053\u3068\u3092\u9632\u304e\u307e\u3059\u3002 \u57fa\u672c\u306e\u30b3\u30fc\u30c9 void First () {} void Second () {} int main () { First (); /* */ Second (); } \u5165\u308c\u66ff\u3048\u308b\u3068\u30a8\u30e9\u30fc void First () {} void Second () {} int main () { */ Second (); First (); /* }","title":"\u884c\u306e\u5165\u308c\u66ff\u3048\u306e\u9632\u6b62"},{"location":"articles/how-to-read-keywords/","text":"\u4e88\u7d04\u8a9e\u306e\u8aad\u307f\u65b9\u3068\u540d\u524d\u306e\u7531\u6765 C++ \u306e\u4e88\u7d04\u8a9e\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765\u3067\u3059\u3002 \u30ad\u30fc\u30ef\u30fc\u30c9 \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 alignas \u30a2\u30e9\u30a4\u30f3\u30a2\u30ba \uff5e\u3068\u3057\u3066\u914d\u7f6e\u3059\u308b alignof \u30a2\u30e9\u30a4\u30f3\u30aa\u30d6 \uff5e\u306e\u914d\u7f6e\u306e\u3055\u308c\u65b9 and \u30a2\u30f3\u30c9 && \u306e\u7f6e\u304d\u63db\u3048 and_eq \u30a2\u30f3\u30c9\u30fb\u30a4\u30b3\u30fc\u30eb &= \u306e\u7f6e\u304d\u63db\u3048 asm \u30a2\u30bb\u30f3\u30d6\u30ea/\u30a2\u30bb\u30e0 \u30a2\u30bb\u30f3\u30d6\u30ea (assembly) \u306e\u7565 auto \u30aa\u30fc\u30c8 \u81ea\u52d5 bitand \u30d3\u30c3\u30c8\u30a2\u30f3\u30c9 & \u306e\u7f6e\u304d\u63db\u3048 bitor \u30d3\u30c3\u30c8\u30aa\u30a2 | \u306e\u7f6e\u304d\u63db\u3048 bool \u30d6\u30fc\u30eb/\u30d6\u30fc\u30ea\u30a2\u30f3 \u30d6\u30fc\u30ea\u30a2\u30f3 (boolean) \u306e\u7565 break \u30d6\u30ec\u30fc\u30af \u4e2d\u65ad case \u30b1\u30fc\u30b9 \u5834\u5408 catch \u30ad\u30e3\u30c3\u30c1 \u6355\u307e\u3048\u308b char \u30c1\u30e3\u30fc/\u30ad\u30e3\u30e9/\u30ad\u30e3\u30e9\u30af\u30bf\u30fc \u6587\u5b57 (character) \u306e\u7565 char8_t \u30c1\u30e3\u30fc 8 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 8 \u30c6\u30a3\u30fc UTF-8 \u6587\u5b57 (character) \u306e\u7565 char16_t \u30c1\u30e3\u30fc 16 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 16 \u30c6\u30a3\u30fc UTF-16 \u6587\u5b57 (character) \u306e\u7565 char32_t \u30c1\u30e3\u30fc 32 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 32 \u30c6\u30a3\u30fc UTF-32 \u6587\u5b57 (character) \u306e\u7565 class \u30af\u30e9\u30b9 \u90e8\u985e compl \u30b3\u30f3\u30d7\u30eb/\u30b3\u30f3\u30d7\u30ea\u30e1\u30f3\u30c8 ~\u306e\u7f6e\u304d\u63db\u3048 concept \u30b3\u30f3\u30bb\u30d7\u30c8 \u30b3\u30f3\u30bb\u30d7\u30c8\u3002\u8981\u4ef6\u306e\u96c6\u5408 const \u30b3\u30f3\u30b9\u30c8 \u5b9a\u6570 (constant) \u306e\u7565 consteval \u30b3\u30f3\u30b9\u30c8\u30a4\u30fc\u30d0\u30eb/\u30b3\u30f3\u30b9\u30c8\u30a8\u30d0\u30eb \u5b9a\u6570 (constant) \u8a55\u4fa1 (evaluation) constexpr \u30b3\u30f3\u30b9\u30c8\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3/\u30b3\u30f3\u30b9\u30c8\u30a8\u30af\u30b9\u30d1\u30fc \u5b9a\u6570 (constant) \u5f0f (expression) const_cast \u30b3\u30f3\u30b9\u30c8\u30fb\u30ad\u30e3\u30b9\u30c8 \u5b9a\u6570\u6027\u306e\u5909\u63db continue \u30b3\u30f3\u30c6\u30a3\u30cb\u30e5\u30fc \u30b9\u30ad\u30c3\u30d7\u3059\u308b co_await \u30b3\u30fb\u30a2\u30a6\u30a7\u30a4\u30c8 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u5f85\u3064 co_return \u30b3\u30fb\u30ea\u30bf\u30fc\u30f3 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u8fd4\u308b co_yield \u30b3\u30fb\u30a4\u30fc\u30eb\u30c9 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u8b72\u308b decltype \u30c7\u30af\u30eb\u30bf\u30a4\u30d7 \u5ba3\u8a00 (declaration)+ \u578b (type) default \u30c7\u30d5\u30a9\u30eb\u30c8 \u65e2\u5b9a delete \u30c7\u30ea\u30fc\u30c8 \u524a\u9664 do \u30c9\u30a5\u30fc \u3059\u308b double \u30c0\u30d6\u30eb \u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (double precision floating point number) dynamic_cast \u30c0\u30a4\u30ca\u30df\u30c3\u30af\u30fb\u30ad\u30e3\u30b9\u30c8 \u52d5\u7684\u306a\u578b\u306e\u5909\u63db else \u30a8\u30eb\u30b9 \u305d\u306e\u307b\u304b enum \u30a4\u30cb\u30e5\u30fc\u30e0/\u30a4\u30fc\u30ca\u30e0 \u5217\u6319\u5b50 (enumerator) \u306e\u7565 explicit \u30a8\u30af\u30b9\u30d7\u30ea\u30b7\u30c3\u30c8 \u660e\u793a\u7684\u306a export \u30a8\u30af\u30b9\u30dd\u30fc\u30c8 \u307b\u304b\u3078\u9001\u308a\u51fa\u3059 extern \u30a8\u30af\u30b9\u30bf\u30fc\u30f3 \u5916\u90e8\u3078 (external) \u306e\u7565 false \u30d5\u30a9\u30eb\u30b9 \u507d float \u30d5\u30ed\u30fc\u30c8 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (floating point number) for \u30d5\u30a9\u30fc/\u30d5\u30a9\u30a2 \uff5e\u306b\u5bfe\u3057\u3066 friend \u30d5\u30ec\u30f3\u30c9 \u53cb\u3060\u3061 goto \u30b4\u30fc\u30c8\u30a5\u30fc \uff5e\u3078\u884c\u304f if \u30a4\u30d5 \u3082\u3057 import \u30a4\u30f3\u30dd\u30fc\u30c8 \uff5e\u306b\u6301\u3061\u8fbc\u3080 inline \u30a4\u30f3\u30e9\u30a4\u30f3 \u30a4\u30f3\u30e9\u30a4\u30f3 int \u30a4\u30f3\u30c8 \u6574\u6570 (integer) \u306e\u7565 long \u30ed\u30f3\u30b0 \u9577\u3044 module \u30e2\u30b8\u30e5\u30fc\u30eb \u90e8\u54c1\u306e\u96c6\u307e\u308a mutable \u30df\u30e5\u30fc\u30bf\u30d6\u30eb \u5909\u66f4\u53ef\u80fd\u306a namespace \u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9 \u540d\u524d\u7a7a\u9593 new \u30cb\u30e5\u30fc \u65b0\u3057\u3044 noexcept \u30ce\u30fc\u30a8\u30af\u30bb\u30d7\u30c8 \u7121\u4f8b\u5916 (no exception) \u306e\u7565 not \u30ce\u30c3\u30c8 ! \u306e\u7f6e\u304d\u63db\u3048 not_eq \u30ce\u30c3\u30c8\u30fb\u30a4\u30b3\u30fc\u30eb != \u306e\u7f6e\u304d\u63db\u3048 nullptr \u30cc\u30eb\u30dd\u30a4\u30f3\u30bf/\u30cc\u30eb\u30d4\u30fc\u30c6\u30a3\u30fc\u30a2\u30fc\u30eb null \u3092\u8868\u3059\u30dd\u30a4\u30f3\u30bf operator \u30aa\u30da\u30ec\u30fc\u30bf\u30fc \u6f14\u7b97\u5b50 or \u30aa\u30a2 || \u306e\u7f6e\u304d\u63db\u3048 or_eq \u30aa\u30a2\u30fb\u30a4\u30b3\u30fc\u30eb ||= \u306e\u7f6e\u304d\u63db\u3048 private \u30d7\u30e9\u30a4\u30d9\u30fc\u30c8 \u79c1\u6709\u306e protected \u30d7\u30ed\u30c6\u30af\u30c6\u30c3\u30c9 \u4fdd\u8b77\u3055\u308c\u305f public \u30d1\u30d6\u30ea\u30c3\u30af \u516c\u958b\u3055\u308c\u305f register \u30ec\u30b8\u30b9\u30bf (CPU \u306e) \u30ec\u30b8\u30b9\u30bf reinterpret_cast \u30ea\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30c3\u30c8\u30fb\u30ad\u30e3\u30b9\u30c8 \u518d\u89e3\u91c8\u3059\u308b\u5909\u63db requires \u30ea\u30af\u30ef\u30a4\u30a2\u30ba \u8981\u6c42\u3059\u308b return \u30ea\u30bf\u30fc\u30f3 \u8fd4\u3059 short \u30b7\u30e7\u30fc\u30c8 \u77ed\u3044 signed \u30b5\u30a4\u30f3\u30c9 \u7b26\u53f7\u4ed8\u304d sizeof \u30b5\u30a4\u30ba\u30aa\u30d6 \uff5e\u306e\u30b5\u30a4\u30ba static \u30b9\u30bf\u30c6\u30a3\u30c3\u30af \u9759\u7684\u306a static_assert \u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30fb\u30a2\u30b5\u30fc\u30c8 \u9759\u7684 (static) \u306a\u8868\u660e (assertion) static_cast \u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30fb\u30ad\u30e3\u30b9\u30c8 \u9759\u7684\u306b\u5909\u63db\u3059\u308b struct \u30b9\u30c8\u30e9\u30af\u30c8 \u69cb\u9020 switch \u30b9\u30a4\u30c3\u30c1 \u5206\u5c90 template \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u96db\u5f62 this \u30c7\u30a3\u30b9 \u3053\u306e thread_local \u30b9\u30ec\u30c3\u30c9\u30fb\u30ed\u30fc\u30ab\u30eb \u30b9\u30ec\u30c3\u30c9 + \u5c40\u6240\u7684\u306a throw \u30b9\u30ed\u30fc \u6295\u3052\u308b true \u30c8\u30a5\u30eb\u30fc \u771f try \u30c8\u30e9\u30a4 \u8a66\u884c\u3059\u308b typedef \u30bf\u30a4\u30d7\u30c7\u30d5 \u578b (type) \u5b9a\u7fa9 (definition) \u306e\u7565 typeid \u30bf\u30a4\u30d7\u30a2\u30a4\u30c7\u30a3\u30fc \u578b (type) \u8b58\u5225 (identification) typename \u30bf\u30a4\u30d7\u30cd\u30fc\u30e0 \u578b (type) \u306e\u540d\u524d (name) union \u30e6\u30cb\u30aa\u30f3 \u9023\u5408/\u5171\u7528 unsigned \u30a2\u30f3\u30b5\u30a4\u30f3\u30c9 \u7b26\u53f7\u306a\u3057 using \u30e6\u30fc\u30b8\u30f3\u30b0 \u4f7f\u3046 virtual \u30d0\u30fc\u30c1\u30e3\u30eb \u4eee\u60f3 void \u30f4\u30a9\u30a4\u30c9 \u7a7a\u306e volatile \u30dc\u30e9\u30bf\u30a4\u30eb \u63ee\u767a\u3059\u308b wchar_t \u30c0\u30d6\u30eb\u30c1\u30e3\u30fc\u30c6\u30a3\u30fc/\u30c0\u30d6\u30eb\u30ad\u30e3\u30e9\u30c6\u30a3\u30fc \u30ef\u30a4\u30c9\u306a char while \u30ef\u30a4\u30eb/\u30db\u30ef\u30a4\u30eb \uff5e\u306e\u9593 xor \u30a8\u30c3\u30af\u30b9\u30fb\u30aa\u30a2 ^ \u306e\u7f6e\u304d\u63db\u3048 xor_eq \u30a8\u30c3\u30af\u30b9\u30aa\u30a2\u30a4\u30b3\u30fc\u30eb ^= \u306e\u7f6e\u304d\u63db\u3048","title":"\u4e88\u7d04\u8a9e\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765"},{"location":"articles/how-to-read-keywords/#_1","text":"C++ \u306e\u4e88\u7d04\u8a9e\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765\u3067\u3059\u3002 \u30ad\u30fc\u30ef\u30fc\u30c9 \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 alignas \u30a2\u30e9\u30a4\u30f3\u30a2\u30ba \uff5e\u3068\u3057\u3066\u914d\u7f6e\u3059\u308b alignof \u30a2\u30e9\u30a4\u30f3\u30aa\u30d6 \uff5e\u306e\u914d\u7f6e\u306e\u3055\u308c\u65b9 and \u30a2\u30f3\u30c9 && \u306e\u7f6e\u304d\u63db\u3048 and_eq \u30a2\u30f3\u30c9\u30fb\u30a4\u30b3\u30fc\u30eb &= \u306e\u7f6e\u304d\u63db\u3048 asm \u30a2\u30bb\u30f3\u30d6\u30ea/\u30a2\u30bb\u30e0 \u30a2\u30bb\u30f3\u30d6\u30ea (assembly) \u306e\u7565 auto \u30aa\u30fc\u30c8 \u81ea\u52d5 bitand \u30d3\u30c3\u30c8\u30a2\u30f3\u30c9 & \u306e\u7f6e\u304d\u63db\u3048 bitor \u30d3\u30c3\u30c8\u30aa\u30a2 | \u306e\u7f6e\u304d\u63db\u3048 bool \u30d6\u30fc\u30eb/\u30d6\u30fc\u30ea\u30a2\u30f3 \u30d6\u30fc\u30ea\u30a2\u30f3 (boolean) \u306e\u7565 break \u30d6\u30ec\u30fc\u30af \u4e2d\u65ad case \u30b1\u30fc\u30b9 \u5834\u5408 catch \u30ad\u30e3\u30c3\u30c1 \u6355\u307e\u3048\u308b char \u30c1\u30e3\u30fc/\u30ad\u30e3\u30e9/\u30ad\u30e3\u30e9\u30af\u30bf\u30fc \u6587\u5b57 (character) \u306e\u7565 char8_t \u30c1\u30e3\u30fc 8 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 8 \u30c6\u30a3\u30fc UTF-8 \u6587\u5b57 (character) \u306e\u7565 char16_t \u30c1\u30e3\u30fc 16 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 16 \u30c6\u30a3\u30fc UTF-16 \u6587\u5b57 (character) \u306e\u7565 char32_t \u30c1\u30e3\u30fc 32 \u30c6\u30a3\u30fc/\u30ad\u30e3\u30e9 32 \u30c6\u30a3\u30fc UTF-32 \u6587\u5b57 (character) \u306e\u7565 class \u30af\u30e9\u30b9 \u90e8\u985e compl \u30b3\u30f3\u30d7\u30eb/\u30b3\u30f3\u30d7\u30ea\u30e1\u30f3\u30c8 ~\u306e\u7f6e\u304d\u63db\u3048 concept \u30b3\u30f3\u30bb\u30d7\u30c8 \u30b3\u30f3\u30bb\u30d7\u30c8\u3002\u8981\u4ef6\u306e\u96c6\u5408 const \u30b3\u30f3\u30b9\u30c8 \u5b9a\u6570 (constant) \u306e\u7565 consteval \u30b3\u30f3\u30b9\u30c8\u30a4\u30fc\u30d0\u30eb/\u30b3\u30f3\u30b9\u30c8\u30a8\u30d0\u30eb \u5b9a\u6570 (constant) \u8a55\u4fa1 (evaluation) constexpr \u30b3\u30f3\u30b9\u30c8\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3/\u30b3\u30f3\u30b9\u30c8\u30a8\u30af\u30b9\u30d1\u30fc \u5b9a\u6570 (constant) \u5f0f (expression) const_cast \u30b3\u30f3\u30b9\u30c8\u30fb\u30ad\u30e3\u30b9\u30c8 \u5b9a\u6570\u6027\u306e\u5909\u63db continue \u30b3\u30f3\u30c6\u30a3\u30cb\u30e5\u30fc \u30b9\u30ad\u30c3\u30d7\u3059\u308b co_await \u30b3\u30fb\u30a2\u30a6\u30a7\u30a4\u30c8 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u5f85\u3064 co_return \u30b3\u30fb\u30ea\u30bf\u30fc\u30f3 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u8fd4\u308b co_yield \u30b3\u30fb\u30a4\u30fc\u30eb\u30c9 \u30b3\u30eb\u30fc\u30c1\u30f3 + \u8b72\u308b decltype \u30c7\u30af\u30eb\u30bf\u30a4\u30d7 \u5ba3\u8a00 (declaration)+ \u578b (type) default \u30c7\u30d5\u30a9\u30eb\u30c8 \u65e2\u5b9a delete \u30c7\u30ea\u30fc\u30c8 \u524a\u9664 do \u30c9\u30a5\u30fc \u3059\u308b double \u30c0\u30d6\u30eb \u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (double precision floating point number) dynamic_cast \u30c0\u30a4\u30ca\u30df\u30c3\u30af\u30fb\u30ad\u30e3\u30b9\u30c8 \u52d5\u7684\u306a\u578b\u306e\u5909\u63db else \u30a8\u30eb\u30b9 \u305d\u306e\u307b\u304b enum \u30a4\u30cb\u30e5\u30fc\u30e0/\u30a4\u30fc\u30ca\u30e0 \u5217\u6319\u5b50 (enumerator) \u306e\u7565 explicit \u30a8\u30af\u30b9\u30d7\u30ea\u30b7\u30c3\u30c8 \u660e\u793a\u7684\u306a export \u30a8\u30af\u30b9\u30dd\u30fc\u30c8 \u307b\u304b\u3078\u9001\u308a\u51fa\u3059 extern \u30a8\u30af\u30b9\u30bf\u30fc\u30f3 \u5916\u90e8\u3078 (external) \u306e\u7565 false \u30d5\u30a9\u30eb\u30b9 \u507d float \u30d5\u30ed\u30fc\u30c8 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 (floating point number) for \u30d5\u30a9\u30fc/\u30d5\u30a9\u30a2 \uff5e\u306b\u5bfe\u3057\u3066 friend \u30d5\u30ec\u30f3\u30c9 \u53cb\u3060\u3061 goto \u30b4\u30fc\u30c8\u30a5\u30fc \uff5e\u3078\u884c\u304f if \u30a4\u30d5 \u3082\u3057 import \u30a4\u30f3\u30dd\u30fc\u30c8 \uff5e\u306b\u6301\u3061\u8fbc\u3080 inline \u30a4\u30f3\u30e9\u30a4\u30f3 \u30a4\u30f3\u30e9\u30a4\u30f3 int \u30a4\u30f3\u30c8 \u6574\u6570 (integer) \u306e\u7565 long \u30ed\u30f3\u30b0 \u9577\u3044 module \u30e2\u30b8\u30e5\u30fc\u30eb \u90e8\u54c1\u306e\u96c6\u307e\u308a mutable \u30df\u30e5\u30fc\u30bf\u30d6\u30eb \u5909\u66f4\u53ef\u80fd\u306a namespace \u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9 \u540d\u524d\u7a7a\u9593 new \u30cb\u30e5\u30fc \u65b0\u3057\u3044 noexcept \u30ce\u30fc\u30a8\u30af\u30bb\u30d7\u30c8 \u7121\u4f8b\u5916 (no exception) \u306e\u7565 not \u30ce\u30c3\u30c8 ! \u306e\u7f6e\u304d\u63db\u3048 not_eq \u30ce\u30c3\u30c8\u30fb\u30a4\u30b3\u30fc\u30eb != \u306e\u7f6e\u304d\u63db\u3048 nullptr \u30cc\u30eb\u30dd\u30a4\u30f3\u30bf/\u30cc\u30eb\u30d4\u30fc\u30c6\u30a3\u30fc\u30a2\u30fc\u30eb null \u3092\u8868\u3059\u30dd\u30a4\u30f3\u30bf operator \u30aa\u30da\u30ec\u30fc\u30bf\u30fc \u6f14\u7b97\u5b50 or \u30aa\u30a2 || \u306e\u7f6e\u304d\u63db\u3048 or_eq \u30aa\u30a2\u30fb\u30a4\u30b3\u30fc\u30eb ||= \u306e\u7f6e\u304d\u63db\u3048 private \u30d7\u30e9\u30a4\u30d9\u30fc\u30c8 \u79c1\u6709\u306e protected \u30d7\u30ed\u30c6\u30af\u30c6\u30c3\u30c9 \u4fdd\u8b77\u3055\u308c\u305f public \u30d1\u30d6\u30ea\u30c3\u30af \u516c\u958b\u3055\u308c\u305f register \u30ec\u30b8\u30b9\u30bf (CPU \u306e) \u30ec\u30b8\u30b9\u30bf reinterpret_cast \u30ea\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30c3\u30c8\u30fb\u30ad\u30e3\u30b9\u30c8 \u518d\u89e3\u91c8\u3059\u308b\u5909\u63db requires \u30ea\u30af\u30ef\u30a4\u30a2\u30ba \u8981\u6c42\u3059\u308b return \u30ea\u30bf\u30fc\u30f3 \u8fd4\u3059 short \u30b7\u30e7\u30fc\u30c8 \u77ed\u3044 signed \u30b5\u30a4\u30f3\u30c9 \u7b26\u53f7\u4ed8\u304d sizeof \u30b5\u30a4\u30ba\u30aa\u30d6 \uff5e\u306e\u30b5\u30a4\u30ba static \u30b9\u30bf\u30c6\u30a3\u30c3\u30af \u9759\u7684\u306a static_assert \u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30fb\u30a2\u30b5\u30fc\u30c8 \u9759\u7684 (static) \u306a\u8868\u660e (assertion) static_cast \u30b9\u30bf\u30c6\u30a3\u30c3\u30af\u30fb\u30ad\u30e3\u30b9\u30c8 \u9759\u7684\u306b\u5909\u63db\u3059\u308b struct \u30b9\u30c8\u30e9\u30af\u30c8 \u69cb\u9020 switch \u30b9\u30a4\u30c3\u30c1 \u5206\u5c90 template \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u96db\u5f62 this \u30c7\u30a3\u30b9 \u3053\u306e thread_local \u30b9\u30ec\u30c3\u30c9\u30fb\u30ed\u30fc\u30ab\u30eb \u30b9\u30ec\u30c3\u30c9 + \u5c40\u6240\u7684\u306a throw \u30b9\u30ed\u30fc \u6295\u3052\u308b true \u30c8\u30a5\u30eb\u30fc \u771f try \u30c8\u30e9\u30a4 \u8a66\u884c\u3059\u308b typedef \u30bf\u30a4\u30d7\u30c7\u30d5 \u578b (type) \u5b9a\u7fa9 (definition) \u306e\u7565 typeid \u30bf\u30a4\u30d7\u30a2\u30a4\u30c7\u30a3\u30fc \u578b (type) \u8b58\u5225 (identification) typename \u30bf\u30a4\u30d7\u30cd\u30fc\u30e0 \u578b (type) \u306e\u540d\u524d (name) union \u30e6\u30cb\u30aa\u30f3 \u9023\u5408/\u5171\u7528 unsigned \u30a2\u30f3\u30b5\u30a4\u30f3\u30c9 \u7b26\u53f7\u306a\u3057 using \u30e6\u30fc\u30b8\u30f3\u30b0 \u4f7f\u3046 virtual \u30d0\u30fc\u30c1\u30e3\u30eb \u4eee\u60f3 void \u30f4\u30a9\u30a4\u30c9 \u7a7a\u306e volatile \u30dc\u30e9\u30bf\u30a4\u30eb \u63ee\u767a\u3059\u308b wchar_t \u30c0\u30d6\u30eb\u30c1\u30e3\u30fc\u30c6\u30a3\u30fc/\u30c0\u30d6\u30eb\u30ad\u30e3\u30e9\u30c6\u30a3\u30fc \u30ef\u30a4\u30c9\u306a char while \u30ef\u30a4\u30eb/\u30db\u30ef\u30a4\u30eb \uff5e\u306e\u9593 xor \u30a8\u30c3\u30af\u30b9\u30fb\u30aa\u30a2 ^ \u306e\u7f6e\u304d\u63db\u3048 xor_eq \u30a8\u30c3\u30af\u30b9\u30aa\u30a2\u30a4\u30b3\u30fc\u30eb ^= \u306e\u7f6e\u304d\u63db\u3048","title":"\u4e88\u7d04\u8a9e\u306e\u8aad\u307f\u65b9\u3068\u540d\u524d\u306e\u7531\u6765"},{"location":"articles/how-to-read-libraries/","text":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765 C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u30e9\u30a4\u30d6\u30e9\u30ea\u540d \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 algorithm \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 any \u30a8\u30cb\u30fc \u306a\u3093\u3067\u3082 array \u30a2\u30ec\u30a4 \u914d\u5217 atomic \u30a2\u30c8\u30df\u30c3\u30af \u4e0d\u53ef\u5206\u6027 bit \u30d3\u30c3\u30c8 \u30d3\u30c3\u30c8\u6f14\u7b97 bitset \u30d3\u30c3\u30c8\u30bb\u30c3\u30c8 \u30d3\u30c3\u30c8\u96c6\u5408 charconv \u30c1\u30e3\u30fc\u30b3\u30f3\u30d6/\u30ad\u30e3\u30e9\u30b3\u30f3\u30d6 \u6587\u5b57\u306e\u5909\u63db (character conversion) \u306e\u7565 chrono \u30af\u30ed\u30ce \u6642\u9593 (\u30ae\u30ea\u30b7\u30e3\u8a9e\u306e Chronus \u306b\u7531\u6765) codecvt \u30b3\u30fc\u30c9\u30b3\u30f3\u30d0\u30fc\u30c8/\u30b3\u30fc\u30c9\u30b7\u30fc\u30d6\u30a4\u30c6\u30a3\u30fc \u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db compare \u30b3\u30f3\u30da\u30a2 \u6bd4\u8f03 complex \u30b3\u30f3\u30d7\u30ec\u30c3\u30af\u30b9 \u8907\u7d20\u6570 concepts \u30b3\u30f3\u30bb\u30d7\u30c8 \u30b3\u30f3\u30bb\u30d7\u30c8 condition_variable \u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u30fb\u30f4\u30a1\u30ea\u30a2\u30d6\u30eb \u6761\u4ef6\u5909\u6570 contract \u30b3\u30f3\u30c8\u30e9\u30af\u30c8 \u5951\u7d04 coroutine \u30b3\u30eb\u30fc\u30c1\u30f3 \u30b3\u30eb\u30fc\u30c1\u30f3 deque \u30c7\u30c3\u30af/\u30c7\u30ad\u30e5\u30fc \u4e21\u7aef\u30ad\u30e5\u30fc (double ended queue) \u306e\u7565 exception \u30a8\u30af\u30bb\u30d7\u30b7\u30e7\u30f3 \u4f8b\u5916 execution \u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30b7\u30e7\u30f3 \u5b9f\u884c filesystem \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0 \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0 forward_list \u30d5\u30a9\u30ef\u30fc\u30c9\u30fb\u30ea\u30b9\u30c8 \u5358\u65b9\u5411\u30ea\u30b9\u30c8 fstream \u30a8\u30d5\u30b9\u30c8\u30ea\u30fc\u30e0 \u30d5\u30a1\u30a4\u30eb\u7528\u30b9\u30c8\u30ea\u30fc\u30e0 functional \u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb \u95a2\u6570\u306e future \u30d5\u30e5\u30fc\u30c1\u30e3\u30fc \u672a\u6765 initializer_list \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u30fc\u30fb\u30ea\u30b9\u30c8 \u521d\u671f\u5316\u30ea\u30b9\u30c8 iomanip \u30a2\u30a4\u30aa\u30fc\u30de\u30cb\u30d4\u30e5 \u5165\u51fa\u529b\u306e\u64cd\u4f5c (manipulator) ios \u30a2\u30a4\u30aa\u30fc\u30a8\u30b9 \u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 iosfwd \u30a2\u30a4\u30aa\u30fc\u30a8\u30b9\u30d5\u30a9\u30ef\u30fc\u30c9 \u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u524d\u65b9\u5ba3\u8a00 iostream \u30a2\u30a4\u30aa\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0 \u6a19\u6e96\u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 istream \u30a2\u30a4\u30b9\u30c8\u30ea\u30fc\u30e0 \u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 iterator \u30a4\u30c6\u30ec\u30fc\u30bf\u30fc \u53cd\u5fa9\u5b50 limits \u30ea\u30df\u30c3\u30c4 \u4e0a\u9650\u4e0b\u9650 list \u30ea\u30b9\u30c8 \u30ea\u30b9\u30c8 locale \u30ed\u30b1\u30fc\u30eb \u5730\u57df map \u30de\u30c3\u30d7 \u30de\u30c3\u30d7 memory \u30e1\u30e2\u30ea\u30fc \u30e1\u30e2\u30ea\u30fc memory_resource \u30e1\u30e2\u30ea\u30fc\u30fb\u30ea\u30bd\u30fc\u30b9 \u30e1\u30e2\u30ea\u30fc\u30ea\u30bd\u30fc\u30b9 mutex \u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9 \u6392\u4ed6\u5236\u5fa1 (mutual exclusion) \u306e\u7565 new \u30cb\u30e5\u30fc \u65b0\u3057\u3044 numeric \u30cb\u30e5\u30fc\u30e1\u30ea\u30c3\u30af \u6570\u5024\u7684\u306a optional \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb \u9078\u629e\u3067\u304d\u308b ostream \u30aa\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0 \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 queue \u30ad\u30e5\u30fc \u30ad\u30e5\u30fc random \u30e9\u30f3\u30c0\u30e0 \u4e71\u6570 ranges \u30ec\u30f3\u30b8 \u7bc4\u56f2 ratio \u30ec\u30b7\u30aa \u6709\u7406\u6570 regex \u30ec\u30b8\u30a7\u30c3\u30af\u30b9 \u6b63\u898f\u8868\u73fe (regular expression) \u306e\u7565 scoped_allocator \u30b9\u30b3\u30fc\u30d7\u30c9\u30fb\u30a2\u30ed\u30b1\u30fc\u30bf\u30fc \u7bc4\u56f2\u3092\u6c7a\u3081\u305f\u30a2\u30ed\u30b1\u30fc\u30bf set \u30bb\u30c3\u30c8 \u96c6\u5408 shared_mutex \u30b7\u30a7\u30a2\u30fc\u30c9\u30fb\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9 \u5171\u6709\u7684\u306a mutex span \u30b9\u30d1\u30f3 \u7bc4\u56f2 sstream \u30a8\u30b9\u30b9\u30c8\u30ea\u30fc\u30e0 \u6587\u5b57\u5217\u306e\u30b9\u30c8\u30ea\u30fc\u30e0 stack \u30b9\u30bf\u30c3\u30af \u30b9\u30bf\u30c3\u30af stdexcept \u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a8\u30af\u30bb\u30d7\u30c8/\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a2\u30fc\u30b0\u30a8\u30af\u30bb\u30d7\u30c8 \u6a19\u6e96\u7684\u306a\u4f8b\u5916 streambuf \u30b9\u30c8\u30ea\u30fc\u30e0\u30d0\u30d5/\u30b9\u30c8\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30fc \u30b9\u30c8\u30ea\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30fc string \u30b9\u30c8\u30ea\u30f3\u30b0 \u6587\u5b57\u5217 string_view \u30b9\u30c8\u30ea\u30f3\u30b0\u30d3\u30e5\u30fc \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc strstream \u30a8\u30b9\u30c6\u30a3\u30fc\u30a2\u30fc\u30eb\u30b9\u30c8\u30ea\u30fc\u30e0/\u30b9\u30c8\u30e9\u30b9\u30c8\u30ea\u30fc\u30e0 \u6587\u5b57\u5217\u306e\u30b9\u30c8\u30ea\u30fc\u30e0 syncstream \u30b7\u30f3\u30af\u30b9\u30c8\u30ea\u30fc\u30e0 \u540c\u671f\u7684\u306a\u30b9\u30c8\u30ea\u30fc\u30e0 system_error \u30b7\u30b9\u30c6\u30e0\u30fb\u30a8\u30e9\u30fc \u30b7\u30b9\u30c6\u30e0\u30a8\u30e9\u30fc thread \u30b9\u30ec\u30c3\u30c9 \u30b9\u30ec\u30c3\u30c9 tuple \u30bf\u30d7\u30eb \u5024\u306e\u7d44 typeindex \u30bf\u30a4\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 \u30bf\u30a4\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 typeinfo \u30bf\u30a4\u30d7\u30a4\u30f3\u30d5\u30a9 \u578b\u306e\u60c5\u5831 type_traits \u30bf\u30a4\u30d7\u30fb\u30c8\u30ec\u30a4\u30c4 \u578b\u306e\u7279\u5fb4 unordered_map \u30a2\u30f3\u30aa\u30fc\u30c0\u30fc\u30c9\u30fb\u30de\u30c3\u30d7 \u975e\u9806\u5e8f\u306a map unordered_set \u30a2\u30f3\u30aa\u30fc\u30c0\u30fc\u30c9\u30fb\u30bb\u30c3\u30c8 \u975e\u9806\u5e8f\u306a set utility \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc \u4fbf\u5229\u6a5f\u80fd valarray \u30f4\u30a1\u30eb\u30a2\u30ec\u30a4 \u5024\u306e\u914d\u5217 variant \u30f4\u30a1\u30ea\u30a2\u30f3\u30c8 \u76f8\u9055\u3057\u305f vector \u30d9\u30af\u30bf\u30fc \u30d9\u30af\u30c8\u30eb version \u30d0\u30fc\u30b8\u30e7\u30f3 \u30d0\u30fc\u30b8\u30e7\u30f3 C \u8a00\u8a9e\u7531\u6765\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u30e9\u30a4\u30d6\u30e9\u30ea\u540d \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 cassert \u30b7\u30fc\u30a2\u30b5\u30fc\u30c8 \u8868\u660e cctype \u30b7\u30fc\u30b7\u30fc\u30bf\u30a4\u30d7 \u6587\u5b57\u306e\u5206\u985e cerrno \u30b7\u30fc\u30a8\u30e9\u30fc\u30ca\u30f3\u30d0\u30fc \u30a8\u30e9\u30fc\u30ca\u30f3\u30d0\u30fc (error number) \u306e\u7565 cfenv \u30b7\u30fc\u30a8\u30d5\u30a8\u30f3\u30d6 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u74b0\u5883\u8a2d\u5b9a (float environment) \u306e\u7565 cfloat \u30b7\u30fc\u30d5\u30ed\u30fc\u30c8 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 cinttypes \u30b7\u30fc\u30a4\u30f3\u30c8\u30bf\u30a4\u30d7\u30b9 \u6574\u6570\u578b climits \u30b7\u30fc\u30ea\u30df\u30c3\u30c4 \u4e0a\u9650\u4e0b\u9650 clocale \u30b7\u30fc\u30ed\u30b1\u30fc\u30eb \u5730\u57df cmath \u30b7\u30fc\u30de\u30b9 \u6570\u5b66\u95a2\u6570 csetjmp \u30b7\u30fc\u30bb\u30c3\u30c8\u30b8\u30e3\u30f3\u30d7 \u30bb\u30c3\u30c8\u30b8\u30e3\u30f3\u30d7\u547d\u4ee4 csignal \u30b7\u30fc\u30b7\u30b0\u30ca\u30eb \u30b7\u30b0\u30ca\u30eb cstdarg \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a2\u30fc\u30b0/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a2\u30fc\u30b0 \u5f15\u6570 cstddef \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30c7\u30d5/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30c7\u30d5 \u57fa\u672c\u7684\u306a\u5b9a\u7fa9 cstdint \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a4\u30f3\u30c8/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a4\u30f3\u30c8 \u57fa\u672c\u7684\u306a\u6574\u6570 cstdio \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a2\u30a4\u30aa\u30fc/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a2\u30a4\u30aa\u30fc \u57fa\u672c\u7684\u306a\u5165\u51fa\u529b cstdlib \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30ea\u30d6/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30ea\u30d6 \u57fa\u672c\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea cstring \u30b7\u30fc\u30b9\u30c8\u30ea\u30f3\u30b0 \u6587\u5b57\u5217 ctime \u30b7\u30fc\u30bf\u30a4\u30e0 \u6642\u9593 cuchar \u30b7\u30fc\u30e6\u30fc\u30c1\u30e3\u30fc Unicode \u6587\u5b57 cwchar \u30b7\u30fc\u30c0\u30d6\u30eb\u30c1\u30e3\u30fc \u30ef\u30a4\u30c9\u6587\u5b57 cwctype \u30b7\u30fc\u30c0\u30d6\u30eb\u30bf\u30a4\u30d7 \u30ef\u30a4\u30c9\u6587\u5b57\u306e\u5206\u985e","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765"},{"location":"articles/how-to-read-libraries/#_1","text":"","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u3068\u540d\u524d\u306e\u7531\u6765"},{"location":"articles/how-to-read-libraries/#c","text":"\u30e9\u30a4\u30d6\u30e9\u30ea\u540d \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 algorithm \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 any \u30a8\u30cb\u30fc \u306a\u3093\u3067\u3082 array \u30a2\u30ec\u30a4 \u914d\u5217 atomic \u30a2\u30c8\u30df\u30c3\u30af \u4e0d\u53ef\u5206\u6027 bit \u30d3\u30c3\u30c8 \u30d3\u30c3\u30c8\u6f14\u7b97 bitset \u30d3\u30c3\u30c8\u30bb\u30c3\u30c8 \u30d3\u30c3\u30c8\u96c6\u5408 charconv \u30c1\u30e3\u30fc\u30b3\u30f3\u30d6/\u30ad\u30e3\u30e9\u30b3\u30f3\u30d6 \u6587\u5b57\u306e\u5909\u63db (character conversion) \u306e\u7565 chrono \u30af\u30ed\u30ce \u6642\u9593 (\u30ae\u30ea\u30b7\u30e3\u8a9e\u306e Chronus \u306b\u7531\u6765) codecvt \u30b3\u30fc\u30c9\u30b3\u30f3\u30d0\u30fc\u30c8/\u30b3\u30fc\u30c9\u30b7\u30fc\u30d6\u30a4\u30c6\u30a3\u30fc \u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db compare \u30b3\u30f3\u30da\u30a2 \u6bd4\u8f03 complex \u30b3\u30f3\u30d7\u30ec\u30c3\u30af\u30b9 \u8907\u7d20\u6570 concepts \u30b3\u30f3\u30bb\u30d7\u30c8 \u30b3\u30f3\u30bb\u30d7\u30c8 condition_variable \u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3\u30fb\u30f4\u30a1\u30ea\u30a2\u30d6\u30eb \u6761\u4ef6\u5909\u6570 contract \u30b3\u30f3\u30c8\u30e9\u30af\u30c8 \u5951\u7d04 coroutine \u30b3\u30eb\u30fc\u30c1\u30f3 \u30b3\u30eb\u30fc\u30c1\u30f3 deque \u30c7\u30c3\u30af/\u30c7\u30ad\u30e5\u30fc \u4e21\u7aef\u30ad\u30e5\u30fc (double ended queue) \u306e\u7565 exception \u30a8\u30af\u30bb\u30d7\u30b7\u30e7\u30f3 \u4f8b\u5916 execution \u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30b7\u30e7\u30f3 \u5b9f\u884c filesystem \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0 \u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0 forward_list \u30d5\u30a9\u30ef\u30fc\u30c9\u30fb\u30ea\u30b9\u30c8 \u5358\u65b9\u5411\u30ea\u30b9\u30c8 fstream \u30a8\u30d5\u30b9\u30c8\u30ea\u30fc\u30e0 \u30d5\u30a1\u30a4\u30eb\u7528\u30b9\u30c8\u30ea\u30fc\u30e0 functional \u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb \u95a2\u6570\u306e future \u30d5\u30e5\u30fc\u30c1\u30e3\u30fc \u672a\u6765 initializer_list \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u30fc\u30fb\u30ea\u30b9\u30c8 \u521d\u671f\u5316\u30ea\u30b9\u30c8 iomanip \u30a2\u30a4\u30aa\u30fc\u30de\u30cb\u30d4\u30e5 \u5165\u51fa\u529b\u306e\u64cd\u4f5c (manipulator) ios \u30a2\u30a4\u30aa\u30fc\u30a8\u30b9 \u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 iosfwd \u30a2\u30a4\u30aa\u30fc\u30a8\u30b9\u30d5\u30a9\u30ef\u30fc\u30c9 \u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u524d\u65b9\u5ba3\u8a00 iostream \u30a2\u30a4\u30aa\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0 \u6a19\u6e96\u5165\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 istream \u30a2\u30a4\u30b9\u30c8\u30ea\u30fc\u30e0 \u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 iterator \u30a4\u30c6\u30ec\u30fc\u30bf\u30fc \u53cd\u5fa9\u5b50 limits \u30ea\u30df\u30c3\u30c4 \u4e0a\u9650\u4e0b\u9650 list \u30ea\u30b9\u30c8 \u30ea\u30b9\u30c8 locale \u30ed\u30b1\u30fc\u30eb \u5730\u57df map \u30de\u30c3\u30d7 \u30de\u30c3\u30d7 memory \u30e1\u30e2\u30ea\u30fc \u30e1\u30e2\u30ea\u30fc memory_resource \u30e1\u30e2\u30ea\u30fc\u30fb\u30ea\u30bd\u30fc\u30b9 \u30e1\u30e2\u30ea\u30fc\u30ea\u30bd\u30fc\u30b9 mutex \u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9 \u6392\u4ed6\u5236\u5fa1 (mutual exclusion) \u306e\u7565 new \u30cb\u30e5\u30fc \u65b0\u3057\u3044 numeric \u30cb\u30e5\u30fc\u30e1\u30ea\u30c3\u30af \u6570\u5024\u7684\u306a optional \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb \u9078\u629e\u3067\u304d\u308b ostream \u30aa\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0 \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0 queue \u30ad\u30e5\u30fc \u30ad\u30e5\u30fc random \u30e9\u30f3\u30c0\u30e0 \u4e71\u6570 ranges \u30ec\u30f3\u30b8 \u7bc4\u56f2 ratio \u30ec\u30b7\u30aa \u6709\u7406\u6570 regex \u30ec\u30b8\u30a7\u30c3\u30af\u30b9 \u6b63\u898f\u8868\u73fe (regular expression) \u306e\u7565 scoped_allocator \u30b9\u30b3\u30fc\u30d7\u30c9\u30fb\u30a2\u30ed\u30b1\u30fc\u30bf\u30fc \u7bc4\u56f2\u3092\u6c7a\u3081\u305f\u30a2\u30ed\u30b1\u30fc\u30bf set \u30bb\u30c3\u30c8 \u96c6\u5408 shared_mutex \u30b7\u30a7\u30a2\u30fc\u30c9\u30fb\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9 \u5171\u6709\u7684\u306a mutex span \u30b9\u30d1\u30f3 \u7bc4\u56f2 sstream \u30a8\u30b9\u30b9\u30c8\u30ea\u30fc\u30e0 \u6587\u5b57\u5217\u306e\u30b9\u30c8\u30ea\u30fc\u30e0 stack \u30b9\u30bf\u30c3\u30af \u30b9\u30bf\u30c3\u30af stdexcept \u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a8\u30af\u30bb\u30d7\u30c8/\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a2\u30fc\u30b0\u30a8\u30af\u30bb\u30d7\u30c8 \u6a19\u6e96\u7684\u306a\u4f8b\u5916 streambuf \u30b9\u30c8\u30ea\u30fc\u30e0\u30d0\u30d5/\u30b9\u30c8\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30fc \u30b9\u30c8\u30ea\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30fc string \u30b9\u30c8\u30ea\u30f3\u30b0 \u6587\u5b57\u5217 string_view \u30b9\u30c8\u30ea\u30f3\u30b0\u30d3\u30e5\u30fc \u6587\u5b57\u5217\u306e\u30d3\u30e5\u30fc strstream \u30a8\u30b9\u30c6\u30a3\u30fc\u30a2\u30fc\u30eb\u30b9\u30c8\u30ea\u30fc\u30e0/\u30b9\u30c8\u30e9\u30b9\u30c8\u30ea\u30fc\u30e0 \u6587\u5b57\u5217\u306e\u30b9\u30c8\u30ea\u30fc\u30e0 syncstream \u30b7\u30f3\u30af\u30b9\u30c8\u30ea\u30fc\u30e0 \u540c\u671f\u7684\u306a\u30b9\u30c8\u30ea\u30fc\u30e0 system_error \u30b7\u30b9\u30c6\u30e0\u30fb\u30a8\u30e9\u30fc \u30b7\u30b9\u30c6\u30e0\u30a8\u30e9\u30fc thread \u30b9\u30ec\u30c3\u30c9 \u30b9\u30ec\u30c3\u30c9 tuple \u30bf\u30d7\u30eb \u5024\u306e\u7d44 typeindex \u30bf\u30a4\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 \u30bf\u30a4\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 typeinfo \u30bf\u30a4\u30d7\u30a4\u30f3\u30d5\u30a9 \u578b\u306e\u60c5\u5831 type_traits \u30bf\u30a4\u30d7\u30fb\u30c8\u30ec\u30a4\u30c4 \u578b\u306e\u7279\u5fb4 unordered_map \u30a2\u30f3\u30aa\u30fc\u30c0\u30fc\u30c9\u30fb\u30de\u30c3\u30d7 \u975e\u9806\u5e8f\u306a map unordered_set \u30a2\u30f3\u30aa\u30fc\u30c0\u30fc\u30c9\u30fb\u30bb\u30c3\u30c8 \u975e\u9806\u5e8f\u306a set utility \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc \u4fbf\u5229\u6a5f\u80fd valarray \u30f4\u30a1\u30eb\u30a2\u30ec\u30a4 \u5024\u306e\u914d\u5217 variant \u30f4\u30a1\u30ea\u30a2\u30f3\u30c8 \u76f8\u9055\u3057\u305f vector \u30d9\u30af\u30bf\u30fc \u30d9\u30af\u30c8\u30eb version \u30d0\u30fc\u30b8\u30e7\u30f3 \u30d0\u30fc\u30b8\u30e7\u30f3","title":"C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"articles/how-to-read-libraries/#c_1","text":"\u30e9\u30a4\u30d6\u30e9\u30ea\u540d \u8aad\u307f \u540d\u524d\u306e\u7531\u6765 cassert \u30b7\u30fc\u30a2\u30b5\u30fc\u30c8 \u8868\u660e cctype \u30b7\u30fc\u30b7\u30fc\u30bf\u30a4\u30d7 \u6587\u5b57\u306e\u5206\u985e cerrno \u30b7\u30fc\u30a8\u30e9\u30fc\u30ca\u30f3\u30d0\u30fc \u30a8\u30e9\u30fc\u30ca\u30f3\u30d0\u30fc (error number) \u306e\u7565 cfenv \u30b7\u30fc\u30a8\u30d5\u30a8\u30f3\u30d6 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u74b0\u5883\u8a2d\u5b9a (float environment) \u306e\u7565 cfloat \u30b7\u30fc\u30d5\u30ed\u30fc\u30c8 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 cinttypes \u30b7\u30fc\u30a4\u30f3\u30c8\u30bf\u30a4\u30d7\u30b9 \u6574\u6570\u578b climits \u30b7\u30fc\u30ea\u30df\u30c3\u30c4 \u4e0a\u9650\u4e0b\u9650 clocale \u30b7\u30fc\u30ed\u30b1\u30fc\u30eb \u5730\u57df cmath \u30b7\u30fc\u30de\u30b9 \u6570\u5b66\u95a2\u6570 csetjmp \u30b7\u30fc\u30bb\u30c3\u30c8\u30b8\u30e3\u30f3\u30d7 \u30bb\u30c3\u30c8\u30b8\u30e3\u30f3\u30d7\u547d\u4ee4 csignal \u30b7\u30fc\u30b7\u30b0\u30ca\u30eb \u30b7\u30b0\u30ca\u30eb cstdarg \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a2\u30fc\u30b0/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a2\u30fc\u30b0 \u5f15\u6570 cstddef \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30c7\u30d5/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30c7\u30d5 \u57fa\u672c\u7684\u306a\u5b9a\u7fa9 cstdint \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a4\u30f3\u30c8/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a4\u30f3\u30c8 \u57fa\u672c\u7684\u306a\u6574\u6570 cstdio \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30a2\u30a4\u30aa\u30fc/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30a2\u30a4\u30aa\u30fc \u57fa\u672c\u7684\u306a\u5165\u51fa\u529b cstdlib \u30b7\u30fc\u30a8\u30b9\u30c6\u30a3\u30fc\u30c7\u30a3\u30fc\u30ea\u30d6/\u30b7\u30fc\u30b9\u30bf\u30f3\u30c0\u30fc\u30c9\u30ea\u30d6 \u57fa\u672c\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea cstring \u30b7\u30fc\u30b9\u30c8\u30ea\u30f3\u30b0 \u6587\u5b57\u5217 ctime \u30b7\u30fc\u30bf\u30a4\u30e0 \u6642\u9593 cuchar \u30b7\u30fc\u30e6\u30fc\u30c1\u30e3\u30fc Unicode \u6587\u5b57 cwchar \u30b7\u30fc\u30c0\u30d6\u30eb\u30c1\u30e3\u30fc \u30ef\u30a4\u30c9\u6587\u5b57 cwctype \u30b7\u30fc\u30c0\u30d6\u30eb\u30bf\u30a4\u30d7 \u30ef\u30a4\u30c9\u6587\u5b57\u306e\u5206\u985e","title":"C \u8a00\u8a9e\u7531\u6765\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"articles/it-compiles/","text":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b C++ \u306e\u898f\u683c\u4e0a\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3001\u4e0d\u601d\u8b70\u306a\u898b\u305f\u76ee\u306e\u30b3\u30fc\u30c9\u306e\u7d39\u4ecb\u3067\u3059\u3002 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b URL int main () { https : //cppmap.github.io return 0 ; } main \u95a2\u6570 try \u30d6\u30ed\u30c3\u30af int main () try { } catch (...) { return - 1 ; } \u6dfb\u5b57\u5f0f\u306e\u5165\u308c\u66ff\u3048 #include <iostream> int main () { int a [ 3 ] = { 10 , 20 , 30 }; std :: cout << 2 [ a ] << '\\n' ; for ( int i = 0 ; i < 3 ; ++ i ) { std :: cout << i [ a ] << '\\n' ; } } \u62ec\u5f27\u306e\u9023\u7d9a int main () { {}; []{}; [](){}; [](){}(); } \u7a7a\u306e\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6 # #include <iostream> # int main () { # } --> \u6f14\u7b97\u5b50 #include <iostream> int main () { int i = 10 ; while ( i --> 0 ) { std :: cout << i << '\\n' ; } } \u540c\u3058\u95a2\u6570 #include <iostream> using ll = long long ; void f ( unsigned ll ) { std :: cout << \"A \\n \" ; } void f ( unsigned long long ) { std :: cout << \"B \\n \" ; } int main () { f ( 123ull ); } \u623b\u308a\u5024\u304c\u7121\u3044\u306e\u306b [[nodiscard]] [[ nodiscard ]] void Func () { } int main () { Func (); // \u8b66\u544a\u306f\u51fa\u306a\u3044 } \u9577\u3044\u95a2\u6570 struct C { inline virtual volatile constexpr const unsigned long long int f () const noexcept final = delete ; }; int main () { }","title":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b"},{"location":"articles/it-compiles/#_1","text":"C++ \u306e\u898f\u683c\u4e0a\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3001\u4e0d\u601d\u8b70\u306a\u898b\u305f\u76ee\u306e\u30b3\u30fc\u30c9\u306e\u7d39\u4ecb\u3067\u3059\u3002","title":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b"},{"location":"articles/it-compiles/#url","text":"int main () { https : //cppmap.github.io return 0 ; }","title":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b URL"},{"location":"articles/it-compiles/#main-try","text":"int main () try { } catch (...) { return - 1 ; }","title":"main \u95a2\u6570 try \u30d6\u30ed\u30c3\u30af"},{"location":"articles/it-compiles/#_2","text":"#include <iostream> int main () { int a [ 3 ] = { 10 , 20 , 30 }; std :: cout << 2 [ a ] << '\\n' ; for ( int i = 0 ; i < 3 ; ++ i ) { std :: cout << i [ a ] << '\\n' ; } }","title":"\u6dfb\u5b57\u5f0f\u306e\u5165\u308c\u66ff\u3048"},{"location":"articles/it-compiles/#_3","text":"int main () { {}; []{}; [](){}; [](){}(); }","title":"\u62ec\u5f27\u306e\u9023\u7d9a"},{"location":"articles/it-compiles/#_4","text":"# #include <iostream> # int main () { # }","title":"\u7a7a\u306e\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6"},{"location":"articles/it-compiles/#-","text":"#include <iostream> int main () { int i = 10 ; while ( i --> 0 ) { std :: cout << i << '\\n' ; } }","title":"--&gt; \u6f14\u7b97\u5b50"},{"location":"articles/it-compiles/#_5","text":"#include <iostream> using ll = long long ; void f ( unsigned ll ) { std :: cout << \"A \\n \" ; } void f ( unsigned long long ) { std :: cout << \"B \\n \" ; } int main () { f ( 123ull ); }","title":"\u540c\u3058\u95a2\u6570"},{"location":"articles/it-compiles/#nodiscard","text":"[[ nodiscard ]] void Func () { } int main () { Func (); // \u8b66\u544a\u306f\u51fa\u306a\u3044 }","title":"\u623b\u308a\u5024\u304c\u7121\u3044\u306e\u306b [[nodiscard]]"},{"location":"articles/it-compiles/#_6","text":"struct C { inline virtual volatile constexpr const unsigned long long int f () const noexcept final = delete ; }; int main () { }","title":"\u9577\u3044\u95a2\u6570"},{"location":"articles/it-does-not-compile/","text":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044 \u6b63\u3057\u3044\u3088\u3046\u306b\u898b\u3048\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u30b3\u30fc\u30c9\u306e\u7d39\u4ecb\u3067\u3059\u3002 \u6dfb\u5b57\u3068\u30e9\u30e0\u30c0\u5f0f #include <iostream> int main () { int a [ 3 ] = { 10 , 20 , 30 }; std :: cout << a [[](){ return 1 ; }()] << '\\n' ; } \u4f7f\u3048\u306a\u3044\u5909\u6570 #include <memory> int main () { std :: shared_ptr < int > p (); p . reset (); } \u30dd\u30a4\u30f3\u30bf\u578b\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570 void Func ( int *= nullptr ) { } int main () { Func (); }","title":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044"},{"location":"articles/it-does-not-compile/#_1","text":"\u6b63\u3057\u3044\u3088\u3046\u306b\u898b\u3048\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u30b3\u30fc\u30c9\u306e\u7d39\u4ecb\u3067\u3059\u3002","title":"\u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044"},{"location":"articles/it-does-not-compile/#_2","text":"#include <iostream> int main () { int a [ 3 ] = { 10 , 20 , 30 }; std :: cout << a [[](){ return 1 ; }()] << '\\n' ; }","title":"\u6dfb\u5b57\u3068\u30e9\u30e0\u30c0\u5f0f"},{"location":"articles/it-does-not-compile/#_3","text":"#include <memory> int main () { std :: shared_ptr < int > p (); p . reset (); }","title":"\u4f7f\u3048\u306a\u3044\u5909\u6570"},{"location":"articles/it-does-not-compile/#_4","text":"void Func ( int *= nullptr ) { } int main () { Func (); }","title":"\u30dd\u30a4\u30f3\u30bf\u578b\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570"},{"location":"contribution/contributors/","text":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf C++ \u306e\u6b69\u304d\u65b9 Web \u30b5\u30a4\u30c8\u306e\u6539\u5584\u3001\u60c5\u5831\u62e1\u5145\u306b\u5354\u529b\u3057\u3066\u304f\u308c\u305f\u65b9\u3005\u3067\u3059\uff08ABC \u9806\uff09\u3002 @kariya_mitsuru \u3055\u3093 C++17 \u6d0b\u66f8 \u60c5\u5831\u63d0\u4f9b \u51e6\u7406\u7cfb\u306e\u5bfe\u5fdc\u72b6\u6cc1 \u60c5\u5831\u63d0\u4f9b @Fuyutsubaki \u3055\u3093 \u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044 \u30cd\u30bf\u63d0\u4f9b @matken11235 \u3055\u3093 C++ \u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3 \u60c5\u5831\u63d0\u4f9b @NxNeu_J \u3055\u3093 C++17 \u6d0b\u66f8 \u60c5\u5831\u63d0\u4f9b @onihusube9 \u3055\u3093 \u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599 \u60c5\u5831\u63d0\u4f9b Q & A \u30b5\u30a4\u30c8 \u60c5\u5831\u63d0\u4f9b C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848 \u8a18\u4e8b\u63d0\u4f9b \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf \u30e9\u30a4\u30d6\u30e9\u30ea \u60c5\u5831\u63d0\u4f9b","title":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf"},{"location":"contribution/contributors/#_1","text":"C++ \u306e\u6b69\u304d\u65b9 Web \u30b5\u30a4\u30c8\u306e\u6539\u5584\u3001\u60c5\u5831\u62e1\u5145\u306b\u5354\u529b\u3057\u3066\u304f\u308c\u305f\u65b9\u3005\u3067\u3059\uff08ABC \u9806\uff09\u3002 @kariya_mitsuru \u3055\u3093 C++17 \u6d0b\u66f8 \u60c5\u5831\u63d0\u4f9b \u51e6\u7406\u7cfb\u306e\u5bfe\u5fdc\u72b6\u6cc1 \u60c5\u5831\u63d0\u4f9b @Fuyutsubaki \u3055\u3093 \u306a\u305c\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044 \u30cd\u30bf\u63d0\u4f9b @matken11235 \u3055\u3093 C++ \u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3 \u60c5\u5831\u63d0\u4f9b @NxNeu_J \u3055\u3093 C++17 \u6d0b\u66f8 \u60c5\u5831\u63d0\u4f9b @onihusube9 \u3055\u3093 \u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599 \u60c5\u5831\u63d0\u4f9b Q & A \u30b5\u30a4\u30c8 \u60c5\u5831\u63d0\u4f9b C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848 \u8a18\u4e8b\u63d0\u4f9b \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf \u30e9\u30a4\u30d6\u30e9\u30ea \u60c5\u5831\u63d0\u4f9b","title":"\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30bf"},{"location":"learn/books/","text":"\u66f8\u7c4d C++ \u306e\u5b66\u7fd2\u306b\u5f79\u7acb\u3064\u66f8\u7c4d\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 C++14 \u4ee5\u964d\u306e\u66f8\u7c4d \u66f8\u540d \u767a\u884c\u5e74 C++ \u898f\u683c \u5185\u5bb9 Effective Modern C++ 2015 C++14 Effective C++ \u3067\u6709\u540d\u306a Scott Meyers \u306b\u3088\u308b C++11/14 \u306e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u30fb\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u30fb\u30a4\u30c7\u30a3\u30aa\u30e0\u96c6 C++11/14 \u30b3\u30a2\u8a00\u8a9e 2015 C++14 C++11/14 \u306e\u6587\u6cd5\u3068\u8a00\u8a9e\u6a5f\u80fd\u3092\u898f\u683c\u66f8\u306b\u57fa\u3065\u3044\u3066\u8a73\u7d30\u306b\u89e3\u8aac\u3002 \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u7248 C++ \u306b\u3088\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u539f\u5247\u3068\u5b9f\u8df5 2016 C++14 C++ \u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u6559\u3048\u308b 1,000 \u30da\u30fc\u30b8\u8d85\u306e\u5165\u9580\u66f8\u3002C++ \u751f\u307f\u306e\u89aa Bjarne Stroustrup \u8457 \u57fa\u790e\u304b\u3089\u3057\u3063\u304b\u308a\u5b66\u3076 C++ \u306e\u6559\u79d1\u66f8 2017 C++14 \u521d\u5b66\u8005\u5411\u3051\u3002\u57fa\u672c\u7684\u306a\u6587\u6cd5\u304b\u3089\u30af\u30e9\u30b9\u3001\u30b3\u30f3\u30c6\u30ca\u3001\u4e26\u5217\u5316\u307e\u3067\u6271\u3046\u7d04 300 \u30da\u30fc\u30b8\u306e\u5165\u9580\u66f8 C++ \u306e\u7d75\u672c \u7b2c\uff12\u7248 2017 C++14 \u30af\u30e9\u30b9\u3084\u53c2\u7167\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u3069\u3001C \u306b\u5bfe\u3059\u308b C++ \u56fa\u6709\u306e\u8a00\u8a9e\u6a5f\u80fd\u3092\u56f3\u7248\u3092\u7528\u3044\u3066\u89e3\u8aac Optimized C++ 2017 C++14 C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6027\u80fd\u6e2c\u5b9a\u3068\u6700\u9069\u5316\u306b\u3064\u3044\u3066\u306e\u5b9f\u8df5\u3068\u89e3\u8aac [\u6539\u8a02\u7b2c3\u7248] C++ \u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 2018 C++17 \u57fa\u672c\u6587\u6cd5\u306e\u89e3\u8aac\u306b\u52a0\u3048\u3001\u9006\u5f15\u304d\u5f62\u5f0f\u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5e45\u5e83\u3044\u6a5f\u80fd\u3092\u7d39\u4ecb \u6c5f\u6dfb\u4eae\u306e\u8a73\u8aac C++17 2018 C++17 C++14/17 \u306e\u65b0\u3057\u3044\u6587\u6cd5\u3068\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3002 \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u7248 \u5192\u967a\u3067\u5b66\u3076\u306f\u3058\u3081\u3066\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 2018 C++17 \u521d\u5b66\u8005\u5411\u3051\u3002\u65e9\u7a32\u7530\u5927\u5b66\u304c\u904b\u55b6\u3059\u308b\u4e2d\u5b66\u30fb\u9ad8\u6821\u751f\u5411\u3051 C++ \u5165\u9580\u8b1b\u5ea7\u306e\u6559\u79d1\u66f8\u3002 \u7d39\u4ecb\u30da\u30fc\u30b8 Modern C++ \u30c1\u30e3\u30ec\u30f3\u30b8 \u2015 C++17 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u529b\u3092\u935b\u3048\u308b 100 \u554f 2019 C++17/20 \u73fe\u5b9f\u7684\u30fb\u5b9f\u8df5\u7684\u306a 100 \u306e\u8ab2\u984c\u3092 C++ \u3067\u89e3\u6c7a\u3059\u308b\u554f\u984c\u96c6\u3002\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7a4d\u6975\u7684\u306b\u6d3b\u7528\u3059\u308b \u6d0b\u66f8 \u66f8\u540d \u767a\u884c\u5e74 C++ \u898f\u683c \u5185\u5bb9 C++ Templates: The Complete Guide (2nd Edition) 2017 C++17/20 C++17 \u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u6587\u6cd5\u3084\u69d8\u3005\u306a\u30c6\u30af\u30cb\u30c3\u30af\u3092\u89e3\u8aac\u3002C++20 \u3067\u5c0e\u5165\u3055\u308c\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u7d39\u4ecb\u3082\u3002 \u76ee\u6b21 Mastering the C++17 STL 2017 C++17 C++17 \u307e\u3067\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3084\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3002 \u76ee\u6b21 C++ Concurrency in Action, Second Edition 2019 C++17 C++17 \u306b\u304a\u3051\u308b\u4e26\u884c\u51e6\u7406\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3002\u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u8a2d\u8a08\u306a\u3069\u3082\u53d6\u308a\u4e0a\u3052\u308b\u3002 \u8a66\u3057\u8aad\u307f C++17 in Detail 2019 C++17 C++17 \u306e\u4e3b\u8981\u306a\u65b0\u6a5f\u80fd\u30fb\u5909\u66f4\u70b9\u306e\u307b\u304b\u3001Boost \u304b\u3089\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3078\u306e\u79fb\u884c\u3092\u89e3\u8aac\u3002 \u76ee\u6b21","title":"\u66f8\u7c4d"},{"location":"learn/books/#_1","text":"C++ \u306e\u5b66\u7fd2\u306b\u5f79\u7acb\u3064\u66f8\u7c4d\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002","title":"\u66f8\u7c4d"},{"location":"learn/books/#c14","text":"\u66f8\u540d \u767a\u884c\u5e74 C++ \u898f\u683c \u5185\u5bb9 Effective Modern C++ 2015 C++14 Effective C++ \u3067\u6709\u540d\u306a Scott Meyers \u306b\u3088\u308b C++11/14 \u306e\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u30fb\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u30fb\u30a4\u30c7\u30a3\u30aa\u30e0\u96c6 C++11/14 \u30b3\u30a2\u8a00\u8a9e 2015 C++14 C++11/14 \u306e\u6587\u6cd5\u3068\u8a00\u8a9e\u6a5f\u80fd\u3092\u898f\u683c\u66f8\u306b\u57fa\u3065\u3044\u3066\u8a73\u7d30\u306b\u89e3\u8aac\u3002 \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u7248 C++ \u306b\u3088\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u539f\u5247\u3068\u5b9f\u8df5 2016 C++14 C++ \u3092\u4f7f\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u6559\u3048\u308b 1,000 \u30da\u30fc\u30b8\u8d85\u306e\u5165\u9580\u66f8\u3002C++ \u751f\u307f\u306e\u89aa Bjarne Stroustrup \u8457 \u57fa\u790e\u304b\u3089\u3057\u3063\u304b\u308a\u5b66\u3076 C++ \u306e\u6559\u79d1\u66f8 2017 C++14 \u521d\u5b66\u8005\u5411\u3051\u3002\u57fa\u672c\u7684\u306a\u6587\u6cd5\u304b\u3089\u30af\u30e9\u30b9\u3001\u30b3\u30f3\u30c6\u30ca\u3001\u4e26\u5217\u5316\u307e\u3067\u6271\u3046\u7d04 300 \u30da\u30fc\u30b8\u306e\u5165\u9580\u66f8 C++ \u306e\u7d75\u672c \u7b2c\uff12\u7248 2017 C++14 \u30af\u30e9\u30b9\u3084\u53c2\u7167\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306a\u3069\u3001C \u306b\u5bfe\u3059\u308b C++ \u56fa\u6709\u306e\u8a00\u8a9e\u6a5f\u80fd\u3092\u56f3\u7248\u3092\u7528\u3044\u3066\u89e3\u8aac Optimized C++ 2017 C++14 C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6027\u80fd\u6e2c\u5b9a\u3068\u6700\u9069\u5316\u306b\u3064\u3044\u3066\u306e\u5b9f\u8df5\u3068\u89e3\u8aac [\u6539\u8a02\u7b2c3\u7248] C++ \u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 2018 C++17 \u57fa\u672c\u6587\u6cd5\u306e\u89e3\u8aac\u306b\u52a0\u3048\u3001\u9006\u5f15\u304d\u5f62\u5f0f\u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5e45\u5e83\u3044\u6a5f\u80fd\u3092\u7d39\u4ecb \u6c5f\u6dfb\u4eae\u306e\u8a73\u8aac C++17 2018 C++17 C++14/17 \u306e\u65b0\u3057\u3044\u6587\u6cd5\u3068\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u6a5f\u80fd\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3002 \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u7248 \u5192\u967a\u3067\u5b66\u3076\u306f\u3058\u3081\u3066\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 2018 C++17 \u521d\u5b66\u8005\u5411\u3051\u3002\u65e9\u7a32\u7530\u5927\u5b66\u304c\u904b\u55b6\u3059\u308b\u4e2d\u5b66\u30fb\u9ad8\u6821\u751f\u5411\u3051 C++ \u5165\u9580\u8b1b\u5ea7\u306e\u6559\u79d1\u66f8\u3002 \u7d39\u4ecb\u30da\u30fc\u30b8 Modern C++ \u30c1\u30e3\u30ec\u30f3\u30b8 \u2015 C++17 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u529b\u3092\u935b\u3048\u308b 100 \u554f 2019 C++17/20 \u73fe\u5b9f\u7684\u30fb\u5b9f\u8df5\u7684\u306a 100 \u306e\u8ab2\u984c\u3092 C++ \u3067\u89e3\u6c7a\u3059\u308b\u554f\u984c\u96c6\u3002\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7a4d\u6975\u7684\u306b\u6d3b\u7528\u3059\u308b","title":"C++14 \u4ee5\u964d\u306e\u66f8\u7c4d"},{"location":"learn/books/#_2","text":"\u66f8\u540d \u767a\u884c\u5e74 C++ \u898f\u683c \u5185\u5bb9 C++ Templates: The Complete Guide (2nd Edition) 2017 C++17/20 C++17 \u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u6587\u6cd5\u3084\u69d8\u3005\u306a\u30c6\u30af\u30cb\u30c3\u30af\u3092\u89e3\u8aac\u3002C++20 \u3067\u5c0e\u5165\u3055\u308c\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u7d39\u4ecb\u3082\u3002 \u76ee\u6b21 Mastering the C++17 STL 2017 C++17 C++17 \u307e\u3067\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3084\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3002 \u76ee\u6b21 C++ Concurrency in Action, Second Edition 2019 C++17 C++17 \u306b\u304a\u3051\u308b\u4e26\u884c\u51e6\u7406\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3002\u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u8a2d\u8a08\u306a\u3069\u3082\u53d6\u308a\u4e0a\u3052\u308b\u3002 \u8a66\u3057\u8aad\u307f C++17 in Detail 2019 C++17 C++17 \u306e\u4e3b\u8981\u306a\u65b0\u6a5f\u80fd\u30fb\u5909\u66f4\u70b9\u306e\u307b\u304b\u3001Boost \u304b\u3089\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3078\u306e\u79fb\u884c\u3092\u89e3\u8aac\u3002 \u76ee\u6b21","title":"\u6d0b\u66f8"},{"location":"learn/communities/","text":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 C++ \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u3059\u3002 \u30e6\u30fc\u30b6\u30b0\u30eb\u30fc\u30d7 Cpplang Slack https://cpplang.now.sh/ 1 \u4e07\u4eba\u4ee5\u4e0a\u304c\u767b\u9332\u3057\u3001100 \u4ee5\u4e0a\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u5b58\u5728\u3059\u308b\u3001C++ \u306b\u95a2\u3059\u308b\u4e16\u754c\u6700\u5927\u306e Slack \u30ef\u30fc\u30af\u30b9\u30da\u30fc\u30b9\u3067\u3059\u3002\u4e0a\u8a18\u30da\u30fc\u30b8\u306b\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u529b\u3059\u308b\u3068\u62db\u5f85\u30e1\u30fc\u30eb\u304c\u5c4a\u304d\u307e\u3059\u3002 C++JP Facebook \u30b0\u30eb\u30fc\u30d7 https://www.facebook.com/groups/cppjp/ 400 \u4eba\u4ee5\u4e0a\u304c\u53c2\u52a0\u3059\u308b\u3001\u65e5\u672c\u306e C++ \u30d7\u30ed\u30b0\u30e9\u30de\u306e\u305f\u3081\u306e Facebook \u30b0\u30eb\u30fc\u30d7\u3067\u3059\u3002\u66f8\u7c4d\u3084\u30a4\u30d9\u30f3\u30c8\u306e\u60c5\u5831\u304c\u6295\u7a3f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u65e5\u672c\u8a9e\u306e Q & A \u30b5\u30a4\u30c8 Stack Overflow (\u65e5\u672c\u8a9e\u7248) C++ \u30bf\u30b0\u304c\u4ed8\u3044\u305f\u8cea\u554f: https://ja.stackoverflow.com/questions/tagged/c%2b%2b teratail C++ \u30bf\u30b0\u304c\u4ed8\u3044\u305f\u8cea\u554f: https://teratail.com/search?q=C%2B%2B 2 \u3061\u3083\u3093\u306d\u308b\u30b9\u30ec\u30c3\u30c9 C++ \u76f8\u8ac7\u5ba4 C/C++ \u5ba4","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"learn/communities/#_1","text":"C++ \u30e6\u30fc\u30b6\u306e\u305f\u3081\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u3059\u3002","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3"},{"location":"learn/communities/#_2","text":"","title":"\u30e6\u30fc\u30b6\u30b0\u30eb\u30fc\u30d7"},{"location":"learn/communities/#cpplang-slack","text":"https://cpplang.now.sh/ 1 \u4e07\u4eba\u4ee5\u4e0a\u304c\u767b\u9332\u3057\u3001100 \u4ee5\u4e0a\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u5b58\u5728\u3059\u308b\u3001C++ \u306b\u95a2\u3059\u308b\u4e16\u754c\u6700\u5927\u306e Slack \u30ef\u30fc\u30af\u30b9\u30da\u30fc\u30b9\u3067\u3059\u3002\u4e0a\u8a18\u30da\u30fc\u30b8\u306b\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u529b\u3059\u308b\u3068\u62db\u5f85\u30e1\u30fc\u30eb\u304c\u5c4a\u304d\u307e\u3059\u3002","title":"Cpplang Slack"},{"location":"learn/communities/#cjp-facebook","text":"https://www.facebook.com/groups/cppjp/ 400 \u4eba\u4ee5\u4e0a\u304c\u53c2\u52a0\u3059\u308b\u3001\u65e5\u672c\u306e C++ \u30d7\u30ed\u30b0\u30e9\u30de\u306e\u305f\u3081\u306e Facebook \u30b0\u30eb\u30fc\u30d7\u3067\u3059\u3002\u66f8\u7c4d\u3084\u30a4\u30d9\u30f3\u30c8\u306e\u60c5\u5831\u304c\u6295\u7a3f\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"C++JP Facebook \u30b0\u30eb\u30fc\u30d7"},{"location":"learn/communities/#q-a","text":"","title":"\u65e5\u672c\u8a9e\u306e Q &amp; A \u30b5\u30a4\u30c8"},{"location":"learn/communities/#stack-overflow","text":"C++ \u30bf\u30b0\u304c\u4ed8\u3044\u305f\u8cea\u554f: https://ja.stackoverflow.com/questions/tagged/c%2b%2b","title":"Stack Overflow (\u65e5\u672c\u8a9e\u7248)"},{"location":"learn/communities/#teratail","text":"C++ \u30bf\u30b0\u304c\u4ed8\u3044\u305f\u8cea\u554f: https://teratail.com/search?q=C%2B%2B","title":"teratail"},{"location":"learn/communities/#2","text":"C++ \u76f8\u8ac7\u5ba4 C/C++ \u5ba4","title":"2 \u3061\u3083\u3093\u306d\u308b\u30b9\u30ec\u30c3\u30c9"},{"location":"learn/online-resources/","text":"\u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599 \u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b C++ \u30ea\u30bd\u30fc\u30b9\u3067\u3059\u3002 \u65e5\u672c\u8a9e\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 cpprefjp cppreference.com \u65e5\u672c\u8a9e\u7248 \u82f1\u8a9e\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 cppreference.com C++ Language Reference C++ \u898f\u683c\u95a2\u9023 C++11 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N3337) | HTML \u7248 C++14 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4140) | HTML \u7248 C++17 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4659) | HTML \u7248 \u6700\u65b0\u306e C++20 \u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4800) | HTML \u7248 FAQ C++ FAQ Marshall Cline \u306e C++ FAQ \u3068 Bjarne Stroustrup \u306e C++ FAQ \u3092\u7d71\u5408\u30fb\u66f4\u65b0\u3057\u305f Q&A \u96c6","title":"\u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599"},{"location":"learn/online-resources/#_1","text":"\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b C++ \u30ea\u30bd\u30fc\u30b9\u3067\u3059\u3002","title":"\u30aa\u30f3\u30e9\u30a4\u30f3\u8cc7\u6599"},{"location":"learn/online-resources/#_2","text":"cpprefjp cppreference.com \u65e5\u672c\u8a9e\u7248","title":"\u65e5\u672c\u8a9e\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9"},{"location":"learn/online-resources/#_3","text":"cppreference.com C++ Language Reference","title":"\u82f1\u8a9e\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9"},{"location":"learn/online-resources/#c","text":"C++11 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N3337) | HTML \u7248 C++14 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4140) | HTML \u7248 C++17 \u6700\u7d42\u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4659) | HTML \u7248 \u6700\u65b0\u306e C++20 \u30ef\u30fc\u30ad\u30f3\u30b0\u30c9\u30e9\u30d5\u30c8 (N4800) | HTML \u7248","title":"C++ \u898f\u683c\u95a2\u9023"},{"location":"learn/online-resources/#faq","text":"C++ FAQ Marshall Cline \u306e C++ FAQ \u3068 Bjarne Stroustrup \u306e C++ FAQ \u3092\u7d71\u5408\u30fb\u66f4\u65b0\u3057\u305f Q&A \u96c6","title":"FAQ"},{"location":"learn/studymeetings/","text":"\u56fd\u5185\u306e\u52c9\u5f37\u4f1a \u56fd\u5185\u3067\u958b\u50ac\u3055\u308c\u3066\u3044\u308b C++ \u95a2\u9023\u306e\u52c9\u5f37\u4f1a\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002 C++ MIX \u300cC++ MIX\u300d\u306f\u3001C++\u5468\u8fba\u306e\u52c9\u5f37\u4f1a\u3067\u3059\u3002 \u6a19\u6e96C++\u3001\u6a19\u6e96\u5916\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30c4\u30fc\u30eb\u306e\u7d39\u4ecb\u306f\u3082\u3061\u308d\u3093\u3067\u3059\u304c\u3001Rust\u3084Go\u306a\u3069\u306e\u5f8c\u7d99\u8a00\u8a9e\u306e\u3088\u3046\u306b\u3001C++\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u77e5\u3063\u3066\u3082\u3089\u3044\u305f\u3044\u8a71\u3092\u5e83\u304f\u6271\u3063\u3066\u3044\u304d\u307e\u3059\u3002 \u3053\u306e\u52c9\u5f37\u4f1a\u3067\u306f\u3001\u767a\u8868\u8005\u306b\u3088\u308b\u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3060\u3051\u3067\u306a\u304f\u3001\u53c2\u52a0\u8005\u306e\u307f\u306a\u3055\u3093\u3068\u8b70\u8ad6\u3059\u308b\u6642\u9593\u3082\u4eca\u5f8c\u7528\u610f\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002 https://cppmix.connpass.com/ Youtube \u30c1\u30e3\u30f3\u30cd\u30eb Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #cppmix C++ MIX #2 2019-02-20 \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e iOS\u30a2\u30d7\u30ea\u300e\u30d1\u30ba\u30e2\u30ca\u300f\u306e\u3072\u307f\u3064 Qt\u00d7Reactive Extensions C++\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u300cpoac\u300d\u3092\u958b\u767a\u3057\u305f\u8a71 \u96d1\u8ac7\u30bf\u30a4\u30e0 C++ MIX #1 2018-12-06 \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u3001\u6700\u8fd1\u306eC++\u306e\u8aac\u660e Menoh\u306b\u304a\u3051\u308b C++\u5b9f\u88c5 / C API / C++API Undefined Behavior\u306b\u5bfe\u3059\u308b\u9632\u885b\u8853 C++ \u3092\u6559\u3048\u308b \uff5e\u65e9\u7a32\u7530\u5927\u5b66\u306e\u5c0f\u4e2d\u9ad8\u751f\u5411\u3051\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6559\u5ba4\u306b\u304a\u3051\u308b\u4e8b\u4f8b\u7d39\u4ecb\uff5e \u907f\u3051\u3088\u3046 memset \u306e\u4e71\u7528 nakameguro_feature.cpp C++17\u306e\u65b0\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3001\u5fa9\u7fd2\uff06\u4e88\u7fd2\u3092\u3057\u307e\u305b\u3093\u304b\uff1f \u30fbC++17\u304c\u51fa\u305f\u307f\u305f\u3044\u3060\u3051\u3069\u3001\u4f55\u304c\u65b0\u3057\u304f\u306a\u3063\u305f\u306e\u304c\u5168\u7136\u8ffd\u3048\u3066\u306a\u3044\u2026\uff1e\uff1c \u30fb\u8272\u3093\u306a\u6a5f\u80fd\u304c\u5165\u3063\u3066\u308b\u307f\u305f\u3044\u3060\u3051\u3069\u3001\u672c\u5f53\u306b\u6291\u3048\u3068\u304f\u3079\u304d\u6a5f\u80fd\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3063\u3066\u4f55\u306a\u3093\u3060\u308d\uff1f \u30fb\u4ed6\u306e\u4eba\u304c\u3069\u3046\u8003\u3048\u3066\u3044\u308b\u304b\u77e5\u308a\u305f\u3044\u2026 \u3053\u3093\u306a\u4eba\u306f\u3001\u4e00\u5ea6\u3001\u3053\u306e\u96c6\u307e\u308a\u306b\u53c2\u52a0\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044 \u8cea\u7591\u5fdc\u7b54\u30fb\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u5f62\u5f0f\u3067\u9032\u3081\u308b\u4e88\u5b9a\u3067\u3059\u304c\u3001\u7121\u8a00\u306e\u65b9\u3082OK\u3067\u3059 \u7279\u306b\u66f8\u7c4d\u306a\u3069\u3092\u6301\u53c2\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093 \u30cd\u30bf\u632f\u308a\u3068\u3057\u3066 \u9032\u884c\u5f79\u304c\u3001C++17\u306e\u57fa\u790e\u7684\u306a\u6a5f\u80fd\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8a71\u984c\u3092\u3001\u53c2\u52a0\u8005\u306b\u63d0\u4f9b\u3057\u307e\u3059 https://ebisu-effective-modern-cpp.connpass.com/ Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #nakamecpp nakameguro_feature.cpp vol.17 2019-03-14 \u672d\u5e4c C++ \u52c9\u5f37\u4f1a https://sapporocpp-mokumoku.connpass.com/ \u672d\u5e4cC++\u52c9\u5f37\u4f1a/\u3082\u304f\u3082\u304f\u4f1a Sapporo.cpp\u306e\u30e1\u30f3\u30d0\u30fc\u3067\u904b\u55b6\u3057\u3066\u3044\u308b\u3001\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u5b9f\u65bd\u3057\u3066\u3044\u308b\u3082\u304f\u3082\u304f\u4f1a\u3067\u3059\u3002\u52c9\u5f37\u4f1a\u3088\u308a\u3082\u9ad8\u983b\u5ea6\u306b\u6d3b\u52d5\u3092\u884c\u3046\u5834\u3068\u3057\u3066\u3001\u304a\u304a\u3080\u306d\u6bce\u90311\u56de\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3002 \u5927\u962a C++ \u8aad\u66f8\u4f1a https://cpp-osaka.connpass.com/ \u5927\u962a\u3067C++\u306b\u95a2\u3059\u308b\u3082\u306e\u3092\u8aad\u307f\u9032\u3081\u308b\u4f1a\u3067\u3059\u3002 \u8ab0\u304b\u304c\u767a\u8868\u3059\u308b\u3068\u3044\u3063\u305f\u30b9\u30bf\u30a4\u30eb\u3067\u306f\u306a\u304f\u3001\u307f\u3093\u306a\u3067\u308f\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3092\u8a71\u3057\u5408\u3063\u3066\u8aad\u3093\u3067\u3044\u304f\u30b9\u30bf\u30a4\u30eb\u306e\u4f1a\u3067\u3059\u3002 Boost. \u52c9\u5f37\u4f1a Boost C++ Libraries\u3068\u3044\u3046\u3001C++\u306e\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u3001C++\u5168\u822c\u306e\u52c9\u5f37\u4f1a\u3067\u3059\u3002 Boost\u306b\u9650\u3089\u305a\u3001C++\u5168\u822c\u306e\u8a71\u3001Qt\u3084OpenCV\u306e\u3088\u3046\u306a\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u81ea\u5206\u304c\u4f5c\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d39\u4ecb\u3001\u305d\u306e\u4ed6C++\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u77e5\u3063\u3066\u304a\u3044\u3066\u3082\u3089\u3044\u305f\u3044\u3053\u3068\u306e\u7d39\u4ecb(\u30c7\u30fc\u30bf\u69cb\u9020\u3084\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u30a4\u30c7\u30a3\u30aa\u30e0\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8a2d\u8a08\u3084\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3001\u4ed6\u306e\u8a00\u8a9e\u3067\u306e\u8003\u3048\u65b9\u3084\u30a2\u30d7\u30ed\u30fc\u30c1)\u306a\u3069\u3001\u5e45\u5e83\u3044\u30c6\u30fc\u30de\u3092\u6271\u3063\u3066\u3044\u307e\u3059\u3002 https://boostjp.github.io/study_meeting.html \uff08\u6d3b\u52d5\u4f11\u6b62\uff09","title":"\u56fd\u5185\u306e\u52c9\u5f37\u4f1a"},{"location":"learn/studymeetings/#_1","text":"\u56fd\u5185\u3067\u958b\u50ac\u3055\u308c\u3066\u3044\u308b C++ \u95a2\u9023\u306e\u52c9\u5f37\u4f1a\u30a4\u30d9\u30f3\u30c8\u3067\u3059\u3002","title":"\u56fd\u5185\u306e\u52c9\u5f37\u4f1a"},{"location":"learn/studymeetings/#c-mix","text":"\u300cC++ MIX\u300d\u306f\u3001C++\u5468\u8fba\u306e\u52c9\u5f37\u4f1a\u3067\u3059\u3002 \u6a19\u6e96C++\u3001\u6a19\u6e96\u5916\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30c4\u30fc\u30eb\u306e\u7d39\u4ecb\u306f\u3082\u3061\u308d\u3093\u3067\u3059\u304c\u3001Rust\u3084Go\u306a\u3069\u306e\u5f8c\u7d99\u8a00\u8a9e\u306e\u3088\u3046\u306b\u3001C++\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u77e5\u3063\u3066\u3082\u3089\u3044\u305f\u3044\u8a71\u3092\u5e83\u304f\u6271\u3063\u3066\u3044\u304d\u307e\u3059\u3002 \u3053\u306e\u52c9\u5f37\u4f1a\u3067\u306f\u3001\u767a\u8868\u8005\u306b\u3088\u308b\u30d7\u30ec\u30bc\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3060\u3051\u3067\u306a\u304f\u3001\u53c2\u52a0\u8005\u306e\u307f\u306a\u3055\u3093\u3068\u8b70\u8ad6\u3059\u308b\u6642\u9593\u3082\u4eca\u5f8c\u7528\u610f\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002 https://cppmix.connpass.com/ Youtube \u30c1\u30e3\u30f3\u30cd\u30eb Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #cppmix","title":"C++ MIX"},{"location":"learn/studymeetings/#c-mix-2","text":"2019-02-20 \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u306e\u8aac\u660e iOS\u30a2\u30d7\u30ea\u300e\u30d1\u30ba\u30e2\u30ca\u300f\u306e\u3072\u307f\u3064 Qt\u00d7Reactive Extensions C++\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u300cpoac\u300d\u3092\u958b\u767a\u3057\u305f\u8a71 \u96d1\u8ac7\u30bf\u30a4\u30e0","title":"C++ MIX #2"},{"location":"learn/studymeetings/#c-mix-1","text":"2018-12-06 \u52c9\u5f37\u4f1a\u3068\u4f1a\u5834\u3001\u6700\u8fd1\u306eC++\u306e\u8aac\u660e Menoh\u306b\u304a\u3051\u308b C++\u5b9f\u88c5 / C API / C++API Undefined Behavior\u306b\u5bfe\u3059\u308b\u9632\u885b\u8853 C++ \u3092\u6559\u3048\u308b \uff5e\u65e9\u7a32\u7530\u5927\u5b66\u306e\u5c0f\u4e2d\u9ad8\u751f\u5411\u3051\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6559\u5ba4\u306b\u304a\u3051\u308b\u4e8b\u4f8b\u7d39\u4ecb\uff5e \u907f\u3051\u3088\u3046 memset \u306e\u4e71\u7528","title":"C++ MIX #1"},{"location":"learn/studymeetings/#nakameguro_featurecpp","text":"C++17\u306e\u65b0\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3001\u5fa9\u7fd2\uff06\u4e88\u7fd2\u3092\u3057\u307e\u305b\u3093\u304b\uff1f \u30fbC++17\u304c\u51fa\u305f\u307f\u305f\u3044\u3060\u3051\u3069\u3001\u4f55\u304c\u65b0\u3057\u304f\u306a\u3063\u305f\u306e\u304c\u5168\u7136\u8ffd\u3048\u3066\u306a\u3044\u2026\uff1e\uff1c \u30fb\u8272\u3093\u306a\u6a5f\u80fd\u304c\u5165\u3063\u3066\u308b\u307f\u305f\u3044\u3060\u3051\u3069\u3001\u672c\u5f53\u306b\u6291\u3048\u3068\u304f\u3079\u304d\u6a5f\u80fd\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u3063\u3066\u4f55\u306a\u3093\u3060\u308d\uff1f \u30fb\u4ed6\u306e\u4eba\u304c\u3069\u3046\u8003\u3048\u3066\u3044\u308b\u304b\u77e5\u308a\u305f\u3044\u2026 \u3053\u3093\u306a\u4eba\u306f\u3001\u4e00\u5ea6\u3001\u3053\u306e\u96c6\u307e\u308a\u306b\u53c2\u52a0\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044 \u8cea\u7591\u5fdc\u7b54\u30fb\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u5f62\u5f0f\u3067\u9032\u3081\u308b\u4e88\u5b9a\u3067\u3059\u304c\u3001\u7121\u8a00\u306e\u65b9\u3082OK\u3067\u3059 \u7279\u306b\u66f8\u7c4d\u306a\u3069\u3092\u6301\u53c2\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093 \u30cd\u30bf\u632f\u308a\u3068\u3057\u3066 \u9032\u884c\u5f79\u304c\u3001C++17\u306e\u57fa\u790e\u7684\u306a\u6a5f\u80fd\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8a71\u984c\u3092\u3001\u53c2\u52a0\u8005\u306b\u63d0\u4f9b\u3057\u307e\u3059 https://ebisu-effective-modern-cpp.connpass.com/ Twitter \u30cf\u30c3\u30b7\u30e5\u30bf\u30b0 #nakamecpp","title":"nakameguro_feature.cpp"},{"location":"learn/studymeetings/#nakameguro_featurecpp-vol17","text":"2019-03-14","title":"nakameguro_feature.cpp vol.17"},{"location":"learn/studymeetings/#c","text":"https://sapporocpp-mokumoku.connpass.com/ \u672d\u5e4cC++\u52c9\u5f37\u4f1a/\u3082\u304f\u3082\u304f\u4f1a Sapporo.cpp\u306e\u30e1\u30f3\u30d0\u30fc\u3067\u904b\u55b6\u3057\u3066\u3044\u308b\u3001\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u5b9f\u65bd\u3057\u3066\u3044\u308b\u3082\u304f\u3082\u304f\u4f1a\u3067\u3059\u3002\u52c9\u5f37\u4f1a\u3088\u308a\u3082\u9ad8\u983b\u5ea6\u306b\u6d3b\u52d5\u3092\u884c\u3046\u5834\u3068\u3057\u3066\u3001\u304a\u304a\u3080\u306d\u6bce\u90311\u56de\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u672d\u5e4c C++ \u52c9\u5f37\u4f1a"},{"location":"learn/studymeetings/#c_1","text":"https://cpp-osaka.connpass.com/ \u5927\u962a\u3067C++\u306b\u95a2\u3059\u308b\u3082\u306e\u3092\u8aad\u307f\u9032\u3081\u308b\u4f1a\u3067\u3059\u3002 \u8ab0\u304b\u304c\u767a\u8868\u3059\u308b\u3068\u3044\u3063\u305f\u30b9\u30bf\u30a4\u30eb\u3067\u306f\u306a\u304f\u3001\u307f\u3093\u306a\u3067\u308f\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u3092\u8a71\u3057\u5408\u3063\u3066\u8aad\u3093\u3067\u3044\u304f\u30b9\u30bf\u30a4\u30eb\u306e\u4f1a\u3067\u3059\u3002","title":"\u5927\u962a C++ \u8aad\u66f8\u4f1a"},{"location":"learn/studymeetings/#boost","text":"Boost C++ Libraries\u3068\u3044\u3046\u3001C++\u306e\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3092\u4e2d\u5fc3\u3068\u3057\u305f\u3001C++\u5168\u822c\u306e\u52c9\u5f37\u4f1a\u3067\u3059\u3002 Boost\u306b\u9650\u3089\u305a\u3001C++\u5168\u822c\u306e\u8a71\u3001Qt\u3084OpenCV\u306e\u3088\u3046\u306a\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3001\u81ea\u5206\u304c\u4f5c\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u7d39\u4ecb\u3001\u305d\u306e\u4ed6C++\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u77e5\u3063\u3066\u304a\u3044\u3066\u3082\u3089\u3044\u305f\u3044\u3053\u3068\u306e\u7d39\u4ecb(\u30c7\u30fc\u30bf\u69cb\u9020\u3084\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u30a4\u30c7\u30a3\u30aa\u30e0\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u8a2d\u8a08\u3084\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3001\u4ed6\u306e\u8a00\u8a9e\u3067\u306e\u8003\u3048\u65b9\u3084\u30a2\u30d7\u30ed\u30fc\u30c1)\u306a\u3069\u3001\u5e45\u5e83\u3044\u30c6\u30fc\u30de\u3092\u6271\u3063\u3066\u3044\u307e\u3059\u3002 https://boostjp.github.io/study_meeting.html \uff08\u6d3b\u52d5\u4f11\u6b62\uff09","title":"Boost. \u52c9\u5f37\u4f1a"},{"location":"libraries/containers/","text":"\u30b3\u30f3\u30c6\u30ca \u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb absl::flat_hash_map absl::node_hash_map boost::unordered_map eastl::hash_map emilib::HashMap folly::F14NodeMap folly::F14ValueMap google::dense_hash_map google::sparse_hash_map robin_hood::unordered_flat_map robin_hood::unordered_node_map ska::bytell_hash_map spp::sparse_hash_map tsl::hopscotch_map tsl::robin_map tsl::sparse_map","title":"\u30b3\u30f3\u30c6\u30ca"},{"location":"libraries/containers/#_1","text":"","title":"\u30b3\u30f3\u30c6\u30ca"},{"location":"libraries/containers/#_2","text":"absl::flat_hash_map absl::node_hash_map boost::unordered_map eastl::hash_map emilib::HashMap folly::F14NodeMap folly::F14ValueMap google::dense_hash_map google::sparse_hash_map robin_hood::unordered_flat_map robin_hood::unordered_node_map ska::bytell_hash_map spp::sparse_hash_map tsl::hopscotch_map tsl::robin_map tsl::sparse_map","title":"\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb"},{"location":"libraries/text-data/","text":"\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf JSON ArduinoJson MIT JsonCpp MIT / Public domain dropbox/json11 MIT hjiang/jsonxx MIT nlohmann/json MIT PicoJSON BSD 2-Clause RapidJSON MIT sajson MIT \u30d9\u30f3\u30c1\u30de\u30fc\u30af Native JSON Benchmark TOML cpptoml MIT toml11 MIT XML Boost.PropertyTree BSL 1.0 (\u5185\u90e8\u5b9f\u88c5\u306b RapidXml \u3092\u4f7f\u7528) pugixml MIT RapidXml BSL 1.0 TinyXML-2 zlib CSV Boost.Tokenizer BSL 1.0 Fast C++ CSV Parser BSD 3-Clause Vince's CSV Parser MIT INI Boost.PropertyTree BSL 1.0 inicpp MIT .ini parser MIT YAML yaml-cpp MIT","title":"\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf"},{"location":"libraries/text-data/#_1","text":"","title":"\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf"},{"location":"libraries/text-data/#json","text":"ArduinoJson MIT JsonCpp MIT / Public domain dropbox/json11 MIT hjiang/jsonxx MIT nlohmann/json MIT PicoJSON BSD 2-Clause RapidJSON MIT sajson MIT","title":"JSON"},{"location":"libraries/text-data/#_2","text":"Native JSON Benchmark","title":"\u30d9\u30f3\u30c1\u30de\u30fc\u30af"},{"location":"libraries/text-data/#toml","text":"cpptoml MIT toml11 MIT","title":"TOML"},{"location":"libraries/text-data/#xml","text":"Boost.PropertyTree BSL 1.0 (\u5185\u90e8\u5b9f\u88c5\u306b RapidXml \u3092\u4f7f\u7528) pugixml MIT RapidXml BSL 1.0 TinyXML-2 zlib","title":"XML"},{"location":"libraries/text-data/#csv","text":"Boost.Tokenizer BSL 1.0 Fast C++ CSV Parser BSD 3-Clause Vince's CSV Parser MIT","title":"CSV"},{"location":"libraries/text-data/#ini","text":"Boost.PropertyTree BSL 1.0 inicpp MIT .ini parser MIT","title":"INI"},{"location":"libraries/text-data/#yaml","text":"yaml-cpp MIT","title":"YAML"},{"location":"standardization/cpp20/","text":"C++20 \u306e\u65b0\u6a5f\u80fd \u8a00\u8a9e\u6a5f\u80fd \u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u53ef\u80fd\u306b (P0683R1) #include <iostream> enum class Terrain { Open , Forest , Hill , Mountain , Desert , Tundra , River , Ocean }; struct Tile { unsigned int height : 4 = 1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092 1 \u306b Terrain terrain : 3 = Terrain :: Open ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u660e\u793a\u7684\u306b Terrain::Open \u306b bool passable : 1 = true ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092 true \u306b }; int main () { std :: cout << std :: boolalpha ; Tile tile1 ; std :: cout << tile1 . height << \", \" << static_cast < int > ( tile1 . terrain ) << \", \" << tile1 . passable << '\\n' ; Tile tile2 { 15 , Terrain :: Mountain , false }; std :: cout << tile2 . height << \", \" << static_cast < int > ( tile2 . terrain ) << \", \" << tile2 . passable << '\\n' ; } 1, 0, true 15, 3, false \u30e1\u30f3\u30d0\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50\u306e\u4ed5\u69d8\u3092\u4e00\u8cab\u6027\u306e\u305f\u3081\u306b\u4fee\u6b63 (P0704R1) C++17 \u307e\u3067\u306e\u30e1\u30f3\u30d0\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50 .* \u306f\u300c\u53f3\u8fba\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3001\u5de6\u8fba\u5024\u53c2\u7167\u4fee\u98fe\u3055\u308c\u305f\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u4f7f\u3046\u3053\u3068\u306f\u4e0d\u9069\u683c\u300d\u3068\u3044\u3046\u898f\u683c\u6587\u9762\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u305f\u3081\u3001\u540c\u3058\u610f\u5473\u3092\u3082\u3064\u6b21\u306e 2 \u3064\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5f8c\u8005\u3060\u3051\u4e0d\u9069\u683c\u3068\u3055\u308c\u3001\u4e00\u8cab\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002 #include <iostream> #include <string> struct Text { std :: string m_data ; const std :: string & get () const & { return m_data ; } }; int main () { std :: cout << Text { \"Hello\" }. get () << '\\n' ; // OK std :: cout << ( Text { \"Hello\" }. *& Text :: get )() << '\\n' ; // C++17 \u307e\u3067\u306f\u4e0d\u9069\u683c\u3001C++20 \u304b\u3089 OK } C++20 \u3067\u306f\u300c\u53f3\u8fba\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3001\u5de6\u8fba\u5024\u53c2\u7167\u4fee\u98fe\u3055\u308c\u305f \"\u975e const\" \u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u4f7f\u3046\u3053\u3068\u306f\u4e0d\u9069\u683c\u300d\u3068\u6587\u9762\u3092\u4fee\u6b63\u3057\u3001\u5f8c\u8005\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u7b26\u53f7\u4ed8\u304d\u6574\u6570\u578b\u306e\u8ca0\u6570\u8868\u73fe\u3092 2 \u306e\u88dc\u6570\u3068\u898f\u5b9a (P1236R1) \u307b\u307c\u3059\u3079\u3066\u306e\u73fe\u4ee3\u7684\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u3001\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u578b\u306e\u8ca0\u6570\u306f 2 \u306e\u88dc\u6570\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001C++ \u3067\u306f\u8ca0\u6570\u306e\u8868\u73fe\u65b9\u6cd5\u306b\u3064\u3044\u3066\u898f\u683c\u3067\u5b9a\u3081\u3066\u3044\u306a\u304b\u3063\u305f\u305f\u3081\u3001\uff08\u73fe\u5b9f\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\uff092 \u306e\u88dc\u6570\u4ee5\u5916\u3067\u8ca0\u6570\u8868\u73fe\u3092\u5b9f\u88c5\u3059\u308b\u4f59\u5730\u3082\u6b8b\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002C++20 \u304b\u3089\u306f 2 \u306e\u88dc\u6570\u306e\u307f\u3092\u8a31\u53ef\u3059\u308b\u3088\u3046\u898f\u683c\u6587\u8a00\u304c\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002 \u8fd1\u5e74\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067 2 \u306e\u88dc\u6570\u4ee5\u5916\u3092\u4f7f\u3046\u4f8b\u306f\u30011 \u306e\u88dc\u6570\u3092\u4f7f\u3046 Unisys 2200 \u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u904e\u53bb\u306b\u306f\u7b26\u53f7\u3068\u7d76\u5bfe\u5024\u3067\u8868\u73fe\u3059\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3082\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306f\u30e2\u30c0\u30f3\u306a C++ \u3092\u958b\u767a\u74b0\u5883\u3068\u3057\u3066\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u898f\u683c\u5909\u66f4\u306b\u3088\u308b\u5f71\u97ff\u306f\u7121\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002 \uff08\u53c2\u8003\uff09\u7b26\u53f7\u4ed8\u304d 8-bit \u6574\u6570\u306e 2 \u9032\u8868\u73fe 10 \u9032\u8868\u73fe 2 \u306e\u88dc\u6570 1 \u306e\u88dc\u6570 \u7b26\u53f7\u3068\u7d76\u5bfe\u5024 127 01111111 01111111 01111111 126 01111110 01111110 01111110 125 01111101 01111101 01111101 2 00000010 00000010 00000010 1 00000001 00000001 00000001 0 00000000 00000000 00000000 -0 11111111 10000000 -1 11111111 11111110 10000001 -2 11111110 11111101 10000010 -126 10000010 10000001 11111110 -127 10000001 10000000 11111111 -128 10000000 \u30e1\u30f3\u30d0\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7a7a\u306e\u30af\u30e9\u30b9\u306e\u5834\u5408\u306b\u30e1\u30e2\u30ea\u6d88\u8cbb\u3092 0 \u306b\u3067\u304d\u308b [[no_unique_address]] \u5c5e\u6027\u3092\u8ffd\u52a0 (P0840R2) \u30a2\u30ed\u30b1\u30fc\u30bf\u306a\u3069\u3092\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3068\u3057\u3066\u4fdd\u6301\u3059\u308b\u3068\u304d\u3001\u305d\u308c\u304c\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306a\u7a7a\u306e\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u4e00\u610f\u306b\u7528\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u305f\u3081\u3001\u30b5\u30a4\u30ba\u3092 0 \u306b\u3067\u304d\u305a\u30e1\u30e2\u30ea\u6d88\u8cbb\u304c\u7121\u99c4\u306b\u5897\u3048\u3066\u3057\u307e\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u3002 #include <iostream> struct Empty {}; struct X { int i ; Empty e ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 \u3088\u308a\u5927\u304d\u3044 } \u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u300c\u7a7a\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306f\u6700\u9069\u5316\u306b\u3088\u3063\u3066\u30b5\u30a4\u30ba 0 \u306b\u3057\u3066\u3088\u3044\u300d\u3068\u3044\u3046\u4ed5\u69d8\u3092\u5229\u7528\u3057\u305f Empty Base Optimization (EBO) \u3068\u3044\u3046\u30c6\u30af\u30cb\u30c3\u30af\u304c\u3042\u308a\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3082\u3000 std::unique_ptr \u3084 std::shared_ptr , std::vector \u306a\u3069\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 #include <iostream> struct Empty {}; struct X : public Empty { int i ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 } \u3057\u304b\u3057\u3001\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u3067\u7d99\u627f\u306b\u3088\u308b EBO \u3092\u5b9f\u88c5\u3059\u308b\u3068\u30b3\u30fc\u30c9\u304c\u8907\u96d1\u306b\u306a\u308b\u3068\u3044\u3046\u6b20\u70b9\u304c\u3042\u308a\u307e\u3057\u305f\u3002C++20 \u3067\u306f\u30e1\u30f3\u30d0\u306e\u5ba3\u8a00\u306b [[no_unique_address]] \u5c5e\u6027\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u7d99\u627f\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30e9\u304c EBO \u3068\u540c\u3058\u3088\u3046\u306a\u6700\u9069\u5316\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u5f93\u6765\u306e\u7d99\u627f\u306b\u3088\u308b EBO \u3092\u4f7f\u3063\u3066\u3044\u305f\u30b3\u30fc\u30c9\u3092\u3001\u3088\u308a\u5358\u7d14\u306a\u30b3\u30fc\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002 #include <iostream> struct Empty {}; struct X { int i ; [[ no_unique_address ]] Empty e ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 } \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u6587\u5b57\u5217\u306e\u5148\u982d\u3084\u672b\u5c3e\u304c\u3001\u3042\u308b\u6587\u5b57\u5217\u3068\u4e00\u81f4\u3059\u308b\u304b\u5224\u5b9a (P0457R2) std::basic_string \u3068 std::basic_string_view \u306b\u3001 starts_with() \u3068 ends_with() \u30e1\u30f3\u30d0\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002 #include <iostream> #include <string_view> constexpr bool HasPNGExtension ( std :: string_view filePath ) { // \u6587\u5b57\u5217\u304c \".png\" \u3067\u7d42\u308f\u308b\u306a\u3089 true, \u305d\u308c\u4ee5\u5916\u306f false \u3092\u8fd4\u3059 return filePath . ends_with ( \".png\" ); } int main () { std :: cout << std :: boolalpha ; std :: cout << HasPNGExtension ( \"picture.png\" ) << '\\n' ; std :: cout << HasPNGExtension ( \"photo.jpg\" ) << '\\n' ; std :: cout << HasPNGExtension ( \"music.mp3\" ) << '\\n' ; } true false false operator>>(basic_istream&, charT*) \u306e\u7b2c\u4e8c\u5f15\u6570\u3092 charT(&)[N] \u306b\u5909\u66f4\u3057\u3066\u5b89\u5168\u306b (P0487R1) C++17 \u307e\u3067\u306e operator>>(basic_istream&, charT*) \u306f\u3001\u95a2\u6570\u306b\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u304c\u6e21\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3078\u306e\u5bfe\u7b56\u304c\u5fc5\u8981\u3067\u3057\u305f\u3002 #include <iostream> #include <iomanip> int main () { char buffer [ 4 ]; // std::cin >> buffer; // \u5371\u967a: \u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u53ef\u80fd\u6027 std :: cin >> std :: setw ( 4 ) >> buffer ; // OK: \u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u5bfe\u7b56 std :: cout << buffer ; } C++20 \u3067\u306f\u5f15\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3001\u95a2\u6570\u304c\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u5bfe\u7b56\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 // C++17 \u307e\u3067 template < class charT , class traits > basic_istream < charT , traits >& operator >> ( basic_istream < charT , traits >& in , charT * s ); // C++20 \u304b\u3089 template < class charT , class traits , size_t N > basic_istream < charT , traits >& operator >> ( basic_istream < charT , traits >& in , charT ( & s )[ N ]); #include <iostream> #include <iomanip> int main () { char buffer [ 4 ]; std :: cin >> buffer ; // OK: C++20 \u3067\u306f\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u9632\u3052\u308b std :: cout << buffer ; } \u3053\u306e\u5909\u66f4\u306b\u4f34\u3044\u3001C++17 \u307e\u3067\u306f\u6709\u52b9\u3060\u3063\u305f\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3001C++20 \u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> #include <iomanip> int main () { char * p = new char [ 100 ]; std :: cin >> std :: setw ( 100 ) >> p ; // C++20 \u304b\u3089\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc std :: cout << p ; } \u623b\u308a\u5024\u306e\u7121\u8996\u304c\u4e0d\u5177\u5408\u3092\u3082\u305f\u3089\u3059\u95a2\u6570\u306b [[nodiscard]] \u3092\u4ed8\u4e0e (P0600R1) C++17 \u3067\u5c0e\u5165\u3055\u308c\u305f [[nodiscard]] \u5c5e\u6027\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u6d3b\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002C++20 \u3067\u306f\u4ed8\u4e0e\u57fa\u6e96\u3092\u300c\u623b\u308a\u5024\u306e\u7121\u8996\u304c\u30c8\u30e9\u30d6\u30eb\u3084\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306a\u3069\u306e\u91cd\u5927\u306a\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059 C++ \u306e\u95a2\u6570\u300d\u3068\u3057\u3001 async() , launder() , allocate() , empty() , operator new() \u304c\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 #include <vector> #include <future> int main () { std :: vector < int > v = { 10 , 20 , 30 }; v . empty (); // C++20 \u3067\u306f\u8b66\u544a std :: async ( std :: launch :: async , [] { return 1 ; }); // C++20 \u3067\u306f\u8b66\u544a } MSVC \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f Visual Studio 2017 15.6 \u4ee5\u964d\u3001\u898f\u683c\u306e\u7bc4\u56f2\u3092\u8d85\u3048\u3066\u3088\u308a\u591a\u304f\u306e\u95a2\u6570\uff08 2,500 \u500b\u4ee5\u4e0a \uff09\u306b [[nodiscard]] \u5c5e\u6027\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001 Chromium \u306e\u30bd\u30fc\u30b9\u306b\u7121\u610f\u5473\u306a std::move() \u304c\u898b\u3064\u304b\u308b \u306a\u3069\u3001\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30d0\u30b0\u306e\u767a\u898b\u306b\u5f79\u7acb\u3063\u3066\u3044\u307e\u3059\u3002 <array> \u30d8\u30c3\u30c0\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u306b (P1023R0) , (P1032R1) C++17 \u306e <array> \u30d8\u30c3\u30c0\u3067\u306f\u3001\u6bd4\u8f03\u6f14\u7b97\u5b50\u3001 swap() , fill() \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u3067\u3057\u305f\u3002C++20 \u3067\u306f\u3055\u3089\u306b\u3001array \u306e\u6bd4\u8f03\u6f14\u7b97\u306e\u5b9f\u88c5\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b std::equal() \u3068 std::lexicographical_compare() \u304c constexpr \u306b\u306a\u3063\u305f (P0202R3) \u3053\u3068\u306b\u3068\u3082\u306a\u3044\u3001array \u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092 constexpr \u3068\u3057\u3001\u307e\u305f swap() \u3068 fill() \u306b\u3064\u3044\u3066\u3082 constexpr \u306b\u3059\u308b\u3053\u3068\u3092\u6c7a\u3081\u3001array \u30d8\u30c3\u30c0\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u3067\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002","title":"C++20 \u306e\u65b0\u6a5f\u80fd"},{"location":"standardization/cpp20/#c20","text":"","title":"C++20 \u306e\u65b0\u6a5f\u80fd"},{"location":"standardization/cpp20/#_1","text":"","title":"\u8a00\u8a9e\u6a5f\u80fd"},{"location":"standardization/cpp20/#p0683r1","text":"#include <iostream> enum class Terrain { Open , Forest , Hill , Mountain , Desert , Tundra , River , Ocean }; struct Tile { unsigned int height : 4 = 1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092 1 \u306b Terrain terrain : 3 = Terrain :: Open ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u660e\u793a\u7684\u306b Terrain::Open \u306b bool passable : 1 = true ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092 true \u306b }; int main () { std :: cout << std :: boolalpha ; Tile tile1 ; std :: cout << tile1 . height << \", \" << static_cast < int > ( tile1 . terrain ) << \", \" << tile1 . passable << '\\n' ; Tile tile2 { 15 , Terrain :: Mountain , false }; std :: cout << tile2 . height << \", \" << static_cast < int > ( tile2 . terrain ) << \", \" << tile2 . passable << '\\n' ; } 1, 0, true 15, 3, false","title":"\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u53ef\u80fd\u306b (P0683R1)"},{"location":"standardization/cpp20/#p0704r1","text":"C++17 \u307e\u3067\u306e\u30e1\u30f3\u30d0\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50 .* \u306f\u300c\u53f3\u8fba\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3001\u5de6\u8fba\u5024\u53c2\u7167\u4fee\u98fe\u3055\u308c\u305f\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u4f7f\u3046\u3053\u3068\u306f\u4e0d\u9069\u683c\u300d\u3068\u3044\u3046\u898f\u683c\u6587\u9762\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u305f\u3081\u3001\u540c\u3058\u610f\u5473\u3092\u3082\u3064\u6b21\u306e 2 \u3064\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5f8c\u8005\u3060\u3051\u4e0d\u9069\u683c\u3068\u3055\u308c\u3001\u4e00\u8cab\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002 #include <iostream> #include <string> struct Text { std :: string m_data ; const std :: string & get () const & { return m_data ; } }; int main () { std :: cout << Text { \"Hello\" }. get () << '\\n' ; // OK std :: cout << ( Text { \"Hello\" }. *& Text :: get )() << '\\n' ; // C++17 \u307e\u3067\u306f\u4e0d\u9069\u683c\u3001C++20 \u304b\u3089 OK } C++20 \u3067\u306f\u300c\u53f3\u8fba\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3001\u5de6\u8fba\u5024\u53c2\u7167\u4fee\u98fe\u3055\u308c\u305f \"\u975e const\" \u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u4f7f\u3046\u3053\u3068\u306f\u4e0d\u9069\u683c\u300d\u3068\u6587\u9762\u3092\u4fee\u6b63\u3057\u3001\u5f8c\u8005\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u30e1\u30f3\u30d0\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50\u306e\u4ed5\u69d8\u3092\u4e00\u8cab\u6027\u306e\u305f\u3081\u306b\u4fee\u6b63 (P0704R1)"},{"location":"standardization/cpp20/#2-p1236r1","text":"\u307b\u307c\u3059\u3079\u3066\u306e\u73fe\u4ee3\u7684\u306a\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u3001\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u578b\u306e\u8ca0\u6570\u306f 2 \u306e\u88dc\u6570\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001C++ \u3067\u306f\u8ca0\u6570\u306e\u8868\u73fe\u65b9\u6cd5\u306b\u3064\u3044\u3066\u898f\u683c\u3067\u5b9a\u3081\u3066\u3044\u306a\u304b\u3063\u305f\u305f\u3081\u3001\uff08\u73fe\u5b9f\u7684\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\uff092 \u306e\u88dc\u6570\u4ee5\u5916\u3067\u8ca0\u6570\u8868\u73fe\u3092\u5b9f\u88c5\u3059\u308b\u4f59\u5730\u3082\u6b8b\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002C++20 \u304b\u3089\u306f 2 \u306e\u88dc\u6570\u306e\u307f\u3092\u8a31\u53ef\u3059\u308b\u3088\u3046\u898f\u683c\u6587\u8a00\u304c\u4fee\u6b63\u3055\u308c\u307e\u3057\u305f\u3002 \u8fd1\u5e74\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067 2 \u306e\u88dc\u6570\u4ee5\u5916\u3092\u4f7f\u3046\u4f8b\u306f\u30011 \u306e\u88dc\u6570\u3092\u4f7f\u3046 Unisys 2200 \u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u904e\u53bb\u306b\u306f\u7b26\u53f7\u3068\u7d76\u5bfe\u5024\u3067\u8868\u73fe\u3059\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3082\u3042\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306f\u30e2\u30c0\u30f3\u306a C++ \u3092\u958b\u767a\u74b0\u5883\u3068\u3057\u3066\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u898f\u683c\u5909\u66f4\u306b\u3088\u308b\u5f71\u97ff\u306f\u7121\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002","title":"\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u578b\u306e\u8ca0\u6570\u8868\u73fe\u3092 2 \u306e\u88dc\u6570\u3068\u898f\u5b9a (P1236R1)"},{"location":"standardization/cpp20/#8-bit-2","text":"10 \u9032\u8868\u73fe 2 \u306e\u88dc\u6570 1 \u306e\u88dc\u6570 \u7b26\u53f7\u3068\u7d76\u5bfe\u5024 127 01111111 01111111 01111111 126 01111110 01111110 01111110 125 01111101 01111101 01111101 2 00000010 00000010 00000010 1 00000001 00000001 00000001 0 00000000 00000000 00000000 -0 11111111 10000000 -1 11111111 11111110 10000001 -2 11111110 11111101 10000010 -126 10000010 10000001 11111110 -127 10000001 10000000 11111111 -128 10000000","title":"\uff08\u53c2\u8003\uff09\u7b26\u53f7\u4ed8\u304d 8-bit \u6574\u6570\u306e 2 \u9032\u8868\u73fe"},{"location":"standardization/cpp20/#0-no_unique_address-p0840r2","text":"\u30a2\u30ed\u30b1\u30fc\u30bf\u306a\u3069\u3092\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3068\u3057\u3066\u4fdd\u6301\u3059\u308b\u3068\u304d\u3001\u305d\u308c\u304c\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306a\u7a7a\u306e\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u4e00\u610f\u306b\u7528\u610f\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u305f\u3081\u3001\u30b5\u30a4\u30ba\u3092 0 \u306b\u3067\u304d\u305a\u30e1\u30e2\u30ea\u6d88\u8cbb\u304c\u7121\u99c4\u306b\u5897\u3048\u3066\u3057\u307e\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u3002 #include <iostream> struct Empty {}; struct X { int i ; Empty e ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 \u3088\u308a\u5927\u304d\u3044 } \u3053\u308c\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u300c\u7a7a\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306f\u6700\u9069\u5316\u306b\u3088\u3063\u3066\u30b5\u30a4\u30ba 0 \u306b\u3057\u3066\u3088\u3044\u300d\u3068\u3044\u3046\u4ed5\u69d8\u3092\u5229\u7528\u3057\u305f Empty Base Optimization (EBO) \u3068\u3044\u3046\u30c6\u30af\u30cb\u30c3\u30af\u304c\u3042\u308a\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3082\u3000 std::unique_ptr \u3084 std::shared_ptr , std::vector \u306a\u3069\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002 #include <iostream> struct Empty {}; struct X : public Empty { int i ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 } \u3057\u304b\u3057\u3001\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u3067\u7d99\u627f\u306b\u3088\u308b EBO \u3092\u5b9f\u88c5\u3059\u308b\u3068\u30b3\u30fc\u30c9\u304c\u8907\u96d1\u306b\u306a\u308b\u3068\u3044\u3046\u6b20\u70b9\u304c\u3042\u308a\u307e\u3057\u305f\u3002C++20 \u3067\u306f\u30e1\u30f3\u30d0\u306e\u5ba3\u8a00\u306b [[no_unique_address]] \u5c5e\u6027\u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u7d99\u627f\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30e9\u304c EBO \u3068\u540c\u3058\u3088\u3046\u306a\u6700\u9069\u5316\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u5f93\u6765\u306e\u7d99\u627f\u306b\u3088\u308b EBO \u3092\u4f7f\u3063\u3066\u3044\u305f\u30b3\u30fc\u30c9\u3092\u3001\u3088\u308a\u5358\u7d14\u306a\u30b3\u30fc\u30c9\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002 #include <iostream> struct Empty {}; struct X { int i ; [[ no_unique_address ]] Empty e ; }; int main () { std :: cout << sizeof ( X ) << '\\n' ; // 4 }","title":"\u30e1\u30f3\u30d0\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7a7a\u306e\u30af\u30e9\u30b9\u306e\u5834\u5408\u306b\u30e1\u30e2\u30ea\u6d88\u8cbb\u3092 0 \u306b\u3067\u304d\u308b [[no_unique_address]] \u5c5e\u6027\u3092\u8ffd\u52a0 (P0840R2)"},{"location":"standardization/cpp20/#_2","text":"","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"standardization/cpp20/#p0457r2","text":"std::basic_string \u3068 std::basic_string_view \u306b\u3001 starts_with() \u3068 ends_with() \u30e1\u30f3\u30d0\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002 #include <iostream> #include <string_view> constexpr bool HasPNGExtension ( std :: string_view filePath ) { // \u6587\u5b57\u5217\u304c \".png\" \u3067\u7d42\u308f\u308b\u306a\u3089 true, \u305d\u308c\u4ee5\u5916\u306f false \u3092\u8fd4\u3059 return filePath . ends_with ( \".png\" ); } int main () { std :: cout << std :: boolalpha ; std :: cout << HasPNGExtension ( \"picture.png\" ) << '\\n' ; std :: cout << HasPNGExtension ( \"photo.jpg\" ) << '\\n' ; std :: cout << HasPNGExtension ( \"music.mp3\" ) << '\\n' ; } true false false","title":"\u6587\u5b57\u5217\u306e\u5148\u982d\u3084\u672b\u5c3e\u304c\u3001\u3042\u308b\u6587\u5b57\u5217\u3068\u4e00\u81f4\u3059\u308b\u304b\u5224\u5b9a (P0457R2)"},{"location":"standardization/cpp20/#operatorbasic_istream-chart-chartn-p0487r1","text":"C++17 \u307e\u3067\u306e operator>>(basic_istream&, charT*) \u306f\u3001\u95a2\u6570\u306b\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u304c\u6e21\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3078\u306e\u5bfe\u7b56\u304c\u5fc5\u8981\u3067\u3057\u305f\u3002 #include <iostream> #include <iomanip> int main () { char buffer [ 4 ]; // std::cin >> buffer; // \u5371\u967a: \u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u53ef\u80fd\u6027 std :: cin >> std :: setw ( 4 ) >> buffer ; // OK: \u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u5bfe\u7b56 std :: cout << buffer ; } C++20 \u3067\u306f\u5f15\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3001\u95a2\u6570\u304c\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u5bfe\u7b56\u3092\u5b9f\u88c5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 // C++17 \u307e\u3067 template < class charT , class traits > basic_istream < charT , traits >& operator >> ( basic_istream < charT , traits >& in , charT * s ); // C++20 \u304b\u3089 template < class charT , class traits , size_t N > basic_istream < charT , traits >& operator >> ( basic_istream < charT , traits >& in , charT ( & s )[ N ]); #include <iostream> #include <iomanip> int main () { char buffer [ 4 ]; std :: cin >> buffer ; // OK: C++20 \u3067\u306f\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u9632\u3052\u308b std :: cout << buffer ; } \u3053\u306e\u5909\u66f4\u306b\u4f34\u3044\u3001C++17 \u307e\u3067\u306f\u6709\u52b9\u3060\u3063\u305f\u6b21\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3001C++20 \u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> #include <iomanip> int main () { char * p = new char [ 100 ]; std :: cin >> std :: setw ( 100 ) >> p ; // C++20 \u304b\u3089\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc std :: cout << p ; }","title":"operator&gt;&gt;(basic_istream&amp;, charT*) \u306e\u7b2c\u4e8c\u5f15\u6570\u3092 charT(&amp;)[N] \u306b\u5909\u66f4\u3057\u3066\u5b89\u5168\u306b (P0487R1)"},{"location":"standardization/cpp20/#nodiscard-p0600r1","text":"C++17 \u3067\u5c0e\u5165\u3055\u308c\u305f [[nodiscard]] \u5c5e\u6027\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u6d3b\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002C++20 \u3067\u306f\u4ed8\u4e0e\u57fa\u6e96\u3092\u300c\u623b\u308a\u5024\u306e\u7121\u8996\u304c\u30c8\u30e9\u30d6\u30eb\u3084\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306a\u3069\u306e\u91cd\u5927\u306a\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059 C++ \u306e\u95a2\u6570\u300d\u3068\u3057\u3001 async() , launder() , allocate() , empty() , operator new() \u304c\u5bfe\u8c61\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 #include <vector> #include <future> int main () { std :: vector < int > v = { 10 , 20 , 30 }; v . empty (); // C++20 \u3067\u306f\u8b66\u544a std :: async ( std :: launch :: async , [] { return 1 ; }); // C++20 \u3067\u306f\u8b66\u544a } MSVC \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f Visual Studio 2017 15.6 \u4ee5\u964d\u3001\u898f\u683c\u306e\u7bc4\u56f2\u3092\u8d85\u3048\u3066\u3088\u308a\u591a\u304f\u306e\u95a2\u6570\uff08 2,500 \u500b\u4ee5\u4e0a \uff09\u306b [[nodiscard]] \u5c5e\u6027\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001 Chromium \u306e\u30bd\u30fc\u30b9\u306b\u7121\u610f\u5473\u306a std::move() \u304c\u898b\u3064\u304b\u308b \u306a\u3069\u3001\u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30d0\u30b0\u306e\u767a\u898b\u306b\u5f79\u7acb\u3063\u3066\u3044\u307e\u3059\u3002","title":"\u623b\u308a\u5024\u306e\u7121\u8996\u304c\u4e0d\u5177\u5408\u3092\u3082\u305f\u3089\u3059\u95a2\u6570\u306b [[nodiscard]] \u3092\u4ed8\u4e0e (P0600R1)"},{"location":"standardization/cpp20/#array-constexpr-p1023r0-p1032r1","text":"C++17 \u306e <array> \u30d8\u30c3\u30c0\u3067\u306f\u3001\u6bd4\u8f03\u6f14\u7b97\u5b50\u3001 swap() , fill() \u4ee5\u5916\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u3067\u3057\u305f\u3002C++20 \u3067\u306f\u3055\u3089\u306b\u3001array \u306e\u6bd4\u8f03\u6f14\u7b97\u306e\u5b9f\u88c5\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b std::equal() \u3068 std::lexicographical_compare() \u304c constexpr \u306b\u306a\u3063\u305f (P0202R3) \u3053\u3068\u306b\u3068\u3082\u306a\u3044\u3001array \u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\u3092 constexpr \u3068\u3057\u3001\u307e\u305f swap() \u3068 fill() \u306b\u3064\u3044\u3066\u3082 constexpr \u306b\u3059\u308b\u3053\u3068\u3092\u6c7a\u3081\u3001array \u30d8\u30c3\u30c0\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u3067\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002","title":"&lt;array&gt; \u30d8\u30c3\u30c0\u306e\u3059\u3079\u3066\u306e\u95a2\u6570\u304c constexpr \u306b (P1023R0), (P1032R1)"},{"location":"standardization/cppx/","text":"C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848 \u8b70\u8ad6\u304c\u9032\u884c\u4e2d\u306e\u304a\u3082\u306a\u63d0\u6848\u3067\u3059\u3002\u6a19\u6e96\u5316\u4f1a\u8b70\u306b\u3088\u3063\u3066\u898f\u683c\u5316\u304c\u59a5\u5f53\u3067\u306a\u3044\u3068\u5224\u65ad\u3055\u308c\u305f\u5834\u5408\u306f\u63a1\u629e\u3055\u308c\u307e\u305b\u3093\u3002 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u30e2\u30b8\u30e5\u30fc\u30eb Standard Library Modules (P0581) <iostream> \u3084 <vector> \u306a\u3069\u3001\u3059\u3079\u3066\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30d8\u30c3\u30c0\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u63d0\u4f9b\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u8a00\u8a9e\u6a5f\u80fd\u3068\u3057\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f C++20 \u306b\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3078\u306e\u5c0e\u5165\u306f\u8b70\u8ad6\u304c\u9593\u306b\u5408\u308f\u305a\u3001C++23 \u306b\u5148\u9001\u308a\u3055\u308c\u307e\u3057\u305f\u3002\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u306e\u79fb\u884c\u306b\u5408\u308f\u305b\u3066\u3001 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u518d\u7de8\u6210\u3059\u308b\u63d0\u6848 \u3082\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002 operator[] \u306b\u8907\u6570\u306e\u5f15\u6570 Subscripts On Parade (P1277) m[i, j, k] \u306e\u3088\u3046\u306b\u3001 operator[] \u306e\u5f15\u6570\u306b\u8907\u6570\u306e\u5024\u3092\u6e21\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u591a\u6b21\u5143\u914d\u5217\u306e\u8981\u7d20\u306b\u7c21\u6f54\u306a\u5f0f\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u66f8\u304d\u65b9\u306f\u3001C++17 \u898f\u683c\u3067\u306f\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u3068\u89e3\u91c8\u3055\u308c\u3066 m[k] \u306b\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u307e\u305a\u306f \u73fe\u884c\u306e\u6587\u6cd5\u3092 deprecated \u306b\u3059\u308b\u63d0\u6848 \u304c\u63d0\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002 std::span \u306e\u591a\u6b21\u5143\u7248\u3067\u3042\u308b std::mdspan \u306e\u63d0\u6848 \u3067\u306e\u6d3b\u7528\u3082\u671f\u5f85\u3055\u308c\u307e\u3059\u3002 \u4f4e\u30ec\u30d9\u30eb \u30aa\u30fc\u30c7\u30a3\u30aa API A Standard Audio API for C++: Motivation, Scope, and Basic Design (P1386) \u97f3\u58f0\u518d\u751f\u30fb\u9332\u97f3\u3092\u884c\u3046\u4f4e\u30ec\u30d9\u30eb API std::audio \u3092\u8ffd\u52a0\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u4ee5\u524d\u9813\u632b\u3057\u305f 2D Graphics API \u306e\u6a19\u6e96\u5316\u306b\u6bd4\u3079\u308c\u3070\u3001\u67af\u308c\u3066\u3044\u308b\u6280\u8853\u306a\u306e\u3067\u5b9f\u73fe\u53ef\u80fd\u6027\u306f\u4f4e\u304f\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30d0\u30a4\u30b9\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u3053\u3068\u304c\u4e3b\u8981\u306a\u5f79\u5272\u3067\u3001\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3084\u30d5\u30a3\u30eb\u30bf\u306a\u3069\u306e\u6a5f\u80fd\u306f\u63d0\u4f9b\u3057\u307e\u305b\u3093\u3002 \u5b9f\u9a13\u7684\u306a\u5b9f\u88c5\u3092\u516c\u958b \u3057\u3066\u3001\u8a2d\u8a08\u306b\u95a2\u3059\u308b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u96c6\u3081\u3066\u3044\u308b\u6bb5\u968e\u3067\u3059\u3002 \u30cd\u30c3\u30c8\u30ef\u30fc\u30af Working Draft, C++ Extensions for Networking (N4734) \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u6a5f\u80fd\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5c0e\u5165\u3059\u308b\u63d0\u6848\u3067\u3059\u3002 Boost.Asio \u3092\u30d9\u30fc\u30b9\u306b\u3001\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3001\u540d\u524d\u89e3\u6c7a\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u30bf\u30a4\u30de\u30fc\u3001\u30d0\u30c3\u30d5\u30a1\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u305f\u3081\u306e\u5404\u7a2e\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002 \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3 Working Draft, C++ Extensions for Re\ufb02ection (N4766) C++ \u306b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u5c0e\u5165\u3059\u308b\u63d0\u6848\u3067\u3059\u3002C# \u306e\u3088\u3046\u306a\u52d5\u7684\u306a\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u9759\u7684\u306a\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002 #include <experimental/reflect> using namespace std :: experimental :: reflect ; constexpr void f ( int arg1 , int arg2 ); using f_mobj = reflexpr ( f ( 0 , 1 )); auto name = get_name_v < get_element_t < 0 , get_parameters_t < f_mobj >>> ; // \"arg1\" auto is_constexpr_function = is_constexpr < f_mobj >:: value ; // true \u3053\u306e\u6a5f\u80fd\u3092\u524d\u63d0\u3068\u3057\u305f \u30e1\u30bf\u30af\u30e9\u30b9\u306e\u63d0\u6848 \u3082\u8b70\u8ad6\u304c\u9032\u3093\u3067\u3044\u307e\u3059\u3002 Executors","title":"C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848"},{"location":"standardization/cppx/#c23","text":"\u8b70\u8ad6\u304c\u9032\u884c\u4e2d\u306e\u304a\u3082\u306a\u63d0\u6848\u3067\u3059\u3002\u6a19\u6e96\u5316\u4f1a\u8b70\u306b\u3088\u3063\u3066\u898f\u683c\u5316\u304c\u59a5\u5f53\u3067\u306a\u3044\u3068\u5224\u65ad\u3055\u308c\u305f\u5834\u5408\u306f\u63a1\u629e\u3055\u308c\u307e\u305b\u3093\u3002","title":"C++23 \u4ee5\u964d\u306b\u5411\u3051\u305f\u63d0\u6848"},{"location":"standardization/cppx/#_1","text":"Standard Library Modules (P0581) <iostream> \u3084 <vector> \u306a\u3069\u3001\u3059\u3079\u3066\u306e C++ \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u30d8\u30c3\u30c0\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u63d0\u4f9b\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u8a00\u8a9e\u6a5f\u80fd\u3068\u3057\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f C++20 \u306b\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3078\u306e\u5c0e\u5165\u306f\u8b70\u8ad6\u304c\u9593\u306b\u5408\u308f\u305a\u3001C++23 \u306b\u5148\u9001\u308a\u3055\u308c\u307e\u3057\u305f\u3002\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u306e\u79fb\u884c\u306b\u5408\u308f\u305b\u3066\u3001 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u518d\u7de8\u6210\u3059\u308b\u63d0\u6848 \u3082\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u30e2\u30b8\u30e5\u30fc\u30eb"},{"location":"standardization/cppx/#operator","text":"Subscripts On Parade (P1277) m[i, j, k] \u306e\u3088\u3046\u306b\u3001 operator[] \u306e\u5f15\u6570\u306b\u8907\u6570\u306e\u5024\u3092\u6e21\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u591a\u6b21\u5143\u914d\u5217\u306e\u8981\u7d20\u306b\u7c21\u6f54\u306a\u5f0f\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u66f8\u304d\u65b9\u306f\u3001C++17 \u898f\u683c\u3067\u306f\u30b3\u30f3\u30de\u6f14\u7b97\u5b50\u3068\u89e3\u91c8\u3055\u308c\u3066 m[k] \u306b\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u307e\u305a\u306f \u73fe\u884c\u306e\u6587\u6cd5\u3092 deprecated \u306b\u3059\u308b\u63d0\u6848 \u304c\u63d0\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002 std::span \u306e\u591a\u6b21\u5143\u7248\u3067\u3042\u308b std::mdspan \u306e\u63d0\u6848 \u3067\u306e\u6d3b\u7528\u3082\u671f\u5f85\u3055\u308c\u307e\u3059\u3002","title":"operator[] \u306b\u8907\u6570\u306e\u5f15\u6570"},{"location":"standardization/cppx/#api","text":"A Standard Audio API for C++: Motivation, Scope, and Basic Design (P1386) \u97f3\u58f0\u518d\u751f\u30fb\u9332\u97f3\u3092\u884c\u3046\u4f4e\u30ec\u30d9\u30eb API std::audio \u3092\u8ffd\u52a0\u3059\u308b\u63d0\u6848\u3067\u3059\u3002\u4ee5\u524d\u9813\u632b\u3057\u305f 2D Graphics API \u306e\u6a19\u6e96\u5316\u306b\u6bd4\u3079\u308c\u3070\u3001\u67af\u308c\u3066\u3044\u308b\u6280\u8853\u306a\u306e\u3067\u5b9f\u73fe\u53ef\u80fd\u6027\u306f\u4f4e\u304f\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30d0\u30a4\u30b9\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u3053\u3068\u304c\u4e3b\u8981\u306a\u5f79\u5272\u3067\u3001\u97f3\u58f0\u30b3\u30fc\u30c7\u30c3\u30af\u3084\u30d5\u30a3\u30eb\u30bf\u306a\u3069\u306e\u6a5f\u80fd\u306f\u63d0\u4f9b\u3057\u307e\u305b\u3093\u3002 \u5b9f\u9a13\u7684\u306a\u5b9f\u88c5\u3092\u516c\u958b \u3057\u3066\u3001\u8a2d\u8a08\u306b\u95a2\u3059\u308b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u96c6\u3081\u3066\u3044\u308b\u6bb5\u968e\u3067\u3059\u3002","title":"\u4f4e\u30ec\u30d9\u30eb \u30aa\u30fc\u30c7\u30a3\u30aa API"},{"location":"standardization/cppx/#_2","text":"Working Draft, C++ Extensions for Networking (N4734) \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u6a5f\u80fd\u3092\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5c0e\u5165\u3059\u308b\u63d0\u6848\u3067\u3059\u3002 Boost.Asio \u3092\u30d9\u30fc\u30b9\u306b\u3001\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3001\u540d\u524d\u89e3\u6c7a\u3001\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u30bf\u30a4\u30de\u30fc\u3001\u30d0\u30c3\u30d5\u30a1\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u305f\u3081\u306e\u5404\u7a2e\u6a5f\u80fd\u3092\u5b9f\u88c5\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002","title":"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af"},{"location":"standardization/cppx/#_3","text":"Working Draft, C++ Extensions for Re\ufb02ection (N4766) C++ \u306b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u5c0e\u5165\u3059\u308b\u63d0\u6848\u3067\u3059\u3002C# \u306e\u3088\u3046\u306a\u52d5\u7684\u306a\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u9759\u7684\u306a\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002 #include <experimental/reflect> using namespace std :: experimental :: reflect ; constexpr void f ( int arg1 , int arg2 ); using f_mobj = reflexpr ( f ( 0 , 1 )); auto name = get_name_v < get_element_t < 0 , get_parameters_t < f_mobj >>> ; // \"arg1\" auto is_constexpr_function = is_constexpr < f_mobj >:: value ; // true \u3053\u306e\u6a5f\u80fd\u3092\u524d\u63d0\u3068\u3057\u305f \u30e1\u30bf\u30af\u30e9\u30b9\u306e\u63d0\u6848 \u3082\u8b70\u8ad6\u304c\u9032\u3093\u3067\u3044\u307e\u3059\u3002","title":"\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3"},{"location":"standardization/cppx/#executors","text":"","title":"Executors"},{"location":"standardization/meetings/","text":"\u6a19\u6e96\u5316\u4f1a\u8b70 C++ \u306e\u898f\u683c\u3092\u8b70\u8ad6\u3059\u308b C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u4e3b\u8981\u4f1a\u8b70\u306e\u958b\u50ac\u60c5\u5831\u3067\u3059\u3002 2021 Kona 2021-02 | \u30b3\u30ca, \u30cf\u30ef\u30a4 2020 New York (\u4e88\u5b9a) 2020-11 | \u30cb\u30e5\u30fc\u30e8\u30fc\u30af 2020 Bulgaria 2020-06-01 \uff5e 2020-02-15 | \u30d6\u30eb\u30ac\u30ea\u30a2 2020 Prague 2020-02-10 \uff5e 2020-02-15 | \u30d7\u30e9\u30cf, \u30c1\u30a7\u30b3 2019 Belfast 2019-11-04 \uff5e 2019-11-09 | \u30d9\u30eb\u30d5\u30a1\u30b9\u30c8, \u5317\u30a2\u30a4\u30eb\u30e9\u30f3\u30c9 2019 Cologne 2019-07-15 \uff5e 2019-07-20 | \u30b1\u30eb\u30f3, \u30c9\u30a4\u30c4 2019 Kona 2019-02-18 \uff5e 2019-02-23 | \u30b3\u30ca, \u30cf\u30ef\u30a4 \u89e3\u8aac \u30b3\u30eb\u30fc\u30c1\u30f3\u3068\u3001C++23 \u4ee5\u964d\u3078\u306e\u5148\u9001\u308a\u304c\u898b\u8fbc\u307e\u308c\u3066\u3044\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e C++20 \u5165\u308a\u304c\u627f\u8a8d\u3055\u308c\u3001C++20 \u306f C++11 \u4ee5\u6765\u306e\u5927\u578b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u306a\u308b\u3053\u3068\u304c\u6c7a\u307e\u308a\u307e\u3057\u305f\u3002 C++20 \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb \u3067\u306f\u3001\u3053\u306e\u4f1a\u8b70\u3092\u3082\u3063\u3066\u300cFeature Freeze\u300d\u306b\u306a\u308a\u307e\u3059\u3002\u4ed5\u69d8\u6587\u8a00\u306e\u30ec\u30d3\u30e5\u30fc\u304c\u672a\u5b8c\u4e86\u306e\u5c0f\u898f\u6a21\u306a\u63d0\u6848\u3092\u6b21\u56de\u306e Colonge \u4f1a\u8b70\u3067\u627f\u8a8d\u3057\u3066\u3001C++20 \u306e\u5168\u5bb9\u304c\u8f09\u3063\u305f\u898f\u683c\u30c9\u30e9\u30d5\u30c8\u304c\u3067\u304d\u3042\u304c\u308a\u307e\u3059\u3002 \u63d0\u6848\u4e00\u89a7 JTC1/SC22/WG21 - Papers 2019 mailing2019-01 \u53c2\u52a0\u5831\u544a 2019-02 Kona ISO C++ Committee Trip Report by Bryce Lelbach and others Trip report: Winter ISO C++ standards meeting (Kona) by Herb Sutter Kona: A trip report by Corentin Trip report: February 2019 ISO C++ committee meeting, Kona, Hawai\u2019i by Timur Doumler Telescopes and matrices and audio: Kona trip report by Guy Davidson Trip Report: Freestanding (and Modules) in Kona by Bryce Lelbach 2018 San Diego 2018 Rapperswil 2018 Jacksonville 2017 Albuquerque 2017 Toronto 2017 Kona \u53c2\u8003\u6587\u732e Upcoming Meetings, Past Meetings https://isocpp.org/std/meetings-and-participation/upcoming-meetings","title":"\u6a19\u6e96\u5316\u4f1a\u8b70"},{"location":"standardization/meetings/#_1","text":"C++ \u306e\u898f\u683c\u3092\u8b70\u8ad6\u3059\u308b C++ \u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306e\u4e3b\u8981\u4f1a\u8b70\u306e\u958b\u50ac\u60c5\u5831\u3067\u3059\u3002","title":"\u6a19\u6e96\u5316\u4f1a\u8b70"},{"location":"standardization/meetings/#2021-kona","text":"2021-02 | \u30b3\u30ca, \u30cf\u30ef\u30a4","title":"2021 Kona"},{"location":"standardization/meetings/#2020-new-york","text":"2020-11 | \u30cb\u30e5\u30fc\u30e8\u30fc\u30af","title":"2020 New York (\u4e88\u5b9a)"},{"location":"standardization/meetings/#2020-bulgaria","text":"2020-06-01 \uff5e 2020-02-15 | \u30d6\u30eb\u30ac\u30ea\u30a2","title":"2020 Bulgaria"},{"location":"standardization/meetings/#2020-prague","text":"2020-02-10 \uff5e 2020-02-15 | \u30d7\u30e9\u30cf, \u30c1\u30a7\u30b3","title":"2020 Prague"},{"location":"standardization/meetings/#2019-belfast","text":"2019-11-04 \uff5e 2019-11-09 | \u30d9\u30eb\u30d5\u30a1\u30b9\u30c8, \u5317\u30a2\u30a4\u30eb\u30e9\u30f3\u30c9","title":"2019 Belfast"},{"location":"standardization/meetings/#2019-cologne","text":"2019-07-15 \uff5e 2019-07-20 | \u30b1\u30eb\u30f3, \u30c9\u30a4\u30c4","title":"2019 Cologne"},{"location":"standardization/meetings/#2019-kona","text":"2019-02-18 \uff5e 2019-02-23 | \u30b3\u30ca, \u30cf\u30ef\u30a4","title":"2019 Kona"},{"location":"standardization/meetings/#_2","text":"\u30b3\u30eb\u30fc\u30c1\u30f3\u3068\u3001C++23 \u4ee5\u964d\u3078\u306e\u5148\u9001\u308a\u304c\u898b\u8fbc\u307e\u308c\u3066\u3044\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e C++20 \u5165\u308a\u304c\u627f\u8a8d\u3055\u308c\u3001C++20 \u306f C++11 \u4ee5\u6765\u306e\u5927\u578b\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u306a\u308b\u3053\u3068\u304c\u6c7a\u307e\u308a\u307e\u3057\u305f\u3002 C++20 \u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb \u3067\u306f\u3001\u3053\u306e\u4f1a\u8b70\u3092\u3082\u3063\u3066\u300cFeature Freeze\u300d\u306b\u306a\u308a\u307e\u3059\u3002\u4ed5\u69d8\u6587\u8a00\u306e\u30ec\u30d3\u30e5\u30fc\u304c\u672a\u5b8c\u4e86\u306e\u5c0f\u898f\u6a21\u306a\u63d0\u6848\u3092\u6b21\u56de\u306e Colonge \u4f1a\u8b70\u3067\u627f\u8a8d\u3057\u3066\u3001C++20 \u306e\u5168\u5bb9\u304c\u8f09\u3063\u305f\u898f\u683c\u30c9\u30e9\u30d5\u30c8\u304c\u3067\u304d\u3042\u304c\u308a\u307e\u3059\u3002","title":"\u89e3\u8aac"},{"location":"standardization/meetings/#_3","text":"JTC1/SC22/WG21 - Papers 2019 mailing2019-01","title":"\u63d0\u6848\u4e00\u89a7"},{"location":"standardization/meetings/#_4","text":"2019-02 Kona ISO C++ Committee Trip Report by Bryce Lelbach and others Trip report: Winter ISO C++ standards meeting (Kona) by Herb Sutter Kona: A trip report by Corentin Trip report: February 2019 ISO C++ committee meeting, Kona, Hawai\u2019i by Timur Doumler Telescopes and matrices and audio: Kona trip report by Guy Davidson Trip Report: Freestanding (and Modules) in Kona by Bryce Lelbach","title":"\u53c2\u52a0\u5831\u544a"},{"location":"standardization/meetings/#2018-san-diego","text":"","title":"2018 San Diego"},{"location":"standardization/meetings/#2018-rapperswil","text":"","title":"2018 Rapperswil"},{"location":"standardization/meetings/#2018-jacksonville","text":"","title":"2018 Jacksonville"},{"location":"standardization/meetings/#2017-albuquerque","text":"","title":"2017 Albuquerque"},{"location":"standardization/meetings/#2017-toronto","text":"","title":"2017 Toronto"},{"location":"standardization/meetings/#2017-kona","text":"","title":"2017 Kona"},{"location":"standardization/meetings/#_5","text":"Upcoming Meetings, Past Meetings https://isocpp.org/std/meetings-and-participation/upcoming-meetings","title":"\u53c2\u8003\u6587\u732e"},{"location":"standardization/status/","text":"\u51e6\u7406\u7cfb\u306e\u5bfe\u5fdc\u72b6\u6cc1 \u51e6\u7406\u7cfb\u306e\u6bd4\u8f03\u8868 C++ compiler support C++20 GCC: C++2a Support in GCC libstdc++: C++ 202a Clang: C++2a implementation status libc++: libc++ C++2a Status Microsoft Visaul C++: Visual C++ Language Conformance C++17 GCC: C++17 Support in GCC libstdc++: C++ 2017 Clang: C++17 implementation status libc++: libc++ C++17 Status Microsoft Visaul C++: Visual C++ Language Conformance C++14 GCC: C++14 Support in GCC libstdc++: C++ 2014 Clang: C++14 implementation status libc++: libc++ C++14 Status Microsoft Visaul C++: Visual C++ Language Conformance","title":"\u51e6\u7406\u7cfb\u306e\u5bfe\u5fdc\u72b6\u6cc1"},{"location":"standardization/status/#_1","text":"","title":"\u51e6\u7406\u7cfb\u306e\u5bfe\u5fdc\u72b6\u6cc1"},{"location":"standardization/status/#_2","text":"C++ compiler support","title":"\u51e6\u7406\u7cfb\u306e\u6bd4\u8f03\u8868"},{"location":"standardization/status/#c20","text":"GCC: C++2a Support in GCC libstdc++: C++ 202a Clang: C++2a implementation status libc++: libc++ C++2a Status Microsoft Visaul C++: Visual C++ Language Conformance","title":"C++20"},{"location":"standardization/status/#c17","text":"GCC: C++17 Support in GCC libstdc++: C++ 2017 Clang: C++17 implementation status libc++: libc++ C++17 Status Microsoft Visaul C++: Visual C++ Language Conformance","title":"C++17"},{"location":"standardization/status/#c14","text":"GCC: C++14 Support in GCC libstdc++: C++ 2014 Clang: C++14 implementation status libc++: libc++ C++14 Status Microsoft Visaul C++: Visual C++ Language Conformance","title":"C++14"},{"location":"tools/onlinecompilers/","text":"\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9 \u958b\u767a\u74b0\u5883 C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u5b9f\u884c\u304c\u3067\u304d\u308b Web \u30b5\u30a4\u30c8\u3067\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9 \u65e5\u672c\u8a9e\u5165\u51fa\u529b \u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6 \u8907\u6570\u30d5\u30a1\u30a4\u30eb Share Wandbox gcc HEAD 9.0.1, Clang HEAD 9.0.0 repl.it Clang 6.0.0 paiza.io Clang 6.0.0 Ideone gcc 6.3.0 C++ Shell gcc 4.9.2 C++ Insights: \u30bd\u30fc\u30b9 \u2192 \u30bd\u30fc\u30b9\u5909\u63db C++ Insights \u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u3001range-based for, \u69cb\u9020\u5316\u675f\u7e1b\u306a\u3069\u3067\u4f55\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u306e\u304b\u3092\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5358\u7d14\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u5206\u89e3\u3059\u308b\u3053\u3068\u3067\u53ef\u8996\u5316\u3059\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u306e\u30c4\u30fc\u30eb\u3067\u3059\u3002 \u5165\u529b\u4f8b #include <cstdio> int main () { const char arr [ 10 ]{ 2 , 4 , 6 , 8 }; for ( const char & c : arr ) { printf ( \"c=%c \\n \" , c ); } } \u51fa\u529b #include <cstdio> int main () { const char arr [ 10 ] = { 2 , 4 , 6 , 8 , '\\0' , '\\0' , '\\0' , '\\0' , '\\0' , '\\0' }; { char const ( & __range1 )[ 10 ] = arr ; const char * __begin1 = __range1 ; const char * __end1 = __range1 + 10l ; for ( ; __begin1 != __end1 ; ++ __begin1 ) { const char & c = * __begin1 ; printf ( \"c=%c \\n \" , static_cast < int > ( c )); } } } Compiler Explorer: \u30bd\u30fc\u30b9 \u2192 \u30a2\u30bb\u30f3\u30d6\u30ea\u5909\u63db \u6982\u8981 Compiler Explorer \u306f\u3001C, C++, Rust, Swift \u306a\u3069\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u8868\u793a\u3059\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002\u8907\u6570\u30bf\u30d6\u3092\u4f7f\u3063\u3066\u3001GCC, Clang, MSVC, ICC \u306a\u3069\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3084\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5909\u3048\u305f\u3068\u304d\u306e\u7d50\u679c\u3092\u6bd4\u8f03\u3067\u304d\u307e\u3059\u3002 \u5165\u529b\u4f8b int square ( int num ) { return num * num ; } \u51fa\u529b square ( int ): push rbp mov rbp , rsp mov DWORD PTR [ rbp-4 ], edi mov eax , DWORD PTR [ rbp-4 ] imul eax , DWORD PTR [ rbp-4 ] pop rbp ret URL \u304b\u3089\u30a4\u30f3\u30af\u30eb\u30fc\u30c9 Compiler Explorer \u306b\u306f\u3001Web \u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092 #include \"URL\" \u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u308b\u72ec\u81ea\u62e1\u5f35\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001GitHub \u306a\u3069\u306b\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30b7\u30f3\u30b0\u30eb\u30d8\u30c3\u30c0\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e2d\u3067\u7c21\u5358\u306b\u4f7f\u3048\u307e\u3059\uff08\u4f8b: https://godbolt.org/z/OV-vGQ \uff09","title":"\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9"},{"location":"tools/onlinecompilers/#_1","text":"","title":"\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9"},{"location":"tools/onlinecompilers/#_2","text":"C++ \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u5b9f\u884c\u304c\u3067\u304d\u308b Web \u30b5\u30a4\u30c8\u3067\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9 \u65e5\u672c\u8a9e\u5165\u51fa\u529b \u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6 \u8907\u6570\u30d5\u30a1\u30a4\u30eb Share Wandbox gcc HEAD 9.0.1, Clang HEAD 9.0.0 repl.it Clang 6.0.0 paiza.io Clang 6.0.0 Ideone gcc 6.3.0 C++ Shell gcc 4.9.2","title":"\u958b\u767a\u74b0\u5883"},{"location":"tools/onlinecompilers/#c-insights","text":"C++ Insights \u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u3001range-based for, \u69cb\u9020\u5316\u675f\u7e1b\u306a\u3069\u3067\u4f55\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u306e\u304b\u3092\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5358\u7d14\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u5206\u89e3\u3059\u308b\u3053\u3068\u3067\u53ef\u8996\u5316\u3059\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u306e\u30c4\u30fc\u30eb\u3067\u3059\u3002","title":"C++ Insights: \u30bd\u30fc\u30b9 \u2192 \u30bd\u30fc\u30b9\u5909\u63db"},{"location":"tools/onlinecompilers/#_3","text":"#include <cstdio> int main () { const char arr [ 10 ]{ 2 , 4 , 6 , 8 }; for ( const char & c : arr ) { printf ( \"c=%c \\n \" , c ); } }","title":"\u5165\u529b\u4f8b"},{"location":"tools/onlinecompilers/#_4","text":"#include <cstdio> int main () { const char arr [ 10 ] = { 2 , 4 , 6 , 8 , '\\0' , '\\0' , '\\0' , '\\0' , '\\0' , '\\0' }; { char const ( & __range1 )[ 10 ] = arr ; const char * __begin1 = __range1 ; const char * __end1 = __range1 + 10l ; for ( ; __begin1 != __end1 ; ++ __begin1 ) { const char & c = * __begin1 ; printf ( \"c=%c \\n \" , static_cast < int > ( c )); } } }","title":"\u51fa\u529b"},{"location":"tools/onlinecompilers/#compiler-explorer","text":"","title":"Compiler Explorer: \u30bd\u30fc\u30b9 \u2192 \u30a2\u30bb\u30f3\u30d6\u30ea\u5909\u63db"},{"location":"tools/onlinecompilers/#_5","text":"Compiler Explorer \u306f\u3001C, C++, Rust, Swift \u306a\u3069\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u8868\u793a\u3059\u308b\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002\u8907\u6570\u30bf\u30d6\u3092\u4f7f\u3063\u3066\u3001GCC, Clang, MSVC, ICC \u306a\u3069\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u3084\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5909\u3048\u305f\u3068\u304d\u306e\u7d50\u679c\u3092\u6bd4\u8f03\u3067\u304d\u307e\u3059\u3002","title":"\u6982\u8981"},{"location":"tools/onlinecompilers/#_6","text":"int square ( int num ) { return num * num ; }","title":"\u5165\u529b\u4f8b"},{"location":"tools/onlinecompilers/#_7","text":"square ( int ): push rbp mov rbp , rsp mov DWORD PTR [ rbp-4 ], edi mov eax , DWORD PTR [ rbp-4 ] imul eax , DWORD PTR [ rbp-4 ] pop rbp ret","title":"\u51fa\u529b"},{"location":"tools/onlinecompilers/#url","text":"Compiler Explorer \u306b\u306f\u3001Web \u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3092 #include \"URL\" \u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3067\u304d\u308b\u72ec\u81ea\u62e1\u5f35\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u3068\u3001GitHub \u306a\u3069\u306b\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30b7\u30f3\u30b0\u30eb\u30d8\u30c3\u30c0\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e2d\u3067\u7c21\u5358\u306b\u4f7f\u3048\u307e\u3059\uff08\u4f8b: https://godbolt.org/z/OV-vGQ \uff09","title":"URL \u304b\u3089\u30a4\u30f3\u30af\u30eb\u30fc\u30c9"},{"location":"tools/package-manager/","text":"\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3 \u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u6bd4\u8f03 \u5bfe\u5fdc\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0 Vcpkg Windows, macOS, Linux Conan Windows, macOS, Linux Hunter Windows, macOS, Linux Buckaroo Windows, macOS, Linux poac macOS, Linux","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3"},{"location":"tools/package-manager/#_1","text":"","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3"},{"location":"tools/package-manager/#_2","text":"\u5bfe\u5fdc\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0 Vcpkg Windows, macOS, Linux Conan Windows, macOS, Linux Hunter Windows, macOS, Linux Buckaroo Windows, macOS, Linux poac macOS, Linux","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u6bd4\u8f03"}]}